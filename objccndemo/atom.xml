<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[objc 中国 Demo]]></title>
  <link href="http://coderforart.com/objccndemo/atom.xml" rel="self"/>
  <link href="http://coderforart.com/objccndemo/"/>
  <updated>2015-09-07T10:44:51+08:00</updated>
  <id>http://coderforart.com/objccndemo/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[介绍]]></title>
    <link href="http://coderforart.com/objccndemo/14415911095373.html"/>
    <updated>2015-09-07T09:58:29+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415911095373.html</id>
    <content type="html"><![CDATA[
<p>objc.io 是关于 Objective-C 最佳实践和先进技术的期刊，欢迎来到第一期！</p>

<p>objc.io 由 <a href="https://twitter.com/chriseidhof">Chris Eidhof</a>, <a href="https://twitter.com/danielboedewadt">Daniel Eggert</a> 和 <a href="https://twitter.com/floriankugler">Florian Kugler</a> 成立于柏林。我们成立 objc.io 的目的是针对深入的、跟所有 iOS 和 OS X 开发者相关的技术话题创造一个正式的平台。</p>

<p>objc.io 每一期专注于某个特定的主题，包含多篇文章涵盖这个主题的各个方面。第一期的主题是<em>更轻量的 View Controllers</em>，共有 4 篇文章，其中 3 篇来自创始团队，1 篇来自 <a href="https://twitter.com/rickigregersen">Ricki Gregersen</a>，欢迎他作为我们的第一个特约撰稿人！</p>

<p>从 iOS 应用的代码层面来说，一个常见的问题是 view controllers 难以控制，因为它们做了太多的事。通过重构出可复用的代码，就可以更容易地理解、维护和测试它们。本主题专注于如何让 view controllers 代码保持整洁的最佳实践和技术。</p>

<p>我们将会看到如何使用 view controllers 的<strong>协同对象 ( coordinating objects )</strong> 分离出 view 和 model 的代码，同时将其他控制器对象引入到 view controllers 中。此外，我们还会看到使用 view controller 容器机制来拆分 view controllers。最后，我们会讨论如何测试这些整洁的 view controllers。</p>

<p>在接下来的期刊中，将会有更多出自 Objective-C 社区中优秀的特约撰稿人的文章。<a href="https://twitter.com/lorenb">Loren Brichter</a>，<a href="https://twitter.com/steipete">Peter Steinberger</a>，<a href="https://twitter.com/brentsimmons">Brent Simmons</a> 和 <a href="https://twitter.com/olebegemann">Ole Begemann</a> 已经决定在稍后提交写作。如果你对某个主题有自己的看法，并且想将你的文章贡献给 objc.io，请邮件<a href="mailto:mail%40objc.io">联系我们</a>吧！</p>

<p>Chris，Daniel，和 Florian。</p>

<hr/>

<p><a href="http://objccn.io/issue-1">话题 #1 下的更多文章</a></p>

<p>原文链接 <a href="http://tang3w.com/translate/objective-c/objc.io/2013/10/21/%E4%BB%8B%E7%BB%8D-objc.io.html">介绍 objc.io - 言无不尽&quot;</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更轻量的 View Controllers]]></title>
    <link href="http://coderforart.com/objccndemo/14415911095456.html"/>
    <updated>2015-09-07T09:58:29+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415911095456.html</id>
    <content type="html"><![CDATA[
<p>View controllers 通常是 iOS 项目中最大的文件，并且它们包含了许多不必要的代码。所以 View controllers 中的代码几乎总是复用率最低的。我们将会看到给 view controllers 瘦身的技术，让代码变得可以复用，以及把代码移动到更合适的地方。</p>

<p>你可以在 Github 上获取关于这个问题的<a href="https://github.com/objcio/issue-1-lighter-view-controllers">示例项目</a>。</p>

<h2 id="toc_0">把 Data Source 和其他 Protocols 分离出来</h2>

<p>把 <code>UITableViewDataSource</code> 的代码提取出来放到一个单独的类中，是为 view controller 瘦身的强大技术之一。当你多做几次，你就能总结出一些模式，并且创建出可复用的类。</p>

<p>举个例，在示例项目中，有个 <code>PhotosViewController</code> 类，它有以下几个方法：</p>

<pre><code># pragma mark Pragma

- (Photo*)photoAtIndexPath:(NSIndexPath*)indexPath {
    return photos[(NSUInteger)indexPath.row];
}

- (NSInteger)tableView:(UITableView*)tableView
 numberOfRowsInSection:(NSInteger)section {
    return photos.count;
}

- (UITableViewCell*)tableView:(UITableView*)tableView
        cellForRowAtIndexPath:(NSIndexPath*)indexPath {
    PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier
                                                      forIndexPath:indexPath];
    Photo* photo = [self photoAtIndexPath:indexPath];
    cell.label.text = photo.name;
    return cell;
}
</code></pre>

<p>这些代码基本都是围绕数组做一些事情，更针对地说，是围绕 view controller 所管理的 photos 数组做一些事情。我们可以尝试把数组相关的代码移到<a href="https://github.com/objcio/issue-1-lighter-view-controllers/blob/master/PhotoData/ArrayDataSource.h">单独的类</a>中。我们使用一个 block 来设置 cell，也可以用 delegate 来做这件事，这取决于你的习惯。</p>

<pre><code>@implementation ArrayDataSource

- (id)itemAtIndexPath:(NSIndexPath*)indexPath {
    return items[(NSUInteger)indexPath.row];
}

- (NSInteger)tableView:(UITableView*)tableView
 numberOfRowsInSection:(NSInteger)section {
    return items.count;
}

- (UITableViewCell*)tableView:(UITableView*)tableView
        cellForRowAtIndexPath:(NSIndexPath*)indexPath {
    id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier
                                              forIndexPath:indexPath];
    id item = [self itemAtIndexPath:indexPath];
    configureCellBlock(cell,item);
    return cell;
}

@end
</code></pre>

<p>现在，你可以把 view controller 中的这 3 个方法去掉了，取而代之，你可以创建一个 <code>ArrayDataSource</code> 类的实例作为 table view 的 data source。</p>

<pre><code>void (^configureCell)(PhotoCell*, Photo*) = ^(PhotoCell* cell, Photo* photo) {
   cell.label.text = photo.name;
};
photosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos
                                                cellIdentifier:PhotoCellIdentifier
                                            configureCellBlock:configureCell];
self.tableView.dataSource = photosArrayDataSource;
</code></pre>

<p>现在你不用担心把一个 index path 映射到数组中的位置了，每次你想把这个数组显示到一个 table view 中时，你都可以复用这些代码。你也可以实现一些额外的方法，比如 <code>tableView:commitEditingStyle:forRowAtIndexPath:</code>，在 table view controllers 之间共享。</p>

<p>这样的好处在于，你可以单独<a href="http://objccn.io/issue-1-3/">测试这个类</a>，再也不用写第二遍。该原则同样适用于数组之外的其他对象。</p>

<p>在今年我们做的一个应用里面，我们大量使用了 Core Data。我们创建了相似的类，但和之前使用的数组不一样，它用一个 fetched results controller 来获取数据。它实现了所有动画更新、处理 section headers、删除操作等逻辑。你可以创建这个类的实例，然后赋予一个 fetch request 和用来设置 cell 的 block，剩下的它都会处理，不用你操心了。</p>

<p>此外，这种方法也可以扩展到其他 protocols 上面。最明显的一个就是 <code>UICollectionViewDataSource</code>。这给了你极大的灵活性；如果，在开发的某个时候，你想用 <code>UICollectionView</code> 代替 <code>UITableView</code>，你几乎不需要对 view controller 作任何修改。你甚至可以让你的 data source 同时支持这两个协议。</p>

<h2 id="toc_1">将业务逻辑移到 Model 中</h2>

<p>下面是 view controller（来自其他项目）中的示例代码，用来查找一个用户的目前的优先事项的列表：</p>

<pre><code>- (void)loadPriorities {
    NSDate* now = [NSDate date];
    NSString* formatString = @&quot;startDate = %@&quot;;
    NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];
    NSSet* priorities = [self.user.priorities filteredSetUsingPredicate:predicate];
    self.priorities = [priorities allObjects];
}
</code></pre>

<p>把这些代码移动到 <code>User</code> 类的 category 中会变得更加清晰，处理之后，在 <code>View Controller.m</code> 中看起来就是这样：</p>

<pre><code>- (void)loadPriorities {
    self.priorities = [user currentPriorities];
}
</code></pre>

<p>在 <code>User+Extensions.m</code> 中：</p>

<pre><code>- (NSArray*)currentPriorities {
    NSDate* now = [NSDate date];
    NSString* formatString = @&quot;startDate = %@&quot;;
    NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];
    return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];
}
</code></pre>

<p>有些代码不能被轻松地移动到 model 对象中，但明显和 model 代码紧密联系，对于这种情况，我们可以使用一个 <code>Store</code>：</p>

<h2 id="toc_2">创建 Store 类</h2>

<p>在我们第一版的示例程序的中，有些代码去加载文件并解析它。下面就是 view controller 中的代码：</p>

<pre><code>- (void)readArchive {
    NSBundle* bundle = [NSBundle bundleForClass:[self class]];
    NSURL *archiveURL = [bundle URLForResource:@&quot;photodata&quot;
                                 withExtension:@&quot;bin&quot;];
    NSAssert(archiveURL != nil, @&quot;Unable to find archive in bundle.&quot;);
    NSData *data = [NSData dataWithContentsOfURL:archiveURL
                                         options:0
                                           error:NULL];
    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;users&quot;];
    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;photos&quot;];
    [unarchiver finishDecoding];
}
</code></pre>

<p>但是 view controller 没必要知道这些，所以我们创建了一个 <em>Store</em> 对象来做这些事。通过分离，我们就可以复用这些代码，单独测试他们，并且让 view controller 保持小巧。Store 对象会关心数据加载、缓存和设置数据栈。它也经常被称为<em>服务层</em>或者<em>仓库</em>。</p>

<h2 id="toc_3">把网络请求逻辑移到 Model 层</h2>

<p>和上面的主题相似：不要在 view controller 中做网络请求的逻辑。取而代之，你应该将它们封装到另一个类中。这样，你的 view controller 就可以在之后通过使用带有回调（比如一个 completion 的 block）来请求网络了。这样的好处是，缓存和错误控制也可以在这个类里面完成。</p>

<h2 id="toc_4">把 View 代码移到 View 层</h2>

<p>不应该在 view controller 中构建复杂的 view 层次结构。你可以使用 Interface Builder 或者把 views 封装到一个 <code>UIView</code> 子类当中。例如，如果你要创建一个选择日期的控件，把它放到一个名为 <code>DatePickerView</code> 的类中会比把所有的事情都在 view controller 中做好好得多。再一次，这样增加了可复用性并保持了简单。</p>

<p>如果你喜欢 Interface Builder，你也可以在 Interface Builder 中做。有些人认为 IB 只能和 view controllers 一起使用，但事实上你也可以加载单独的 nib 文件到自定义的 view 中。在示例程序中，我们创建了一个 <a href="https://github.com/objcio/issue-1-lighter-view-controllers/blob/master/PhotoData/PhotoCell.xib"><code>PhotoCell.xib</code></a>，包含了 photo cell 的布局：</p>

<p><img src="http://img.objccn.io/issue-1/photocell.png" alt="PhotoCell.xib screenshot"/></p>

<p>就像你看到的那样，我们在 view（我们没有在这个 nib 上使用 File&#39;s Owner 对象）上面创建了 properties，然后连接到指定的 subviews。这种技术同样适用于其他自定义的 views。</p>

<h2 id="toc_5">通讯</h2>

<p>其他在 view controllers 中经常发生的事是与其他 view controllers，model，和 views 之间进行通讯。这当然是 controller 应该做的，但我们还是希望以尽可能少的代码来完成它。</p>

<p>关于 view controllers 和 model 对象之间的消息传递，已经有很多阐述得很好的技术（比如 KVO 和 fetched results controllers）。但是 view controllers 之间的消息传递稍微就不是那么清晰了。</p>

<p>当一个 view controller 想把某个状态传递给多个其他 view controllers 时，就会出现这样的问题。较好的做法是把状态放到一个单独的对象里，然后把这个对象传递给其它 view controllers，它们观察和修改这个状态。这样的好处是消息传递都在一个地方（被观察的对象）进行，而且我们也不用纠结嵌套的 delegate 回调。这其实是一个复杂的主题，我们可能在未来用一个完整的话题来讨论这个主题。</p>

<h2 id="toc_6">总结</h2>

<p>我们已经看到一些用来创建更小巧的 view controllers 的技术。我们并不是想把这些技术应用到每一个可能的角落，只是我们有一个目标：写可维护的代码。知道这些模式后，我们就更有可能把那些笨重的 view controllers 变得更整洁。</p>

<h3 id="toc_7">扩展阅读</h3>

<ul>
<li><a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/BasicViewControllers/BasicViewControllers.html">View Controller Programming Guide for iOS</a></li>
<li><a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html">Cocoa Core Competencies: Controller Object</a></li>
<li><a href="http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html">Writing high quality view controllers</a></li>
<li><a href="http://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store">Stack Overflow: Model View Controller Store</a></li>
<li><a href="https://speakerdeck.com/trianglecocoa/unburdened-viewcontrollers-by-jay-thrash">Unburdened View Controllers</a></li>
<li><a href="http://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios">Stack Overflow: How to avoid big and clumsy <code>UITableViewControllers</code> on iOS</a></li>
</ul>

<hr/>

<p><a href="http://objccn.io/issue-1">话题 #1 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-1/lighter-view-controllers.html">Lighter View Controllers</a></p>

<p>译文 <a href="http://tang3w.com/translate/objective-c/objc.io/2013/10/22/%E6%9B%B4%E8%BD%BB%E9%87%8F%E7%9A%84-view-controllers.html">更轻量的 View Controllers - 言无不尽</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整洁的 Table View 代码]]></title>
    <link href="http://coderforart.com/objccndemo/14415911095506.html"/>
    <updated>2015-09-07T09:58:29+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415911095506.html</id>
    <content type="html"><![CDATA[
<p>Table view 是 iOS 应用程序中非常通用的组件。许多代码和 table view 都有直接或间接的关系，随便举几个例子，比如提供数据、更新 table view，控制它的行为以及响应选择事件。在这篇文章中，我们将会展示保持 table view 相关代码的整洁和良好组织的技术。</p>

<h2 id="toc_0">UITableViewController vs. UIViewController</h2>

<p>Apple 提供了 <code>UITableViewController</code> 作为 table views 专属的 view controller 类。Table view controllers 实现了一些非常有用的特性，来帮你避免一遍又一遍地写那些死板的代码！但是话又说回来，table view controller 只限于管理一个全屏展示的 table view。大多数情况下，这就是你想要的，但如果不是，还有其他方法来解决这个问题，就像下面我们展示的那样。</p>

<h3 id="toc_1">Table View Controllers 的特性</h3>

<p>Table view controllers 会在第一次显示 table view 的时候帮你加载其数据。另外，它还会帮你切换 table view 的编辑模式、响应键盘通知、以及一些小任务，比如闪现侧边的滑动提示条和清除选中时的背景色。为了让这些特性生效，当你在子类中覆写类似 <code>viewWillAppear:</code> 或者 <code>viewDidAppear:</code> 等事件方法时，需要调用 super 版本。</p>

<p>Table view controllers 相对于标准 view controllers 的一个特别的好处是它支持 Apple 实现的“下拉刷新”。目前，文档中唯一的使用 <code>UIRefreshControl</code> 的方式就是通过 table view controller ，虽然通过努力在其他地方也能让它工作（<a href="http://stackoverflow.com/questions/12805003/uirefreshcontrol-issues">见此处</a>），但很可能在下一次 iOS 更新的时候就不行了。</p>

<p>这些要素加一起，为我们提供了大部分 Apple 所定义的标准 table view 交互行为，如果你的应用恰好符合这些标准，那么直接使用 table view controllers 来避免写那些死板的代码是个很好的方法。</p>

<h3 id="toc_2">Table View Controllers 的限制</h3>

<p>Table view controllers 的 view 属性永远都是一个 table view。如果你稍后决定在 table view 旁边显示一些东西（比如一个地图），如果不依赖于那些奇怪的 hacks，估计就没什么办法了。</p>

<p>如果你是用代码或 .xib 文件来定义的界面，那么迁移到一个标准 view controller 将会非常简单。但是如果你使用了 storyboards，那么这个过程要多包含几个步骤。除非重新创建，否则你并不能在 storyboards 中将 table view controller 改成一个标准的 view controller。这意味着你必须将所有内容拷贝到新的 view controller，然后再重新连接一遍。</p>

<p>最后，你需要把迁移后丢失的 table view controller 的特性给补回来。大多数都是 <code>viewWillAppear:</code> 或 <code>viewDidAppear:</code> 中简单的一条语句。切换编辑模式需要实现一个 action 方法，用来切换 table view 的 <code>editing</code> 属性。大多数工作来自重新创建对键盘的支持。</p>

<p>在选择这条路之前，其实还有一个更轻松的选择，它可以通过分离我们需要关心的功能（关注点分离），让你获得额外的好处：</p>

<h3 id="toc_3">使用Child View Controllers</h3>

<p>和完全抛弃 table view controller 不同，你还可以将它作为 child view controller 添加到其他 view controller 中（<a href="http://objccn.io/issue-1-4">关于此话题的文章</a>）。这样，parent view controller 在管理其他的你需要的新加的界面元素的同时，table view controller 还可以继续管理它的 table view。</p>

<pre><code>- (void)addPhotoDetailsTableView
{
    DetailsViewController *details = [[DetailsViewController alloc] init];
    details.photo = self.photo;
    details.delegate = self;
    [self addChildViewController:details];
    CGRect frame = self.view.bounds;
    frame.origin.y = 110;
    details.view.frame = frame;
    [self.view addSubview:details.view];
    [details didMoveToParentViewController:self];
}
</code></pre>

<p>如果你使用这个解决方案，你就必须在 child view controller 和 parent view controller 之间建立消息传递的渠道。比如，如果用户选择了一个 table view 中的 cell，parent view controller 需要知道这个事件来推入其他 view controller。根据使用习惯，通常最清晰的方式是为这个 table view controller 定义一个 delegate protocol，然后到 parent view controller 中去实现。</p>

<pre><code>@protocol DetailsViewControllerDelegate
- (void)didSelectPhotoAttributeWithKey:(NSString *)key;
@end

@interface PhotoViewController () 
@end

@implementation PhotoViewController
// ...
- (void)didSelectPhotoAttributeWithKey:(NSString *)key
{
    DetailViewController *controller = [[DetailViewController alloc] init];
    controller.key = key;
    [self.navigationController pushViewController:controller animated:YES];
}
@end
</code></pre>

<p>就像你看到的那样，这种结构为 view controller 之间的消息传递带来了额外的开销，但是作为回报，代码封装和分离非常清晰，有更好的复用性。根据实际情况的不同，这既可能让事情变得更简单，也可能会更复杂，需要读者自行斟酌和决定。</p>

<h2 id="toc_4">分离关注点（Separating Concerns）</h2>

<p>当处理 table views 的时候，有许多各种各样的任务，这些任务穿梭于 models，controllers 和 views 之间。为了避免让 view controllers 做所有的事，我们将尽可能地把这些任务划分到合适的地方，这样有利于阅读、维护和测试。</p>

<p>这里描述的技术是文章<a href="http://objccn.io/issue-1-1">更轻量的 View Controllers</a> 中的概念的延伸，请参考这篇文章来理解如何重构 data source 和 model 的逻辑。结合 table views，我们来具体看看如何在 view controllers 和 views 之间分离关注点。</p>

<h3 id="toc_5">搭建 Model 对象和 Cells 之间的桥梁</h3>

<p>有时我们需要将想显示的 model 层中的数据传到 view 层中去显示。由于我们同时也希望让 model 和 view 之间明确分离，所以通常把这个任务转移到 table view 的 data source 中去处理：</p>

<pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    PhotoCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;PhotoCell&quot;];
    Photo *photo = [self itemAtIndexPath:indexPath];
    cell.photoTitleLabel.text = photo.name;
    NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
    cell.photoDateLabel.text = date;
}
</code></pre>

<p>但是这样的代码会让 data source 变得混乱，因为它向 data source 暴露了 cell 的设计。最好分解出来，放到 cell 类的一个 category 中。</p>

<pre><code>@implementation PhotoCell (ConfigureForPhoto)

- (void)configureForPhoto:(Photo *)photo
{
    self.photoTitleLabel.text = photo.name;
    NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
    self.photoDateLabel.text = date;
}

@end
</code></pre>

<p>有了上述代码后，我们的 data source 方法就变得简单了。</p>

<pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    PhotoCell *cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier];
    [cell configureForPhoto:[self itemAtIndexPath:indexPath]];
    return cell;
}
</code></pre>

<p>在我们的示例代码中，table view 的 data source 已经<a href="http://objccn.io/issue-1-1">分解到单独的类中了</a>，它用一个设置 cell 的 block 来初始化。这时，这个 block 就变得这样简单了：</p>

<pre><code>TableViewCellConfigureBlock block = ^(PhotoCell *cell, Photo *photo) {
    [cell configureForPhoto:photo];
};
</code></pre>

<h3 id="toc_6">让 Cells 可复用</h3>

<p>有时多种 model 对象需要用同一类型的 cell 来表示，这种情况下，我们可以进一步让 cell 可以复用。首先，我们给 cell 定义一个 protocol，需要用这个 cell 显示的对象必须遵循这个 protocol。然后简单修改 category 中的设置方法，让它可以接受遵循这个 protocol 的任何对象。这些简单的步骤让 cell 和任何特殊的 model 对象之间得以解耦，让它可适应不同的数据类型。</p>

<h3 id="toc_7">在 Cell 内部控制 Cell 的状态</h3>

<p>如果你想自定义 table views 默认的高亮或选择行为，你可以实现两个 delegate 方法，把点击的 cell 修改成我们想要的样子。例如：</p>

<pre><code>- (void)tableView:(UITableView *)tableView
        didHighlightRowAtIndexPath:(NSIndexPath *)indexPath
{
    PhotoCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.photoTitleLabel.shadowColor = [UIColor darkGrayColor];
    cell.photoTitleLabel.shadowOffset = CGSizeMake(3, 3);
}

- (void)tableView:(UITableView *)tableView
        didUnhighlightRowAtIndexPath:(NSIndexPath *)indexPath
{
    PhotoCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.photoTitleLabel.shadowColor = nil;
}
</code></pre>

<p>然而，这两个 delegate 方法的实现又基于了 view controller 知晓 cell 实现的具体细节。如果我们想替换或重新设计 cell，我们必须改写 delegate 代码。View 的实现细节和 delegate 的实现交织在一起了。我们应该把这些细节移到 cell 自身中去。</p>

<pre><code>@implementation PhotoCell
// ...
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated
{
    [super setHighlighted:highlighted animated:animated];
    if (highlighted) {
        self.photoTitleLabel.shadowColor = [UIColor darkGrayColor];
        self.photoTitleLabel.shadowOffset = CGSizeMake(3, 3);
    } else {
        self.photoTitleLabel.shadowColor = nil;
    }
}
@end
</code></pre>

<p>总的来说，我们在努力把 view 层和 controller 层的实现细节分离开。delegate 肯定得清楚一个 view 该显示什么状态，但是它不应该了解如何修改 view 结构或者给某些 subviews 设置某些属性以获得正确的状态。所有这些逻辑都应该封装到 view 内部，然后给外部提供一个简单地 API。</p>

<h3 id="toc_8">控制多个 Cell 类型</h3>

<p>如果一个 table view 里面有多种类型的 cell，data source 方法很快就难以控制了。在我们示例程序中，photo details table 有两种不同类型的 cell：一种用于显示几个星，另一种用来显示一个键值对。为了划分处理不同 cell 类型的代码，data source 方法简单地通过判断 cell 的类型，把任务派发给其他指定的方法。</p>

<pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSString *key = self.keys[(NSUInteger) indexPath.row];
    id value = [self.photo valueForKey:key];
    UITableViewCell *cell;
    if ([key isEqual:PhotoRatingKey]) {
        cell = [self cellForRating:value indexPath:indexPath];
    } else {
        cell = [self detailCellForKey:key value:value];
    }
    return cell;
}

- (RatingCell *)cellForRating:(NSNumber *)rating
                    indexPath:(NSIndexPath *)indexPath
{
    // ...
}

- (UITableViewCell *)detailCellForKey:(NSString *)key
                                value:(id)value
{
    // ...
}
</code></pre>

<h3 id="toc_9">编辑 Table View</h3>

<p>Table view 提供了易于使用的编辑特性，允许你对 cell 进行删除或重新排序。这些事件都可以让 table view 的 data source 通过 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:commitEditingStyle:forRowAtIndexPath:">delegate 方法</a>得到通知。因此，通常我们能在这些 delegate 方法中看到对数据的进行修改的操作。</p>

<p>修改数据很明显是属于 model 层的任务。Model 应该为诸如删除或重新排序等操作暴露一个 API，然后我们可以在 data source 方法中调用它。这样，controller 就可以扮演 view 和 model 之间的协调者，而不需要知道 model 层的实现细节。并且还有额外的好处，model 的逻辑也变得更容易测试，因为它不再和 view controllers 的任务混杂在一起了。</p>

<h2 id="toc_10">总结</h2>

<p>Table view controllers（以及其他的 controller 对象！）应该在 model 和 view 对象之间扮演<a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html">协调者和调解者的角色</a>。它不应该关心明显属于 view 层或 model 层的任务。你应该始终记住这点，这样 delegate 和 data source 方法会变得更小巧，最多包含一些简单地样板代码。</p>

<p>这不仅减少了 table view controllers 那样的大小和复杂性，而且还把业务逻辑和 view 的逻辑放到了更合适的地方。Controller 层的里里外外的实现细节都被封装成了简单地 API，最终，它变得更加容易理解，也更利于团队协作。</p>

<h3 id="toc_11">扩展阅读</h3>

<ul>
<li><a href="http://www.sebastianrehnby.com/blog/2013/01/01/skinnier-controllers-using-view-categories/">Blog: Skinnier Controllers using View Categories</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/userexperience/conceptual/tableview_iphone/AboutTableViewsiPhone/AboutTableViewsiPhone.html">Table View Programming Guide</a></li>
<li><a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html">Cocoa Core Competencies: Controller Object</a></li>
</ul>

<hr/>

<p><a href="http://objccn.io/issue-1">话题 #1 下的更多文章</a></p>

<p>原文<a href="http://www.objc.io/issue-1/table-views.html">Clean table view code</a></p>

<p>译文<a href="http://tang3w.com/translate/objective-c/objc.io/2013/10/23/%E6%95%B4%E7%90%86-table-view-%E7%9A%84%E4%BB%A3%E7%A0%81.html">整理 Table View 的代码 - 言无不尽</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试 View Controllers]]></title>
    <link href="http://coderforart.com/objccndemo/14415911095558.html"/>
    <updated>2015-09-07T09:58:29+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415911095558.html</id>
    <content type="html"><![CDATA[
<p>我们不是迷信测试，但它应该帮助我们加快开发进度，并且让事情变得更有趣。</p>

<h2 id="toc_0">让事情保持简单</h2>

<p>测试简单的事情很简单，同样，测试复杂的事会很复杂。就像我们在其他文章中指出的那样，让事情保持简单小巧总是好的。除此之外，它还有利于我们测试。这是件双赢的事。让我们来看看<a href="https://en.wikipedia.org/wiki/Test-driven_development">测试驱动开发</a>（简称 TDD），有些人喜欢它，有些人则不喜欢。我们在这里不深入讨论，只是如果用 TDD，你得在写代码之前先写好测试。如果你好奇的话，可以去找 Wikipedia 上的文章看看。同时，我们也认为重构和测试可以很好地结合在一起。</p>

<p>测试 UI 部分通常很麻烦，因为它们包含太多活动部件。通常，view controller 需要和大量的 model 和 view 类交互。为了使 view controller 便于测试，我们要让任务尽量分离。</p>

<p>幸好，我们在<a href="http://objccn.io/issue-1-1">更轻量的 view controller</a> 这篇文章中的阐述的技术可以让测试更加简单。通常，如果你发现有些地方很难做测试，这就说明你的设计出了问题，你应该重构它。你可以重新参考<a href="http://objccn.io/issue-1-1">更轻量的 view controller</a> 这篇文章来获得一些帮助。总的目标就是有清晰的关注点分离。每个类只做一件事，并且做好。这样就可以让你只测试这件事。</p>

<p>记住：测试越多，回报的增长趋势越慢。首先你应该做简单的测试。当你觉得满意时，再加入更多复杂的测试。</p>

<h2 id="toc_1">Mocking</h2>

<p>当你把一个整体拆分成小零件（比如更小的类）时，我们可以针对每个小的类来进行测试。但由于我们测试的类会和其他类交互，这里我们用一个所谓的 <code>mock</code> 或 <code>stub</code> 来绕开它。把 <code>mock</code> 对象看成是一个占位符，我们测试的类会跟这个占位符交互，而不是真正的那个对象。这样，我们就可以针对性地测试，并且保证不依赖于应用程序的其他部分。</p>

<p>在示例程序中，我们有个包含数组的 data source 需要测试。这个 data source 会在某个时候从 table view 中取出（dequeue）一个 cell。在测试过程中，还没有 table view，但是我们传递一个 <code>mock</code> 的 table view，这样即使没有 table view，也可以测试 data source，就像下面你即将看到的。起初可能有点难以理解，多看几次后，你就能体会到它的强大和简单。</p>

<p>Objective-C 中有个用来 mocking 的强大工具叫做 <a href="http://ocmock.org/">OCMock</a>。它是一个非常成熟的项目，充分利用了 Objective-C 运行时强大的能力和灵活性。它使用了一些很酷的技巧，让通过 mock 对象来测试变得更加有趣。</p>

<p>本文后面有 data source 测试的例子，它更加详细地展示了这些技术如何工作在一起。</p>

<h2 id="toc_2">SenTestKit</h2>

<blockquote>
<p><span class="secondary radius label">编者注</span> 这一节有一些过时了。在 Xcode 5 中 SenTestingKit 已经被 XCTest 完全取代，不过两者使用上没有太多区别，我们可以通过 Xcode 的 <code>Edit</code> -&gt; <code>Refactor</code> -&gt; <code>Convert to XCTest</code> 选项来切换到新的测试框架</p>
</blockquote>

<p>我们将要使用的另一个工具是一个测试框架，开发者工具的一部分：<a href="http://www.sente.ch/">Sente</a> 的 SenTestingKit。这个上古神器从 1997 年起就伴随在 Objective-C 开发者左右，比第一款 iPhone 发布还早 10 年。现在，它已经集成到 Xcode 中了。SenTestingKit 会运行你的测试。通过 SenTestingKit，你将测试组织在类中。你需要给每一个你想测试的类创建一个测试类，类名以 <code>Tests</code> 结尾，它反应了这个类是干什么的。</p>

<p>这些<em>测试类</em>里的方法会做具体的测试工作。方法名必须以 <code>test</code> 开头来作为触发一个测试运行的条件。还有特殊的 <code>-setUp</code> 和 <code>-tearDown</code> 方法，你可以重载它们来设置各个测试。记住，你的测试类就是个类而已：只要对你有帮助，可以按需求在里面加 properties 和辅助方法。</p>

<p>做测试时，为测试类创建基类是个不错的模式。把通用的逻辑放到基类里面，可以让测试更简单和集中。可以通过<a href="https://github.com/objcio/issue-1-lighter-view-controllers/blob/master/PhotoDataTests/PhotoDataTestCase.h">示例程序</a>中的例子来看看这样带来的好处。我们没有使用 Xcode 的测试模板，为了让事情简单有效，我们只创建了单独的 <code>.m</code> 文件。通过把类名改成以 <code>Tests</code> 结尾，类名可以反映出我们在对什么做测试。</p>

<blockquote>
<p><span class="secondary radius label">编者注</span> Xcode 5 中 默认的测试模板也不再会自动创建 <code>.h</code> 文件了 </p>
</blockquote>

<h2 id="toc_3">与 Xcode 集成</h2>

<p>测试会被 build 成一个 bundle，其中包含一个动态库和你选择的资源文件。如果你要测试某些资源文件，你得把它们加到测试的 target 中，Xcode 就会将它们打包到一个 bundle 中。接着你可以通过 NSBundle 来定位这些资源文件，示例项目实现了一个 <code>-URLForResource:withExtension:</code> 方法来方便的使用它。</p>

<p>Xcode 中的每个 <code>scheme</code> 定义了相应的测试 bundle 是哪个。通过 ⌘-R 运行程序，⌘-U 运行测试。</p>

<p>测试的运行依附于程序的运行，当程序运行时，测试 bundle 将被注入（<code>injected</code>）。测试时，你可能不想让你的程序做太多的事，那样会对测试造成干扰。可以把下面的代码加到 app delegate 中：</p>

<pre><code>static BOOL isRunningTests(void) __attribute__((const));

- (BOOL)application:(UIApplication *)application
        didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    if (isRunningTests()) {
        return YES;
    }

    //
    // Normal logic goes here
    //

    return YES;
}

static BOOL isRunningTests(void)
{
    NSDictionary* environment = [[NSProcessInfo processInfo] environment];
    NSString* injectBundle = environment[@&quot;XCInjectBundle&quot;];
    return [[injectBundle pathExtension] isEqualToString:@&quot;octest&quot;];
}
</code></pre>

<p>编辑 Scheme 给了你极大的灵活性。你可以在测试之前或之后运行脚本，也可以有多个测试 bundle。这对大型项目来说很有用。最重要的是，可以打开或关闭个别测试，这对调试测试非常有用，只是要记得之后再把它们重新全部打开。</p>

<p>还要记住你可以为测试代码下断点，当测试执行时，调试器会在断点处停下来。</p>

<h2 id="toc_4">测试 Data Source</h2>

<p>好了，让我们开始吧。我们已经通过拆分 view controller 让测试工作变得更轻松了。现在我们要测试 <code>ArrayDataSource</code>。首先我们新建一个空的，基本的测试类。我们把接口和实现都放到一个文件里；也没有哪个地方需要包含 <code>@interface</code>，放到一个文件会显得更加漂亮和整洁。</p>

<pre><code>#import &quot;PhotoDataTestCase.h&quot;

@interface ArrayDataSourceTest : PhotoDataTestCase
@end

@implementation ArrayDataSourceTest
- (void)testNothing;
{
    STAssertTrue(YES, @&quot;&quot;);
}
@end
</code></pre>

<p>这个类没做什么事，只是展示了基本的设置。当我们运行这个测试时，<code>-testNothing</code> 方法将会运行。特别地，<code>STAssert</code> 宏将会做琐碎的检查。注意，前缀 <code>ST</code> 源自于 <code>SenTestingKit</code>。这些宏和 Xcode 集成，会把失败显示到侧边面板的 <u>Issues</u> 导航栏中。</p>

<h2 id="toc_5">第一个测试</h2>

<p>我们现在把 <code>testNothing</code> 替换成一个简单、真正的测试：</p>

<pre><code>- (void)testInitializing;
{
    STAssertNil([[ArrayDataSource alloc] init], @&quot;Should not be allowed.&quot;);
    TableViewCellConfigureBlock block = ^(UITableViewCell *a, id b){};
    id obj1 = [[ArrayDataSource alloc] initWithItems:@[]
                                      cellIdentifier:@&quot;foo&quot;
                                  configureCellBlock:block];
    STAssertNotNil(obj1, @&quot;&quot;);
}
</code></pre>

<h2 id="toc_6">实践 Mocking</h2>

<p>接着，我们想测试 <code>ArrayDataSource</code> 实现的方法：</p>

<pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath;
</code></pre>

<p>为此，我们创建一个测试方法：</p>

<pre><code>- (void)testCellConfiguration;
</code></pre>

<p>首先，创建一个 data source：</p>

<pre><code>__block UITableViewCell *configuredCell = nil;
__block id configuredObject = nil;
TableViewCellConfigureBlock block = ^(UITableViewCell *a, id b){
    configuredCell = a;
    configuredObject = b;
};
ArrayDataSource *dataSource = [[ArrayDataSource alloc] initWithItems:@[@&quot;a&quot;, @&quot;b&quot;]
                                                      cellIdentifier:@&quot;foo&quot;
                                                  configureCellBlock:block];
</code></pre>

<p>注意，<code>configureCellBlock</code> 除了存储对象以外什么都没做，这可以让我们可以更简单地测试它。</p>

<p>然后，我们为 table view 创建一个 <em>mock 对象</em>：</p>

<pre><code>id mockTableView = [OCMockObject mockForClass:[UITableView class]];
</code></pre>

<p>Data source 将在传进来的 table view 上调用 <code>-dequeueReusableCellWithIdentifier:forIndexPath:</code> 方法。我们将告诉 mock object 当它收到这个消息时要做什么。首先创建一个 cell，然后设置 <u>mock</u>。</p>

<pre><code>UITableViewCell *cell = [[UITableViewCell alloc] init];
NSIndexPath* indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
[[[mockTableView expect] andReturn:cell]
        dequeueReusableCellWithIdentifier:@&quot;foo&quot;
                             forIndexPath:indexPath];
</code></pre>

<p>第一次看到它可能会觉得有点迷惑。我们在这里所做的，是让 mock <em>记录</em>特定的调用。Mock 不是一个真正的 table view；我们只是假装它是。<code>-expect</code> 方法允许我们设置一个 mock，让它知道当这个方法调用时要做什么。</p>

<p>另外，<code>-expect</code> 方法也告诉 mock 这个调用必须发生。当我们稍后在 mock 上调用 <code>-verify</code> 时，如果那个方法没有被调用过，测试就会失败。相应地，<code>-stub</code> 方法也用来设置 mock 对象，但它不关心方法是否被调用过。</p>

<p>现在，我们要触发代码运行。我们就调用我们希望测试的方法。</p>

<pre><code>NSIndexPath* indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
id result = [dataSource tableView:mockTableView
            cellForRowAtIndexPath:indexPath];
</code></pre>

<p>然后我们测试是否一切正常：</p>

<pre><code>STAssertEquals(result, cell, @&quot;Should return the dummy cell.&quot;);
STAssertEquals(configuredCell, cell, @&quot;This should have been passed to the block.&quot;);
STAssertEqualObjects(configuredObject, @&quot;a&quot;, @&quot;This should have been passed to the block.&quot;);
[mockTableView verify];
</code></pre>

<p><code>STAssert</code> 宏测试值的相等性。注意，前两个测试，我们通过比较指针来完成；我们不使用 <code>-isEqual:</code>，是因为我们实际希望测试的是 <code>result</code>，<code>cell</code> 和 <code>configuredCell</code> 都是同一个对象。第三个测试要用 <code>-isEqual:</code>，最后我们调用 mock 的 <code>-verify</code> 方法。</p>

<p>注意，在示例程序中，我们是这样设置 mock 的：</p>

<pre><code>id mockTableView = [self autoVerifiedMockForClass:[UITableView class]];
</code></pre>

<p>这是我们测试基类中的一个方便的封装，它会在测试最后自动调用 <code>-verify</code> 方法。</p>

<h2 id="toc_7">测试 UITableViewController</h2>

<p>下面，我们转向 <code>PhotosViewController</code>。它是个 <code>UITableViewController</code> 的子类，它使用了我们刚才测试过的 data source。View controller 剩下的代码已经相当简单了。</p>

<p>我们想测试点击 cell 后把我们带到详情页面，即一个 <code>PhotoViewController</code> 的实例被 push 到 navigation controller 里面。我们再次使用 mocking 来让测试尽可能不依赖于其他部分。</p>

<p>首先我们创建一个 <code>UINavigationController</code> 的 mock：</p>

<pre><code>id mockNavController = [OCMockObject mockForClass:[UINavigationController class]];
</code></pre>

<p>接下来，我们要使用<em>部分 mocking</em>。我们希望 <code>PhotosViewController</code> 实例的 <code>navigationController</code> 返回 <code>mockNavController</code>。我们不能直接设置 navigation controller，所以我们简单地用 stub 来替换掉 <code>PhotosViewController</code> 实例这个方法，让它返回 <code>mockNavController</code> 就可以了。</p>

<pre><code>PhotosViewController *photosViewController = [[PhotosViewController alloc] init];
id photosViewControllerMock = [OCMockObject partialMockForObject:photosViewController];
[[[photosViewControllerMock stub] andReturn:mockNavController] navigationController];
</code></pre>

<p>现在，任何时候对 <code>photosViewController</code> 调用 <code>-navigationController</code> 方法，都会返回 <code>mockNavController</code>。这是个强大的技巧，OCMock 就有这样的本领。</p>

<p>接下来，我们要告诉 navigation controller mock 我们调用的期望，即，一个 photo 不为 nil 的 detail view controller。</p>

<pre><code>UIViewController* viewController = [OCMArg checkWithBlock:^BOOL(id obj) {
    PhotoViewController *vc = obj;
    return ([vc isKindOfClass:[PhotoViewController class]] &amp;&amp;
            (vc.photo != nil));
}];
[[mockNavController expect] pushViewController:viewController animated:YES];
</code></pre>

<p>现在，我们触发 view 加载，并且模拟一行被点击：</p>

<pre><code>UIView *view = photosViewController.view;
STAssertNotNil(view, @&quot;&quot;);
NSIndexPath* indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
[photosViewController tableView:photosViewController.tableView
        didSelectRowAtIndexPath:indexPath];
</code></pre>

<p>最后我们验证 mocks 上期望的方法被调用过：</p>

<pre><code>[mockNavController verify];
[photosViewControllerMock verify];
</code></pre>

<p>现在我们有了一个测试，用来测试和 navigation controller 的交互，以及正确 view controller 的创建。</p>

<p>又一次地，我们在示例程序中使用了便捷的方法：</p>

<pre><code>- (id)autoVerifiedMockForClass:(Class)aClass;
- (id)autoVerifiedPartialMockForObject:(id)object;
</code></pre>

<p>于是，我们不需要记住调用 <code>-verify</code>。</p>

<h2 id="toc_8">进一步探索</h2>

<p>就像你从上面看到的那样，<em>部分 mocking</em> 非常强大。如果你看看 <code>-[PhotosViewController setupTableView]</code> 方法的源码，你就会看到它是如何从 app delegate 中取出 model 对象的。</p>

<pre><code>NSArray *photos = [AppDelegate sharedDelegate].store.sortedPhotos;
</code></pre>

<p>上面的测试依赖于这行代码。打破这种依赖的一种方式是再次使用 <em>部分 mocking</em>，让 app delegate 返回预定义的数据，就像这样：</p>

<pre><code>id storeMock; // 假设我们已经设置过了
id appDelegate = [AppDelegate sharedDelegate]
id appDelegateMock = [OCMockObject partialMockForObject:appDelegate];
[[[appDelegateMock stub] andReturn:storeMock] store];
</code></pre>

<p>现在，无论何时调用 <code>[AppDelegate sharedDelegate].store</code> ，它将返回 <code>storeMock</code>。将这个技术使用好的话，可以确保让你的测试恰到好处地在保持简单和应对复杂之间找到平衡。</p>

<h2 id="toc_9">需要记住的事</h2>

<p><em>部分 mock</em> 技术将会在 mocks 的存在期间替换并保持被 mocking 的对象，并且一直有效。你可以通过提前调用 <code>[aMock stopMocking]</code> 来终于这种行为。大多数时候，你希望 <em>部分 mock</em> 在整个测试期间都保持有效。如果要提前终止，请确保在测试方法最后放置 <code>[aMock verify]</code>。否则 ARC 会过早释放这个 mock，这样你就不能 <code>-verify</code> 了，这不太可能是你想要的结果。</p>

<h2 id="toc_10">测试 NIB 加载</h2>

<p><code>PhotoCell</code> 设置在一个 NIB 中，我们可以写一个简单的测试来检查 outlets 设置得是否正确。我们来回顾一下 <code>PhotoCell</code> 类：</p>

<pre><code>@interface PhotoCell : UITableViewCell

+ (UINib *)nib;

@property (weak, nonatomic) IBOutlet UILabel* photoTitleLabel;
@property (weak, nonatomic) IBOutlet UILabel* photoDateLabel;

@end
</code></pre>

<p>我们的简单测试的实现看上去是这样：</p>

<pre><code>@implementation PhotoCellTests

- (void)testNibLoading;
{
    UINib *nib = [PhotoCell nib];
    STAssertNotNil(nib, @&quot;&quot;);

    NSArray *a = [nib instantiateWithOwner:nil options:@{}];
    STAssertEquals([a count], (NSUInteger) 1, @&quot;&quot;);
    PhotoCell *cell = a[0];
    STAssertTrue([cell isMemberOfClass:[PhotoCell class]], @&quot;&quot;);

    // 检查 outlet 是否正确设置
    STAssertNotNil(cell.photoTitleLabel, @&quot;&quot;);
    STAssertNotNil(cell.photoDateLabel, @&quot;&quot;);
}

@end
</code></pre>

<p>非常基础，但是能出色完成工作。</p>

<p>值得一提的是，当有发生改变时，我们需要同时更新测试以及相应的类或 nib 。这是事实。你需要考虑改变类或者 nib 文件时可能会打破原有的 outlets 连接。如果你用了 <code>.xib</code> 文件，你可能要注意了，这是经常发生的事。</p>

<h2 id="toc_11">关于 Class 和 Injection</h2>

<p>我们已经从<em>与 Xcode 集成</em>得知，测试 bundle 会注入到应用程序中。省略注入的如何工作的细节（它本身是个巨大的话题），简单地说：注入是把待注入的 bundle（我们的测试 bundle）中的 Objective-C 类添加到运行的应用程序中。这很好，因为这样允许我们运行测试了。</p>

<p>还有一件事会很让人迷惑，那就是如果我们同时把一个类添加到应用程序和测试 bundle中。如果在上面的示例程序中，我们（不小心）把 <code>PhotoCell</code> 类同时添加到测试 bundle 和应用程序里的话，在测试 bundle 中调用 <code>[PhotoCell class]</code> 会返回一个不同的指针（你应用程序中的那个类）。于是我们的测试将会失败：</p>

<pre><code>STAssertTrue([cell isMemberOfClass:[PhotoCell class]], @&quot;&quot;);
</code></pre>

<p>再一次声明：注入很复杂。你应该确认的是：不要把应用程序中的 <code>.m</code> 文件添加到测试 target 中。否则你会得到预想不到的行为。</p>

<h2 id="toc_12">额外的思考</h2>

<p>如果你使用一个持续集成 (CI) 的解决方案，让你的测试启动和运行是一个好主意。详细的描述超过了本文的范围。这些脚本通过 <code>RunUnitTests</code> 脚本触发。还有个 <code>TEST_AFTER_BUILD</code> 环境变量。</p>

<p>另一种有趣的选择是创建单独的测试 bundle 来自动化性能测试。你可以在测试方法里做任何你想做的。定时调用一些方法并使用 <code>STAssert</code> 来检查它们是否在特定阈值里面是其中一种选择。</p>

<h3 id="toc_13">扩展阅读</h3>

<ul>
<li><a href="https://github.com/objcio/issue-1-lighter-view-controllers/blob/master/PhotoDataTests/PhotoDataTestCase.h">Test-driven development</a></li>
<li><a href="http://ocmock.org">OCMock</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/UnitTesting/">Xcode Unit Testing Guide</a></li>
<li><a href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">Book: Test Driven Development: By Example</a></li>
<li><a href="http://qualitycoding.org">Blog: Quality Coding</a></li>
<li><a href="http://iosunittesting.com">Blog: iOS Unit Testing</a></li>
<li><a href="http://blog.securemacprogramming.com/?s=testing&amp;searchsubmit=Search">Blog: Secure Mac Programing</a></li>
</ul>

<hr/>

<p><a href="http://objccn.io/issue-1">话题 #1 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-1/testing-view-controllers.html">Testing View Controllers</a></p>

<p>译文 <a href="http://tang3w.com/translate/objective-c/objc.io/2013/10/24/%E6%B5%8B%E8%AF%95-view-controllers.html">测试 View Controllers - 言无不尽</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View Controller 容器]]></title>
    <link href="http://coderforart.com/objccndemo/14415911095624.html"/>
    <updated>2015-09-07T09:58:29+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415911095624.html</id>
    <content type="html"><![CDATA[
<p>在 iOS 5 之前，view controller 容器是 Apple 的特权。实际上，在 view controller 编程指南中还有一段申明，指出你不应该使用它们。Apple 对 view controllers 的总的建议曾经是“一个 view controller 管理一个全屏幕的内容”。这个建议后来被改为“一个 view controller 管理一个自包含的内容单元”。为什么 Apple 不想让我们构建自己的 tab bar controllers 和 navigation controllers？或者更确切地说，这段代码有什么问题：</p>

<pre><code>[viewControllerA.view addSubView:viewControllerB.view]
</code></pre>

<p><img src="http://img.objccn.io/issue-1/view-insertion.png" alt="Inconsistent view hierarchy"/></p>

<p>UIWindow 作为一个应用程序的根视图（root view），是旋转和初始布局消息等事件产生的来源。在上图中，child view controller 的 view 插入到 root view controller 的视图层级中，被排除在这些事件之外了。View 事件方法诸如 <code>viewWillAppear:</code> 将不会被调用。</p>

<p>在 iOS 5 之前构建自定义的 view controller 容器时，要保存一个 child view controller 的引用，还要手动在 parent view controller 中转发所有 view 事件方法的调用，要做好非常困难。</p>

<h2 id="toc_0">一个例子</h2>

<p>当你还是个孩子，在沙滩上玩时，你父母是否告诉过你，如果不停地用铲子挖，最后会到达美国？我父母就说过，我就做了个叫做 <u>Tunnel</u> 的 demo 程序来验证这个说法。你可以 clone 这个 <a href="https://github.com/RickiG/view-controller-containment">Github 代码库</a>并运行这个程序，它有助于让你更容易理解示例代码。（剧透：从丹麦西部开始，挖穿地球，你会到达南太平洋的某个地方）</p>

<p><img src="http://img.objccn.io/issue-1/tunnel-screenshot.png" alt="Tunnel screenshot"/></p>

<p>为了寻找<a href="http://en.wikipedia.org/wiki/Antipodes">对跖点</a>，也称作相反的坐标，将拿着铲子的小孩四处移动，地图会告诉你对应的出口位置在哪里。点击雷达按钮，地图会翻转过来显示位置的名称。</p>

<p>屏幕上有两个 map view controllers。每个都需要控制地图的拖动，标注和更新。翻过来会显示两个新的 view controllers，用来检索地理位置。所有的 view controllers 都包含于一个 parent view controller 中，它持有它们的 views，并保证正确的布局和旋转行为。</p>

<p>Root view controller 有两个 container views。添加它们是为了让布局，以及 child view controllers 的 views 的动画做起来更容易，我们马上就可以看到。</p>

<pre><code>- (void)viewDidLoad
{
    [super viewDidLoad];

    //Setup controllers
    _startMapViewController = [RGMapViewController new];
    [_startMapViewController setAnnotationImagePath:@&quot;man&quot;];
    [self addChildViewController:_startMapViewController];          //  1
    [topContainer addSubview:_startMapViewController.view];         //  2
    [_startMapViewController didMoveToParentViewController:self];   //  3
    [_startMapViewController addObserver:self
                              forKeyPath:@&quot;currentLocation&quot;
                                 options:NSKeyValueObservingOptionNew
                                 context:NULL];

    _startGeoViewController = [RGGeoInfoViewController new];        //  4
}
</code></pre>

<p>我们实例化了 <code>_startMapViewController</code>，用来显示起始位置，并设置了用于标注的图像。</p>

<ol>
<li><code>_startMapViewcontroller</code> 被添加成 root view controller 的一个 child。这会自动在 child 上调用 <code>willMoveToParentViewController:</code> 方法。</li>
<li>child 的 view 被添加成 container view 的 subview。</li>
<li>child 被通知到它现在有一个 parent view controller。</li>
<li>用来显示地理位置的 child view controller 被实例化了，但是还没有被插入到任何 view 或 controller 层级中。</li>
</ol>

<h2 id="toc_1">布局</h2>

<p>Root view controller 定义了两个 container views，它决定了 child view controller 的大小。Child view controllers 不知道会被添加到哪个容器中，因此必须适应大小。</p>

<pre><code>- (void) loadView
{
    mapView = [MKMapView new];
    mapView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [mapView setDelegate:self];
    [mapView setMapType:MKMapTypeHybrid];

    self.view = mapView;
}
</code></pre>

<p>现在，它们就会用 super view 的 bounds 来进行布局。这样增加了 child view controller 的可复用性；如果我们把它 push 到 navigation controller 的栈中，它仍然会正确地布局。</p>

<h2 id="toc_2">过场动画</h2>

<p>Apple 已经针对 view controller 容器做了细致的 API，我们可以构造我们能想到的任何容器场景的动画。Apple 还提供了一个基于 block 的便利方法，来切换屏幕上的两个 controller views。方法 <code>transitionFromViewController:toViewController:(...)</code> 已经为我们考虑了很多细节。</p>

<pre><code>- (void) flipFromViewController:(UIViewController*) fromController
               toViewController:(UIViewController*) toController
                  withDirection:(UIViewAnimationOptions) direction
{
    toController.view.frame = fromController.view.bounds;                           //  1
    [self addChildViewController:toController];                                     //
    [fromController willMoveToParentViewController:nil];                            //

    [self transitionFromViewController:fromController
                      toViewController:toController
                              duration:0.2
                               options:direction | UIViewAnimationOptionCurveEaseIn
                            animations:nil
                            completion:^(BOOL finished) {

                                [toController didMoveToParentViewController:self];  //  2
                                [fromController removeFromParentViewController];    //  3
                            }];
}
</code></pre>

<ol>
<li>在开始动画之前，我们把 <code>toController</code> 作为一个 child 进行添加，并通知 <code>fromController</code> 它将被移除。如果 <code>fromController</code> 的 view 是容器 view 层级的一部分，它的 <code>viewWillDisappear:</code> 方法就会被调用。</li>
<li><code>toController</code> 被告知它有一个新的 parent，并且适当的 view 事件方法将被调用。</li>
<li><code>fromController</code> 被移除了。</li>
</ol>

<p>这个为 view controller 过场动画而准备的便捷方法会自动把老的 view controller 换成新的 view controller。然而，如果你想实现自己的过场动画，并且希望一次只显示一个 view，你需要在老的 view 上调用 <code>removeFromSuperview</code>，并为新的 view 调用 <code>addSubview:</code>。错误的调用次序通常会导致 <code>UIViewControllerHierarchyInconsistency</code> 警告。例如：在添加 view 之前调用 <code>didMoveToParentViewController:</code> 就触发这个警告。</p>

<p>为了能使用 <code>UIViewAnimationOptionTransitionFlipFromTop</code> 动画，我们必须把 children&#39;s view 添加到我们的 view containers 里面，而不是 root view controller 的 view。否则动画将导致整个 root view 都翻转。</p>

<h2 id="toc_3">通信</h2>

<p>View controllers 应该是可复用的、自包含的实体。Child view controllers 也不能违背这个经验法则。为了达到目的，parent view controller 应该只关心两个任务：布局 child view controller 的 root view，以及与 child view controller 暴露出来的 API 通信。它绝不应该去直接修改 child view tree 或其他内部状态。</p>

<p>Child view controller 应该包含管理它们自己的 view 树的必要逻辑，而不是把它们看作单纯呆板的 views。这样，就有了更清晰的关注点分离和更好的可复用性。</p>

<p>在示例程序 Tunnel 中，parent view controller 观察了 map view controllers 上的一个叫 <code>currentLocation</code> 的属性。</p>

<pre><code>[_startMapViewController addObserver:self
                          forKeyPath:@&quot;currentLocation&quot;
                             options:NSKeyValueObservingOptionNew
                             context:NULL];
</code></pre>

<p>当这个属性跟着拿着铲子的小孩的移动而改变时，parent view controller 将新坐标的对跖点传递给另一个地图：</p>

<pre><code>[oppositeController updateAnnotationLocation:[newLocation antipode]];
</code></pre>

<p>类似地，当你点击雷达按钮，parent view controller 给新的 child view controllers 设置待检索的坐标。</p>

<pre><code>[_startGeoViewController setLocation:_startMapViewController.currentLocation];
[_targetGeoViewController setLocation:_targetMapViewController.currentLocation];
</code></pre>

<p>我们想要达到的目标和你选择的手段无关，从 child 到 parent view controller 消息传递的技术，不论是采用 KVO，通知，或者是委托模式，child view controller 都应该独立和可复用。在我们的例子中，我们可以将某个 child view controller 推入到一个 navigation 栈中，它仍然能够通过相同的 API 进行通信。</p>

<hr/>

<p><a href="http://objccn.io/issue-1">话题 #1 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-1/testing-view-controllers.html">Testing View Controllers</a></p>

<p>译文 <a href="http://tang3w.com/translate/objective-c/objc.io/2013/10/28/view-controller-%E5%AE%B9%E5%99%A8.html">View Controller 容器 - 言无不尽</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卷首语]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472419.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472419.html</id>
    <content type="html"><![CDATA[
<p>欢迎来到 objc.io 的第二期！</p>

<p>首先，我们想对各位读者说声谢谢！第一期推出后，大家的反馈如同潮水一般淹没了我们，这样的一个开局大大地超出了我们的预期。</p>

<p>在第二期中，我们将深入探讨并发编程这个主题。如今的时代，计算机甚至连移动设备都拥有了多核CPU可供使用。如果我们能正确地使用并发机制，我们应用程序的性能将会得到大幅的提升。</p>

<p>不幸的是，虽然并发编程的API看起来很简单，但是其天生存在很多错综复在的问题和陷阱。我们希望本期的这些文章可以让你更深刻地理解并发编程，并帮助你跳过那些潜在的坑。</p>

<p>本期，我们很高兴地邀请到了 <a href="https://twitter.com/steipete">Peter Steinberger</a> 和 <a href="https://twitter.com/anagrom_ataf">Tobias Kräntzer</a> 来撰文。Peter 有一个非常著名的库 <a href="http://pspdfkit.com">PSPDFKit</a> ，他将分享开发这个库中得到的并发编程相关的经验，而 Tobias 撰写了异步测试相关的代码。</p>

<p>如果你有什么好的主题，希望给 <a href="http://www.objc.io">objc.io</a> 投稿的话，请与我们 <a href="mailto:mail%40objc.io">联系</a>。</p>

<blockquote>
<p><span class="secondary radius label">编者注</span> 如果你对 objccn 的翻译项目感兴趣的话，也欢迎与我们<a href="https://github.com/objccn/articles">联系</a></p>
</blockquote>

<p>最后，对于希望订阅本站RSS种子的读者，我们有一个好消息告诉你们：现在你们可以到这里: <a href="http://www.objc.io/feed.xml">objc.io/feed.xml</a> 订阅 <a href="http://www.objc.io">objc.io</a>了。</p>

<p>祝各位阅读愉快！</p>

<p>Chris, Daniel 和 Florian.</p>

<p>2013年，7月</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/editorial.html">Editorial Issue #2</a></p>

<p>译文 <a href="http://iosinit.com/?p=811">objc.io 第2期 并发编程 篇首语 - iOS init</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[并发编程：API 及挑战]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472481.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472481.html</id>
    <content type="html"><![CDATA[
<p><a href="http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29">并发</a>所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上<a href="http://en.wikipedia.org/wiki/Preemption_%28computing%29">分时（时间共享）</a>的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。</p>

<p>OS X 和 iOS 提供了几种不同的 API 来支持并发编程。每一个 API 都具有不同的功能和使用限制，这使它们适合不同的任务。同时，这些 API 处在不同的抽象层级上。我们有可能用其进行非常深入底层的操作，但是这也意味着背负起将任务进行良好处理的巨大责任。</p>

<p>实际上，并发编程是一个很有挑战的主题，它有许多错综复杂的问题和陷阱。当开发者在使用类似 <code>Grand Central Dispatch</code>（GCD）或 <code>NSOperationQueue</code> 的 API 时，很容易遗忘这些问题和陷阱。本文首先对 OS X 和 iOS 中不同的并发编程 API 进行一些介绍，然后再深入了解并发编程中独立于与你所使用的特定 API 的一些内在挑战。</p>

<h2 id="toc_0">OS X 和 iOS 中的并发编程</h2>

<p>苹果的移动和桌面操作系统中提供了相同的并发编程API。 本文会介绍 <code>pthread</code> 、 <code>NSThread</code> 、<code>GCD</code> 、<code>NSOperationQueue</code>，以及 <code>NSRunLoop</code>。实际上把 run loop 也列在其中是有点奇怪，因为它并不能实现真正的并行，不过因为它与并发编程有莫大的关系，因此值得我们进行一些深入了解。</p>

<p>由于高层 API 是基于底层 API 构建的，所以我们首先将从底层的 API 开始介绍，然后逐步扩展到高层 API。不过在具体编程中，选择 API 的顺序刚好相反：因为大多数情况下，选择高层的 API 不仅可以完成底层 API 能完成的任务，而且能够让并发模型变得简单。</p>

<p>如果你对我们为何坚持推荐使用高抽象层级以及简单的并行代码有所疑问的话，那么你可以看看这篇文章的第二部分<a href="#challenges">并发编程中面临的挑战</a>，以及 Peter Steinberger 写的关于<a href="http://objccn.io/issue-2-4/">线程安全</a>的文章。</p>

<h3 id="toc_1">线程</h3>

<p><a href="http://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的 —— 包括 GCD 和操作队列（operation queues）。</p>

<p>多线程可以在单核 CPU 上同时（或者至少看作同时）运行。操作系统将小的时间片分配给每一个线程，这样就能够让用户感觉到有多个任务在同时进行。如果 CPU 是多核的，那么线程就可以真正的以并发方式被执行，从而减少了完成某项操作所需要的总时间。</p>

<p>你可以使用 Instruments 中的 <a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/AnalysingCPUUsageinYourOSXApp/AnalysingCPUUsageinYourOSXApp.html">CPU strategy view</a> 来得知你的代码或者你在使用的框架代码是如何在多核 CPU 中调度执行的。</p>

<p>需要重点关注的是，你无法控制你的代码在什么地方以及什么时候被调度，以及无法控制执行多长时间后将被暂停，以便轮换执行别的任务。这种线程调度是非常强大的一种技术，但是也非常复杂，我们稍后研究。</p>

<p>先把线程调度的复杂情况放一边，开发者可以使用 <a href="http://en.wikipedia.org/wiki/POSIX_Threads">POSIX 线程</a> API，或者 Objective-C 中提供的对该 API 的封装 <code>NSThread</code>，来创建自己的线程。下面这个小示例利用 <code>pthread</code> 来在一百万个数字中查找最小值和最大值。其中并发执行了 4 个线程。从该示例复杂的代码中，应该可以看出为什么你不会希望直接使用 pthread 。</p>

<pre><code>#import &lt;pthread.h&gt;

struct threadInfo {
    uint32_t * inputValues;
    size_t count;
};

struct threadResult {
    uint32_t min;
    uint32_t max;
};

void * findMinAndMax(void *arg)
{
    struct threadInfo const * const info = (struct threadInfo *) arg;
    uint32_t min = UINT32_MAX;
    uint32_t max = 0;
    for (size_t i = 0; i &lt; info-&gt;count; ++i) {
        uint32_t v = info-&gt;inputValues[i];
        min = MIN(min, v);
        max = MAX(max, v);
    }
    free(arg);
    struct threadResult * const result = (struct threadResult *) malloc(sizeof(*result));
    result-&gt;min = min;
    result-&gt;max = max;
    return result;
}

int main(int argc, const char * argv[])
{
    size_t const count = 1000000;
    uint32_t inputValues[count];

    // 使用随机数字填充 inputValues
    for (size_t i = 0; i &lt; count; ++i) {
        inputValues[i] = arc4random();
    }

    // 开始4个寻找最小值和最大值的线程
    size_t const threadCount = 4;
    pthread_t tid[threadCount];
    for (size_t i = 0; i &lt; threadCount; ++i) {
        struct threadInfo * const info = (struct threadInfo *) malloc(sizeof(*info));
        size_t offset = (count / threadCount) * i;
        info-&gt;inputValues = inputValues + offset;
        info-&gt;count = MIN(count - offset, count / threadCount);
        int err = pthread_create(tid + i, NULL, &amp;findMinAndMax, info);
        NSCAssert(err == 0, @&quot;pthread_create() failed: %d&quot;, err);
    }
    // 等待线程退出
    struct threadResult * results[threadCount];
    for (size_t i = 0; i &lt; threadCount; ++i) {
        int err = pthread_join(tid[i], (void **) &amp;(results[i]));
        NSCAssert(err == 0, @&quot;pthread_join() failed: %d&quot;, err);
    }
    // 寻找 min 和 max
    uint32_t min = UINT32_MAX;
    uint32_t max = 0;
    for (size_t i = 0; i &lt; threadCount; ++i) {
        min = MIN(min, results[i]-&gt;min);
        max = MAX(max, results[i]-&gt;max);
        free(results[i]);
        results[i] = NULL;
    }

    NSLog(@&quot;min = %u&quot;, min);
    NSLog(@&quot;max = %u&quot;, max);
    return 0;
}
</code></pre>

<p><code>NSThread</code> 是 Objective-C 对 pthread 的一个封装。通过封装，在 Cocoa 环境中，可以让代码看起来更加亲切。例如，开发者可以利用 NSThread 的一个子类来定义一个线程，在这个子类的中封装需要在后台线程运行的代码。针对上面的那个例子，我们可以定义一个这样的 <code>NSThread</code> 子类：</p>

<pre><code>@interface FindMinMaxThread : NSThread
@property (nonatomic) NSUInteger min;
@property (nonatomic) NSUInteger max;
- (instancetype)initWithNumbers:(NSArray *)numbers;
@end

@implementation FindMinMaxThread {
    NSArray *_numbers;
}

- (instancetype)initWithNumbers:(NSArray *)numbers
{
    self = [super init];
    if (self) {
        _numbers = numbers;
    }
    return self;
}

- (void)main
{
    NSUInteger min;
    NSUInteger max;
    // 进行相关数据的处理
    self.min = min;
    self.max = max;
}
@end
</code></pre>

<p>要想启动一个新的线程，需要创建一个线程对象，然后调用它的 <code>start</code> 方法：</p>

<pre><code>NSMutableSet *threads = [NSMutableSet set];
NSUInteger numberCount = self.numbers.count;
NSUInteger threadCount = 4;
for (NSUInteger i = 0; i &lt; threadCount; i++) {
    NSUInteger offset = (count / threadCount) * i;
    NSUInteger count = MIN(numberCount - offset, numberCount / threadCount);
    NSRange range = NSMakeRange(offset, count);
    NSArray *subset = [self.numbers subarrayWithRange:range];
    FindMinMaxThread *thread = [[FindMinMaxThread alloc] initWithNumbers:subset];
    [threads addObject:thread];
    [thread start];
}
</code></pre>

<p>现在，我们可以通过检测到线程的 <code>isFinished</code> 属性来检测新生成的线程是否已经结束，并获取结果。我们将这个练习留给感兴趣的读者，这主要是因为不论使用 <code>pthread</code> 还是 <code>NSThread</code> 来直接对线程操作，都是相对糟糕的编程体验，这种方式并不适合我们以写出良好代码为目标的编码精神。</p>

<p>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长。这在大型工程中是一个常见问题。例如，在 8 核 CPU 中，你创建了 8 个线程来完全发挥 CPU 性能。然而在这些线程中你的代码所调用的框架代码也做了同样事情（因为它并不知道你已经创建的这些线程），这样会很快产生成成百上千的线程。代码的每个部分自身都没有问题，然而最后却还是导致了问题。使用线程并不是没有代价的，每个线程都会消耗一些内存和内核资源。</p>

<p>接下来，我们将介绍两个基于队列的并发编程 API ：GCD 和 operation queue 。它们通过集中管理一个被大家协同使用的<a href="http://en.wikipedia.org/wiki/Thread_pool_pattern">线程池</a>，来解决上面遇到的问题。</p>

<h3 id="toc_2">Grand Central Dispatch</h3>

<p>为了让开发者更加容易的使用设备上的多核CPU，苹果在 OS X 10.6 和 iOS 4 中引入了 Grand Central Dispatch（GCD）。在下一篇关于<a href="http://objccn.io/issue-2-3/">底层并发 API</a> 的文章中，我们将更深入地介绍 GCD。</p>

<p>通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个<a href="http://en.wikipedia.org/wiki/Thread_pool_pattern">线程池</a>。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。</p>

<p>GCD 带来的另一个重要改变是，作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p>

<p>GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）。<br/>
另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</p>

<p><img src="http://img.objccn.io/issue-2/gcd-queues.png" alt="GCD queues"/></p>

<p>使用不同优先级的若干个队列乍听起来非常直接，不过，我们强烈建议，在绝大多数情况下使用默认的优先级队列就可以了。如果执行的任务需要访问一些共享的资源，那么在不同优先级的队列中调度这些任务很快就会造成不可预期的行为。这样可能会引起程序的完全挂起，因为低优先级的任务阻塞了高优先级任务，使它不能被执行。更多相关内容，在本文的<a href="#Priority-Inversion">优先级反转</a>部分中会有介绍。</p>

<p>虽然 GCD 是一个低层级的 C API ，但是它使用起来非常的直接。不过这也容易使开发者忘记并发编程中的许多注意事项和陷阱。读者可以阅读本文后面的<a href="#challenges">并发编程中面临的挑战</a>，这样可以注意到一些潜在的问题。本期的另外一篇优秀文章：<a href="http://objccn.io/issue-2-3/">底层并发 API</a> 中，包含了很多深入的解释和一些有价值的提示。</p>

<h3 id="toc_3">Operation Queues</h3>

<p>操作队列（operation queue）是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能，这些功能对于 app 的开发者来说通常是最好最安全的选择。</p>

<p><code>NSOperationQueue</code> 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 <code>NSOperation</code> 的子类来表述。</p>

<p>你可以通过重写 <code>main</code> 或者 <code>start</code> 方法 来定义自己的 <code>operations</code> 。前一种方法非常简单，开发者不需要管理一些状态属性（例如 <code>isExecuting</code> 和 <code>isFinished</code>），当 <code>main</code> 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 <code>start</code> 来说要少一些。</p>

<pre><code>@implementation YourOperation
    - (void)main
    {
        // 进行处理 ...
    }
@end
</code></pre>

<p>如果你希望拥有更多的控制权，以及在一个操作中可以执行异步任务，那么就重写 <code>start</code> 方法：</p>

<pre><code>@implementation YourOperation
    - (void)start
    {
        self.isExecuting = YES;
        self.isFinished = NO;
        // 开始处理，在结束时应该调用 finished ...
    }

    - (void)finished
    {
        self.isExecuting = NO;
        self.isFinished = YES;
    }
@end
</code></pre>

<p>注意：这种情况下，你必须手动管理操作的状态。 为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 setter 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。</p>

<p>为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 <code>isCancelled</code> 属性：</p>

<pre><code>- (void)main
{
    while (notDone &amp;&amp; !self.isCancelled) {
        // 进行处理
    }
}
</code></pre>

<p>当你定义好 operation 类之后，就可以很容易的将一个 operation 添加到队列中：</p>

<pre><code>NSOperationQueue *queue = [[NSOperationQueue alloc] init];
YourOperation *operation = [[YourOperation alloc] init];
[queue  addOperation:operation];
</code></pre>

<p>另外，你也可以将 block 添加到操作队列中。这有时候会非常的方便，比如你希望在主队列中调度一个一次性任务：</p>

<pre><code>[[NSOperationQueue mainQueue] addOperationWithBlock:^{
    // 代码...
}];
</code></pre>

<p>虽然通过这种的方式在队列中添加操作会非常方便，但是定义你自己的 NSOperation 子类会在调试时很有帮助。如果你重写 operation 的<code>description</code> 方法，就可以很容易的标示出在某个队列中当前被调度的所有操作 。</p>

<p>除了提供基本的调度操作或 block 外，操作队列还提供了在 GCD 中不太容易处理好的特性的功能。例如，你可以通过 <code>maxConcurrentOperationCount</code> 属性来控制一个特定队列中可以有多少个操作参与并发执行。将其设置为 1 的话，你将得到一个串行队列，这在以隔离为目的的时候会很有用。</p>

<p>另外还有一个方便的功能就是根据队列中 <code>operation</code> 的优先级对其进行排序，这不同于 GCD 的队列优先级，它只影响当前队列中所有被调度的 operation 的执行先后。如果你需要进一步在除了 5 个标准的优先级以外对 operation 的执行顺序进行控制的话，还可以在 operation 之间指定依赖关系，如下：</p>

<pre><code>[intermediateOperation addDependency:operation1];
[intermediateOperation addDependency:operation2];
[finishedOperation addDependency:intermediateOperation];
</code></pre>

<p>这些简单的代码可以确保 <code>operation1</code> 和 <code>operation2</code> 在 <code>intermediateOperation</code> 之前执行，当然，也会在 <code>finishOperation</code> 之前被执行。对于需要明确的执行顺序时，操作依赖是非常强大的一个机制。它可以让你创建一些操作组，并确保这些操作组在依赖它们的操作被执行之前执行，或者在并发队列中以串行的方式执行操作。</p>

<p>从本质上来看，操作队列的性能比 GCD 要低那么一点，不过，大多数情况下这点负面影响可以忽略不计，操作队列是并发编程的首选工具。</p>

<h3 id="toc_4">Run Loops</h3>

<p>实际上，Run loop并不像 GCD 或者操作队列那样是一种并发机制，因为它并不能并行执行任务。不过在主 dispatch/operation 队列中， run loop 将直接配合任务的执行，它提供了一种异步执行代码的机制。</p>

<p>Run loop 比起操作队列或者 GCD 来说容易使用得多，因为通过 run loop ，你不必处理并发中的复杂情况，就能异步地执行任务。</p>

<p>一个 run loop 总是绑定到某个特定的线程中。main run loop 是与主线程相关的，在每一个 Cocoa 和 CocoaTouch 程序中，这个 main run loop 都扮演了一个核心角色，它负责处理 UI 事件、计时器，以及其它内核相关事件。无论你什么时候设置计时器、使用 <code>NSURLConnection</code> 或者调用 <code>performSelector:withObject:afterDelay:</code>，其实背后都是 run loop 在处理这些异步任务。</p>

<p>无论何时你使用 run loop 来执行一个方法的时候，都需要记住一点：run loop 可以运行在不同的模式中，每种模式都定义了一组事件，供 run loop 做出响应。这在对应 main run loop 中暂时性的将某个任务优先执行这种任务上是一种聪明的做法。</p>

<p>关于这点，在 iOS 中非常典型的一个示例就是滚动。在进行滚动时，run loop 并不是运行在默认模式中的，因此， run loop 此时并不会响应比如滚动前设置的计时器。一旦滚动停止了，run loop 会回到默认模式，并执行添加到队列中的相关事件。如果在滚动时，希望计时器能被触发，需要将其设为 <code>NSRunLoopCommonModes</code> 的模式，并添加到 run loop 中。</p>

<p>主线程一般来说都已经配置好了 main run loop。然而其他线程默认情况下都没有设置 run loop。你也可以自行为其他线程设置 run loop ，但是一般来说我们很少需要这么做。大多数时间使用 main run loop 会容易得多。如果你需要处理一些很重的工作，但是又不想在主线程里做，你仍然可以在你的代码在 main run loop 中被调用后将工作分配给其他队列。Chris 在他关于<a href="http://objccn.io/issue-2-2/">常见的后台实践</a>的文章里阐述了一些关于这种模式的很好的例子。</p>

<p>如果你真需要在别的线程中添加一个 run loop ，那么不要忘记在 run loop 中至少添加一个 input source 。如果 run loop 中没有设置好的 input source，那么每次运行这个 run loop ，它都会立即退出。</p>

<p><a name="challenges" id="challenges"> </a></p>

<h2 id="toc_5">并发编程中面临的挑战</h2>

<p>使用并发编程会带来许多陷阱。只要一旦你做的事情超过了最基本的情况，对于并发执行的多任务之间的相互影响的不同状态的监视就会变得异常困难。 问题往往发生在一些不确定性（不可预见性）的地方，这使得在调试相关并发代码时更加困难。</p>

<p>关于并发编程的不可预见性有一个非常有名的例子：在1995年， NASA (美国宇航局)发送了开拓者号火星探测器，但是当探测器成功着陆在我们红色的邻居星球后不久，任务<a href="http://research.microsoft.com/en-us/um/people/mbj/Mars_Pathfinder/Mars_Pathfinder.html">嘎然而止</a>，火星探测器莫名其妙的不停重启，在计算机领域内，遇到的这种现象被定为为<a href="#priority_inversion">优先级反转</a>，也就是说低优先级的线程一直阻塞着高优先级的线程。稍后我们会看到关于这个问题的更多细节。在这里我们想说明的是，即使拥有丰富的资源和大量优秀工程师的智慧，并发也还是会在不少情况下反咬你你一口。</p>

<p><a name="shared_resources" id="shared_resources"> </a></p>

<h3 id="toc_6">资源共享</h3>

<p>并发编程中许多问题的根源就是在多线程中访问共享资源。资源可以是一个属性、一个对象，通用的内存、网络设备或者一个文件等等。在多线程中任何一个共享的资源都可能是一个潜在的冲突点，你必须精心设计以防止这种冲突的发生。</p>

<p>为了演示这类问题，我们举一个关于资源的简单示例：比如仅仅用一个整型值来做计数器。在程序运行过程中，我们有两个并行线程 A 和 B，这两个线程都尝试着同时增加计数器的值。问题来了，你通过 C 语言或 Objective-C 写的代码大多数情况下对于 CPU 来说不会仅仅是一条机器指令。要想增加计数器的值，当前的必须被从内存中读出，然后增加计数器的值，最后还需要将这个增加后的值写回内存中。</p>

<p>我们可以试着想一下，如果两个线程同时做上面涉及到的操作，会发生怎样的偶然。例如，线程 A 和 B 都从内存中读取出了计数器的值，假设为 <code>17</code> ，然后线程A将计数器的值加1，并将结果 <code>18</code> 写回到内存中。同时，线程B也将计数器的值加 1 ，并将结果 <code>18</code> 写回到内存中。实际上，此时计数器的值已经被破坏掉了，因为计数器的值 <code>17</code> 被加 1 了两次，而它的值却是 <code>18</code>。</p>

<p><img src="http://img.objccn.io/issue-2/race-condition.png" alt="竞态条件"/></p>

<p>这个问题被叫做<a href="http://en.wikipedia.org/wiki/Race_conditions#Software">竞态条件</a>，在多线程里面访问一个共享的资源，如果没有一种机制来确保在线程 A 结束访问一个共享资源之前，线程 B 就不会开始访问该共享资源的话，资源竞争的问题就总是会发生。如果你所写入内存的并不是一个简单的整数，而是一个更复杂的数据结构，可能会发生这样的现象：当第一个线程正在写入这个数据结构时，第二个线程却尝试读取这个数据结构，那么获取到的数据可能是新旧参半或者没有初始化。为了防止出现这样的问题，多线程需要一种互斥的机制来访问共享资源。</p>

<p>在实际的开发中，情况甚至要比上面介绍的更加复杂，因为现代 CPU 为了优化目的，往往会改变向内存读写数据的顺序（<a href="http://en.wikipedia.org/wiki/Out-of-order_execution">乱序执行</a>）。</p>

<h3 id="toc_7">互斥锁</h3>

<p><a href="http://en.wikipedia.org/wiki/Mutex">互斥</a>访问的意思就是同一时刻，只允许一个线程访问某个特定资源。为了保证这一点，每个希望访问共享资源的线程，首先需要获得一个共享资源的<a href="http://en.wikipedia.org/wiki/Lock_%28computer_science%29">互斥锁</a>，一旦某个线程对资源完成了操作，就释放掉这个互斥锁，这样别的线程就有机会访问该共享资源了。</p>

<p><img src="http://img.objccn.io/issue-2/locking.png" alt="互斥锁"/></p>

<p>除了确保互斥访问，还需要解决代码无序执行所带来的问题。如果不能确保 CPU 访问内存的顺序跟编程时的代码指令一样，那么仅仅依靠互斥访问是不够的。为了解决由 CPU 的优化策略引起的副作用，还需要引入<a href="http://en.wikipedia.org/wiki/Memory_barrier">内存屏障</a>。通过设置内存屏障，来确保没有无序执行的指令能跨过屏障而执行。</p>

<p>当然，互斥锁自身的实现是需要没有竞争条件的。这实际上是非常重要的一个保证，并且需要在现代 CPU 上使用特殊的指令。更多关于原子操作（atomic operation）的信息，请阅读 Daniel 写的文章：<a href="http://objccn.io/issue-2-3/">底层并发技术</a>。</p>

<p>从语言层面来说，在 Objective-C 中将属性以 atomic 的形式来声明，就能支持互斥锁了。事实上在默认情况下，属性就是 atomic 的。将一个属性声明为 atomic 表示每次访问该属性都会进行隐式的加锁和解锁操作。虽然最把稳的做法就是将所有的属性都声明为 atomic，但是加解锁这也会付出一定的代价。</p>

<p>在资源上的加锁会引发一定的性能代价。获取锁和释放锁的操作本身也需要没有竞态条件，这在多核系统中是很重要的。另外，在获取锁的时候，线程有时候需要等待，因为可能其它的线程已经获取过资源的锁了。这种情况下，线程会进入休眠状态。当其它线程释放掉相关资源的锁时，休眠的线程会得到通知。所有这些相关操作都是非常昂贵且复杂的。</p>

<p>锁也有不同的类型。当没有竞争时，有些锁在没有锁竞争的情况下性能很好，但是在有锁的竞争情况下，性能就会大打折扣。另外一些锁则在基本层面上就比较耗费资源，但是在竞争情况下，性能的恶化会没那么厉害。(<a href="http://en.wikipedia.org/wiki/Lock_%28computer_science%29#Granularity">锁的竞争</a>是这样产生的：当一个或者多个线程尝试获取一个已经被别的线程获取过了的锁)。</p>

<p>在这里有一个东西需要进行权衡：获取和释放锁所是要带来开销的，因此你需要确保你不会频繁地进入和退出<a href="http://en.wikipedia.org/wiki/Critical_section">临界区段</a>（比如获取和释放锁）。同时，如果你获取锁之后要执行一大段代码，这将带来锁竞争的风险：其它线程可能必须等待获取资源锁而无法工作。这并不是一项容易解决的任务。</p>

<p>我们经常能看到本来计划并行运行的代码，但实际上由于共享资源中配置了相关的锁，所以同一时间只有一个线程是处于激活状态的。对于你的代码会如何在多核上运行的预测往往十分重要，你可以使用 Instrument 的 <a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/AnalysingCPUUsageinYourOSXApp/AnalysingCPUUsageinYourOSXApp.html">CPU strategy view</a> 来检查是否有效的利用了 CPU 的可用核数，进而得出更好的想法，以此来优化代码。</p>

<p><a name="dead_locks" id="dead_locks"> </a></p>

<h3 id="toc_8">死锁</h3>

<p>互斥锁解决了竞态条件的问题，但很不幸同时这也引入了一些<a href="http://en.wikipedia.org/wiki/Lock_%28computer_science%29#The_problems_with_locks">其他问题</a>，其中一个就是<a href="http://en.wikipedia.org/wiki/Deadlock">死锁</a>。当多个线程在相互等待着对方的结束时，就会发生死锁，这时程序可能会被卡住。</p>

<p><img src="http://img.objccn.io/issue-2/dead-lock.png" alt="死锁"/></p>

<p>看看下面的代码，它交换两个变量的值：</p>

<pre><code>void swap(A, B)
{
    lock(lockA);
    lock(lockB);
    int a = A;
    int b = B;
    A = b;
    B = a;
    unlock(lockB);
    unlock(lockA);
}
</code></pre>

<p>大多数时候，这能够正常运行。但是当两个线程使用相反的值来同时调用上面这个方法时：</p>

<pre><code>swap(X, Y); // 线程 1
swap(Y, X); // 线程 2
</code></pre>

<p>此时程序可能会由于死锁而被终止。线程 1 获得了 X 的一个锁，线程 2 获得了 Y 的一个锁。 接着它们会同时等待另外一把锁，但是永远都不会获得。</p>

<p>再说一次，你在线程之间共享的资源越多，你使用的锁也就越多，同时程序被死锁的概率也会变大。这也是为什么我们需要尽量减少线程间资源共享，并确保共享的资源尽量简单的原因之一。建议阅读一下<a href="http://objccn.io/issue-2-3/">底层并发编程 API</a> 中的<a href="http://objccn.io/issue-2-3/#async">全部使用异步分发</a>一节。</p>

<h3 id="toc_9">资源饥饿（Starvation）</h3>

<p>当你认为已经足够了解并发编程面临的问题时，又出现了一个新的问题。锁定的共享资源会引起<a href="http://en.wikipedia.org/wiki/Readers-writers_problem">读写问题</a>。大多数情况下，限制资源一次只能有一个线程进行读取访问其实是非常浪费的。因此，在资源上没有写入锁的时候，持有一个读取锁是被允许的。这种情况下，如果一个持有读取锁的线程在等待获取写入锁的时候，其他希望读取资源的线程则因为无法获得这个读取锁而导致<a href="http://en.wikipedia.org/wiki/Resource_starvation">资源饥饿</a>的发生。</p>

<p>为了解决这个问题，我们需要使用一个比简单的读/写锁更聪明的方法，例如给定一个 <a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">writer preference</a>，或者使用 <a href="http://en.wikipedia.org/wiki/Read-copy-update">read-copy-update</a> 算法。Daniel 在<a href="http://objccn.io/issue-2-3/#multiple-readers-single-writer">底层并发编程 API </a>中有介绍了如何用 GCD 实现一个多读取单写入的模式，这样就不会被写入资源饥饿的问题困扰了。</p>

<p><a name="priority_inversion" id="priority_inversion"> </a></p>

<h2 id="toc_10">优先级反转</h2>

<p>本节开头介绍了美国宇航局发射的开拓者号火星探测器在火星上遇到的并发问题。现在我们就来看看为什么开拓者号几近失败，以及为什么有时候我们的程序也会遇到相同的问题，该死的<a href="http://en.wikipedia.org/wiki/Priority_inversion">优先级反转</a>。</p>

<p>优先级反转是指程序在运行时低优先级的任务阻塞了高优先级的任务，有效的反转了任务的优先级。由于 GCD 提供了拥有不同优先级的后台队列，甚至包括一个 I/O 队列，所以我们最好了解一下优先级反转的可能性。</p>

<p>高优先级和低优先级的任务之间共享资源时，就可能发生优先级反转。当低优先级的任务获得了共享资源的锁时，该任务应该迅速完成，并释放掉锁，这样高优先级的任务就可以在没有明显延时的情况下继续执行。然而高优先级任务会在低优先级的任务持有锁的期间被阻塞。如果这时候有一个中优先级的任务(该任务不需要那个共享资源)，那么它就有可能会抢占低优先级任务而被执行，因为此时高优先级任务是被阻塞的，所以中优先级任务是目前所有可运行任务中优先级最高的。此时，中优先级任务就会阻塞着低优先级任务，导致低优先级任务不能释放掉锁，这也就会引起高优先级任务一直在等待锁的释放。</p>

<p><img src="http://img.objccn.io/issue-2/priority-inversion.png" alt="优先级反转"/></p>

<p>在你的实际代码中，可能不会像发生在火星的事情那样戏剧性地不停重启。遇到优先级反转时，一般没那么严重。</p>

<p>解决这个问题的方法，通常就是不要使用不同的优先级。通常最后你都会以让高优先级的代码等待低优先级的代码来解决问题。当你使用 GCD 时，总是使用默认的优先级队列（直接使用，或者作为目标队列）。如果你使用不同的优先级，很可能实际情况会让事情变得更糟糕。</p>

<p>从中得到的教训是，使用不同优先级的多个队列听起来虽然不错，但毕竟是纸上谈兵。它将让本来就复杂的并行编程变得更加复杂和不可预见。如果你在编程中，遇到高优先级的任务突然没理由地卡住了，可能你会想起本文，以及那个美国宇航局的工程师也遇到过的被称为优先级反转的问题。</p>

<h2 id="toc_11">总结</h2>

<p>我们希望通过本文你能够了解到并发编程带来的复杂性和相关问题。并发编程中，无论是看起来多么简单的 API ，它们所能产生的问题会变得非常的难以观测，而且要想调试这类问题往往也都是非常困难的。</p>

<p>但另一方面，并发实际上是一个非常棒的工具。它充分利用了现代多核 CPU 的强大计算能力。在开发中，关键的一点就是尽量让并发模型保持简单，这样可以限制所需要的锁的数量。</p>

<p>我们建议采纳的安全模式是这样的：从主线程中提取出要使用到的数据，并利用一个操作队列在后台处理相关的数据，最后回到主队列中来发送你在后台队列中得到的结果。使用这种方式，你不需要自己做任何锁操作，这也就大大减少了犯错误的几率。</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html">Concurrent Programming: APIs and Challenges</a></p>

<p>译文 <a href="http://beyondvincent.com/blog/2013/07/16/104/">OC中并发编程的相关API和面临的挑战(1) - 破船之家</a></p>

<p>精细校对 <a href="http://im.onevcat.com">@onevcat</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见的后台实践]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472530.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472530.html</id>
    <content type="html"><![CDATA[
<p>本文主要探讨一些常用后台任务的最佳实践。我们将会看看如何并发地使用 Core Data ，如何并行绘制 UI ，如何做异步网络请求等。最后我们将研究如何异步处理大型文件，以保持较低的内存占用。因为在异步编程中非常容易犯错误，所以，本文中的例子都将使用很简单的方式。因为使用简单的结构可以帮助我们看透代码，抓住问题本质。如果你最后把代码写成了复杂的嵌套回调的话，那么你很可能应该重新考虑自己当初的设计选择了。</p>

<h2 id="toc_0">操作队列 (Operation Queues) 还是 GCD ?</h2>

<p>目前在 iOS 和 OS X 中有两套先进的同步 API 可供我们使用：<a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperationQueue_class/Reference/Reference.html">操作队列</a>和 <a href="https://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">GCD</a> 。其中 GCD 是基于 C 的底层的 API ，而操作队列则是 GCD 实现的 Objective-C API。关于我们可以使用的并行 API 的更加全面的总览，可以参见 <a href="http://www.objccn.io/issue-2-1/">并发编程：API 及挑战</a>。</p>

<p>操作队列提供了在 GCD 中不那么容易复制的有用特性。其中最重要的一个就是可以取消在任务处理队列中的任务，在稍后的例子中我们会看到这个。而且操作队列在管理操作间的依赖关系方面也容易一些。另一面，GCD 给予你更多的控制权力以及操作队列中所不能使用的底层函数。详细介绍可以参考<a href="http://www.objccn.io/issue-2-3/">底层并发 API</a> 这篇文章。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/10373331/nsoperation-vs-grand-central-dispatch">StackOverflow: NSOperation vs. Grand Central Dispatch</a></li>
<li><a href="http://eschatologist.net/blog/?p=232">Blog: When to use NSOperation vs. GCD</a></li>
</ul>

<p><strong>March 2015 更新</strong>: 这篇文章是基于已经过时了的 Concurrency with Core Data 来编写的。</p>

<h3 id="toc_1">后台的 Core Data</h3>

<p>在着手 Core Data 的并行处理之前，最好先打一些基础。我们强烈建议通读苹果的官方文档 <a href="https://developer.apple.com/library/mac/#documentation/cocoa/conceptual/CoreData/Articles/cdConcurrency.html">Concurrency with Core Data</a> 。这个文档中罗列了基本规则，比如绝对不要在线程间传递 managed objects等。这并不单是说你绝不应该在另一个线程中去更改某个其他线程的 managed object ，甚至是读取其中的属性都是不能做的。要想传递这样的对象，正确做法是通过传递它的 object ID ，然后从其他对应线程所绑定的 context 中去获取这个对象。</p>

<p>其实只要你遵循那些规则，并使用这篇文章里所描述的方法的话，处理 Core Data 的并行编程还是比较容易的。</p>

<p>Xcode 所提供的 Core Data 标准模版中，所设立的是运行在主线程中的一个存储调度 (persistent store coordinator)和一个托管对象上下文 (managed object context) 的方式。在很多情况下，这种模式可以运行良好。创建新的对象和修改已存在的对象开销都非常小，也都能在主线程中没有困难地完成。然后，如果你想要做大量的处理，那么把它放到一个后台上下文来做会比较好。一个典型的应用场景是将大量数据导入到 Core Data 中。</p>

<p>我们的方式非常简单，并且可以被很好地描述：</p>

<ol>
<li>我们为导入工作单独创建一个操作</li>
<li>我们创建一个 managed object context ，它和主 managed object context 使用同样的 persistent store coordinator</li>
<li>一旦导入 context 保存了，我们就通知 主 managed object context 并且合并这些改变</li>
</ol>

<p>在<a href="https://github.com/objcio/issue-2-background-core-data">示例app</a>中，我们要导入一大组柏林的交通数据。在导入的过程中，我们展示一个进度条，如果耗时太长，我们希望可以取消当前的导入操作。同时，我们显示一个随着数据加入可以自动更新的 table view 来展示目前可用的数据。示例用到的数据是采用的 Creative Commons license 公开的，你可以<a href="http://stg.daten.berlin.de/datensaetze/vbb-fahrplan-2013">在此下载</a>它们。这些数据遵守一个叫做 <a href="https://developers.google.com/transit/gtfs/reference">General Transit Feed</a> 格式的交通数据公开标准。</p>

<p>我们创建一个 <code>NSOperation</code> 的子类，将其叫做 <code>ImportOperation</code>，我们通过重写 <code>main</code> 方法，用来处理所有的导入工作。这里我们使用 <code>NSPrivateQueueConcurrencyType</code> 来创建一个独立并拥有自己的私有 dispatch queue 的 managed object context，这个 context 需要管理自己的队列。在队列中的所有操作必须使用 <code>performBlock</code> 或者 <code>performBlockAndWait</code> 来进行触发。这点对于保证这些操作能在正确的线程上执行是相当重要的。</p>

<pre><code>NSManagedObjectContext* context = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];
context.persistentStoreCoordinator = self.persistentStoreCoordinator;
context.undoManager = nil;
[self.context performBlockAndWait:^
{
    [self import];
}];
</code></pre>

<p>在这里我们重用了已经存在的 persistent store coordinator 。一般来说，初始化 managed object contexts 要么使用 <code>NSPrivateQueueConcurrencyType</code>，要么使用 <code>NSMainQueueConcurrencyType</code>。第三种并发类型 <code>NSConfinementConcurrencyType</code> 是为老旧代码准备的，我们不建议再使用它了。</p>

<p>在导入前，我们枚举文件中的各行，并对可以解析的每一行创建 managed object ：</p>

<pre><code>[lines enumerateObjectsUsingBlock:
  ^(NSString* line, NSUInteger idx, BOOL* shouldStop)
  {
      NSArray* components = [line csvComponents];
      if(components.count &lt; 5) {
          NSLog(@&quot;couldn&#39;t parse: %@&quot;, components);
          return;
      }
      [Stop importCSVComponents:components intoContext:context];
  }];
</code></pre>

<p>在 view controller 中通过以下代码来开始操作：</p>

<pre><code>ImportOperation* operation = [[ImportOperation alloc]
     initWithStore:self.store fileName:fileName];
[self.operationQueue addOperation:operation];
</code></pre>

<p>至此为止，后台导入部分已经完成。接下来，我们要加入取消功能，这其实非常简单，只需要枚举的 block 中加一个判断就行了：</p>

<pre><code>if(self.isCancelled) {
    *shouldStop = YES;
    return;
}
</code></pre>

<p>最后为了支持进度条，我们在 operation 中创建一个叫做 <code>progressCallback</code> 的属性。需要注意的是，更新进度条必须在主线程中完成，否则会导致 UIKit 崩溃。</p>

<pre><code>operation.progressCallback = ^(float progress)
{
    [[NSOperationQueue mainQueue] addOperationWithBlock:^
    {
        self.progressIndicator.progress = progress;
    }];
};
</code></pre>

<p>我们在枚举中来调用这个进度条更新的 block 的操作：</p>

<pre><code>self.progressCallback(idx / (float) count);
</code></pre>

<p>然而，如果你执行示例代码的话，你会发现它运行逐渐变得很慢，取消操作也有迟滞。这是因为主操作队列中塞满了要更新进度条的 block 操作。一个简单的解决方法是降低更新的频度，比如只在每导入一百行时更新一次：</p>

<pre><code>NSInteger progressGranularity = 100;

if (idx % progressGranularity == 0) {
    self.progressCallback(idx / (float) count);
}
</code></pre>

<h3 id="toc_2">更新 Main Context</h3>

<p>在 app 中的 table view 是由一个在主线程上获取了结果的 controller 所驱动的。在导入数据的过程中和导入数据完成后，我们要在 table view 中展示我们的结果。</p>

<p>在让一切运转起来之前之前，还有一件事情要做。现在在后台 context 中导入的数据还不能传送到主 context 中，除非我们显式地让它这么去做。我们在 <code>Store</code> 类的设置 Core Data stack 的 <code>init</code> 方法中加入下面的代码：</p>

<pre><code>[[NSNotificationCenter defaultCenter]
    addObserverForName:NSManagedObjectContextDidSaveNotification
                object:nil
                 queue:nil
            usingBlock:^(NSNotification* note)
{
    NSManagedObjectContext *moc = self.mainManagedObjectContext;
    if (note.object != moc)
        [moc performBlock:^(){
            [moc mergeChangesFromContextDidSaveNotification:note];
        }];
    }];
}];
</code></pre>

<p>如果 block 在主队列中被作为参数传递的话，那么这个 block 也会在主队列中被执行。如果现在你运行程序的话，你会注意到 table view 会在完成导入数据后刷新数据，但是这个行为会阻塞用户大概几秒钟。</p>

<p>要修正这个问题，我们需要做一些无论如何都应该做的事情：批量保存。在导入较大的数据时，我们需要定期保存，逐渐导入，否则内存很可能就会被耗光，性能一般也会更坏。而且，定期保存也可以分散主线程在更新 table view 时的工作压力。</p>

<p>合理的保存的次数可以通过试错得到。保存太频繁的话，可能会在 I/O 操作上花太多时间；保存次数太少的话，应用会变得无响应。在经过一些尝试后，我们设定每 250 次导入就保存一次。改进后，导入过程变得很平滑，它可以适时更新 table view，也没有阻塞主 context 太久。</p>

<h3 id="toc_3">其他考虑</h3>

<p>在导入操作时，我们将整个文件都读入到一个字符串中，然后将其分割成行。这种处理方式对于相对小的文件来说没有问题，但是对于大文件，最好采用惰性读取 (lazily read) 的方式逐行读入。本文最后的示例将使用输入流的方式来实现这个特性，在 <a href="http://stackoverflow.com/questions/3707427/how-to-read-data-from-nsfilehandle-line-by-line/3711079#3711079">StackOverflow</a> 上 Dave DeLong 也提供了一段非常好的示例代码来说明这个问题。</p>

<p>在 app 第一次运行时，除开将大量数据导入 Core Data 这一选择以外，你也可以在你的 app bundle 中直接放一个 sqlite 文件，或者从一个可以动态生成数据的服务器下载。如果使用这些方式的话，可以节省不少在设备上的处理时间。</p>

<p>最后，最近对于 child contexts 有很多争议。我们的建议是不要在后台操作中使用它。如果你以主 context 的 child 的方式创建了一个后台 context 的话，保存这个后台 context 将<a href="http://floriankugler.com/blog/2013/4/29/concurrent-core-data-stack-performance-shootout">阻塞主线程</a>。而要是将主 context 作为后台 context 的 child 的话，实际上和与创建两个传统的独立 contexts 来说是没有区别的。因为你仍然需要手动将后台的改变合并回主 context 中去。</p>

<p>设置一个 persistent store coordinator 和两个独立的 contexts 被证明了是在后台处理 Core Data 的好方法。除非你有足够好的理由，否则在处理时你应该坚持使用这种方式。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CoreData/Articles/cdImporting.html">Core Data Programming Guide: Efficiently importing data</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CoreData/Articles/cdConcurrency.html#//apple_ref/doc/uid/TP40003385-SW1j">Core Data Programming Guide: Concurrency with Core Data</a></li>
<li><a href="http://stackoverflow.com/questions/2138252/core-data-multi-thread-application/2138332#2138332">StackOverflow: Rules for working with Core Data</a></li>
<li><a href="https://developer.apple.com/videos/wwdc/2012/?id=214">WWDC 2012 Video: Core Data Best Practices</a></li>
<li><a href="http://pragprog.com/book/mzcd/core-data">Book: Core Data by Marcus Zarra</a></li>
</ul>

<h2 id="toc_4">后台 UI 代码</h2>

<p>首先要强调：UIKit 只能在主线程上运行。而那部分不与 UIKit 直接相关，却会消耗大量时间的 UI 代码可以被移动到后台去处理，以避免其将主线程阻塞太久。但是在你将你的 UI 代码移到后台队列之前，你应该好好地测量哪一部分才是你代码中的瓶颈。这非常重要，否则你所做的优化根本是南辕北辙。</p>

<p>如果你找到了你能够隔离出的昂贵操作的话，可以将其放到操作队列中去：</p>

<pre><code>__weak id weakSelf = self;
[self.operationQueue addOperationWithBlock:^{
    NSNumber* result = findLargestMersennePrime();
    [[NSOperationQueue mainQueue] addOperationWithBlock:^{
        MyClass* strongSelf = weakSelf;
        strongSelf.textLabel.text = [result stringValue];
    }];
}];
</code></pre>

<p>如你所见，这些代码其实一点也不直接明了。我们首先声明了一个 weak 引用来参照 self，否则会形成循环引用（ block 持有了 self，私有的 <code>operationQueue</code> retain 了 block，而 self 又 retain 了 <code>operationQueue</code> ）。为了避免在运行 block 时访问到已被释放的对象，在 block 中我们又需要将其转回 strong 引用。</p>

<blockquote>
<p><p><span class="secondary radius label">编者注</span> 这在 ARC 和 block 主导的编程范式中是解决 retain cycle 的一种常见也是最标准的方法。</p>
</blockquote>

<h3 id="toc_5">后台绘制</h3>

<p>如果你确定 <code>drawRect:</code> 是你的应用的性能瓶颈，那么你可以将这些绘制代码放到后台去做。但是在你这样做之前，检查下看看是不是有其他方法来解决，比如、考虑使用 core animation layers 或者预先渲染图片而不去做 Core Graphics 绘制。可以看看 Florian 对在真机上图像性能测量的<a href="http://floriankugler.com/blog/2013/5/24/layer-trees-vs-flat-drawing-graphics-performance-across-ios-device-generations">帖子</a>，或者可以看看来自 UIKit 工程师 Andy Matuschak 对个各种方式的权衡的<a href="https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design/comments/itdkfh">评论</a>。</p>

<p>如果你确实认为在后台执行绘制代码会是你的最好选择时再这么做。其实解决起来也很简单，把 <code>drawRect:</code> 中的代码放到一个后台操作中去做就可以了。然后将原本打算绘制的视图用一个 image view 来替换，等到操作执行完后再去更新。在绘制的方法中，使用 <code>UIGraphicsBeginImageContextWithOptions</code> 来取代 <code>UIGraphicsGetCurrentContext</code> ：</p>

<pre><code>UIGraphicsBeginImageContextWithOptions(size, NO, 0);
// drawing code here
UIImage *i = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
return i;
</code></pre>

<p>通过在第三个参数中传入 0 ，设备的主屏幕的 scale 将被自动传入，这将使图片在普通设备和 retina 屏幕上都有良好的表现。</p>

<p>如果你在 table view 或者是 collection view 的 cell 上做了自定义绘制的话，最好将它们放入 operation 的子类中去。你可以将它们添加到后台操作队列，也可以在用户将 cell 滚动出边界时的 <code>didEndDisplayingCell</code> 委托方法中进行取消。这些技巧都在 2012 年的WWDC <a href="https://developer.apple.com/videos/wwdc/2012/">Session 211 -- Building Concurrent User Interfaces on iOS</a>中有详细阐述。</p>

<p>除了在后台自己调度绘制代码，以也可以试试看使用 <code>CALayer</code> 的 <code>drawsAsynchronously</code> 属性。然而你需要精心衡量这样做的效果，因为有时候它能使绘制加速，有时候却适得其反。</p>

<h2 id="toc_6">异步网络请求处理</h2>

<p>你的所有网络请求都应该采取异步的方式完成。</p>

<p>然而，在 GCD 下，有时候你可能会看到这样的代码</p>

<pre><code>// 警告：不要使用这些代码。
dispatch_async(backgroundQueue, ^{
   NSData* contents = [NSData dataWithContentsOfURL:url]
   dispatch_async(dispatch_get_main_queue(), ^{
      // 处理取到的日期
   });
});
</code></pre>

<p>乍看起来没什么问题，但是这段代码却有致命缺陷。你没有办法去取消这个同步的网络请求。它将阻塞住线程直到它完成。如果请求一直没结果，那就只能干等到超时（比如 <code>dataWithContentsOfURL:</code> 的超时时间是 30 秒）。</p>

<p>如果队列是串行执行的话，它将一直被阻塞住。假如队列是并行执行的话，GCD 需要重开一个线程来补凑你阻塞住的线程。两种结果都不太妙，所以最好还是不要阻塞线程。</p>

<p>要解决上面的困境，我们可以使用 <code>NSURLConnection</code> 的异步方法，并且把所有操作转化为 operation 来执行。通过这种方法，我们可以从操作队列的强大功能和便利中获益良多：我们能轻易地控制并发操作的数量，添加依赖，以及取消操作。</p>

<p>然而，在这里还有一些事情值得注意： <code>NSURLConnection</code> 是通过 run loop 来发送事件的。因为时间发送不会花多少时间，因此最简单的是就只使用 main run loop 来做这个。然后，我们就可以用后台线程来处理输入的数据了。</p>

<p>另一种可能的方式是使用像 <a href="http://afnetworking.com">AFNetworking</a> 这样的框架：建立一个独立的线程，为建立的线程设置自己的 run loop，然后在其中调度 URL 连接。但是并不推荐你自己去实现这些事情。</p>

<p>要处理URL 连接，我们重写自定义的 operation 子类中的 <code>start</code> 方法：</p>

<pre><code>- (void)start
{
    NSURLRequest* request = [NSURLRequest requestWithURL:self.url];
    self.isExecuting = YES;
    self.isFinished = NO;
    [[NSOperationQueue mainQueue] addOperationWithBlock:^
    {
        self.connection = [NSURLConnectionconnectionWithRequest:request
                                                       delegate:self];
    }];
}
</code></pre>

<p>由于重写的是 <code>start</code> 方法，所以我们需要自己要管理操作的 <code>isExecuting</code> 和 <code>isFinished</code> 状态。要取消一个操作，我们需要取消 connection ，并且设定合适的标记，这样操作队列才知道操作已经完成。</p>

<pre><code>- (void)cancel
{
    [super cancel];
    [self.connection cancel];
    self.isFinished = YES;
    self.isExecuting = NO;
}
</code></pre>

<p>当连接完成加载后，它向代理发送回调：</p>

<pre><code>- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    self.data = self.buffer;
    self.buffer = nil;
    self.isExecuting = NO;
    self.isFinished = YES;
}
</code></pre>

<p>就这么多了。完整的代码可以参见<a href="https://github.com/objcio/issue-2-background-networking">GitHub上的示例工程</a>。</p>

<p>总结来说，我们建议要么你花时间来把事情做对做好，要么就直接使用像 <a href="http://afnetworking.com/">AFNetworking</a> 这样的框架。其实 <a href="http://afnetworking.com/">AFNetworking</a> 还提供了不少好用的小工具，比如有个 <code>UIImageView</code> 的 category，来负责异步地从一个 URL 加载图片。在你的 table view 里使用的话，还能自动帮你处理取消加载操作，非常方便。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1">Concurrency Programming Guide</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html%23http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html%23//apple_ref/doc/uid/TP40004591-RH2-SW15">NSOperation Class Reference: Concurrent vs. Non-Concurrent Operations</a></li>
<li><a href="http://www.cocoaintheshell.com/2011/04/nsurlconnection-synchronous-asynchronous/">Blog: synchronous vs. asynchronous NSURLConnection</a></li>
<li><a href="https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m">GitHub: <code>SDWebImageDownloaderOperation.m</code></a></li>
<li><a href="http://www.cocoaintheshell.com/2011/05/progressive-images-download-imageio/">Blog: Progressive image download with ImageIO</a></li>
<li><a href="https://developer.apple.com/videos/wwdc/2012/">WWDC 2012 Session 211: Building Concurrent User Interfaces on iOS</a></li>
</ul>

<h2 id="toc_7">进阶：后台文件 I/O</h2>

<p>在之前我们的后台 Core Data 示例中，我们将一整个文件加载到了内存中。这种方式对于较小的文件没有问题，但是受限于 iOS 设备的内存容量，对于大文件来说的话就不那么友好了。要解决这个问题，我们将构建一个类，它负责一行一行读取文件而不是一次将整个文件读入内存，另外要在后台队列处理文件，以保持应用相应用户的操作。</p>

<p>为了达到这个目的，我们使用能让我们异步处理文件的 <code>NSInputStream</code> 。根据<a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html">官方文档</a>的描述：</p>

<blockquote>
<p>如果你总是需要从头到尾来读/写文件的话，streams 提供了一个简单的接口来异步完成这个操作</p>
</blockquote>

<p>不管你是否使用 streams，大体上逐行读取一个文件的模式是这样的：</p>

<ol>
<li>建立一个中间缓冲层以提供，当没有找到换行符号的时候可以向其中添加数据</li>
<li>从 stream 中读取一块数据</li>
<li>对于这块数据中发现的每一个换行符，取中间缓冲层，向其中添加数据，直到（并包括）这个换行符，并将其输出</li>
<li>将剩余的字节添加到中间缓冲层去</li>
<li>回到 2，直到 stream 关闭</li>
</ol>

<p>为了将其运用到实践中，我们又建立了一个<a href="https://github.com/objcio/issue-2-background-file-io">示例应用</a>，里面有一个 <code>Reader</code> 类完成了这件事情，它的接口十分简单</p>

<pre><code>@interface Reader : NSObject
- (void)enumerateLines:(void (^)(NSString*))block
            completion:(void (^)())completion;
- (id)initWithFileAtPath:(NSString*)path;
@end
</code></pre>

<p>注意，这个类不是 NSOperation 的子类。与 URL connections 类似，输入的 streams 通过 run loop 来传递它的事件。这里，我们仍然采用 main run loop 来分发事件，然后将数据处理过程派发至后台操作线程里去处理。</p>

<pre><code>- (void)enumerateLines:(void (^)(NSString*))block
            completion:(void (^)())completion
{
    if (self.queue == nil) {
        self.queue = [[NSOperationQueue alloc] init];
        self.queue.maxConcurrentOperationCount = 1;
    }
    self.callback = block;
    self.completion = completion;
    self.inputStream = [NSInputStream inputStreamWithURL:self.fileURL];
    self.inputStream.delegate = self;
    [self.inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop]
                                forMode:NSDefaultRunLoopMode];
    [self.inputStream open];
}
</code></pre>

<p>现在，input stream 将（在主线程）向我们发送代理消息，然后我们可以在操作队列中加入一个 block 操作来执行处理了：</p>

<pre><code>- (void)stream:(NSStream*)stream handleEvent:(NSStreamEvent)eventCode
{
    switch (eventCode) {
        ...
        case NSStreamEventHasBytesAvailable: {
            NSMutableData *buffer = [NSMutableData dataWithLength:4 * 1024];
            NSUInteger length = [self.inputStream read:[buffer mutableBytes]
                                             maxLength:[buffer length]];
            if (0 &lt; length) {
                [buffer setLength:length];
                __weak id weakSelf = self;
                [self.queue addOperationWithBlock:^{
                    [weakSelf processDataChunk:buffer];
                }];
            }
            break;
        }
        ...
    }
}
</code></pre>

<p>处理数据块的过程是先查看当前已缓冲的数据，并将新加入的数据附加上去。接下来它将按照换行符分解成小的部分，并处理每一行。</p>

<p>数据处理过程中会不断的从buffer中获取已读入的数据。然后把这些新读入的数据按行分开并存储。剩余的数据被再次存储到缓冲区中：</p>

<pre><code>- (void)processDataChunk:(NSMutableData *)buffer;
{
    if (self.remainder != nil) {
        [self.remainder appendData:buffer];
    } else {
        self.remainder = buffer;
    }
    [self.remainder obj_enumerateComponentsSeparatedBy:self.delimiter
                                            usingBlock:^(NSData* component, BOOL last) {
        if (!last) {
            [self emitLineWithData:component];
        } else if (0 &lt; [component length]) {
            self.remainder = [component mutableCopy];
        } else {
            self.remainder = nil;
        }
    }];
}
</code></pre>

<p>现在你运行示例应用的话，会发现它在响应事件时非常迅速，内存的开销也保持很低（在我们测试时，不论读入的文件有多大，堆所占用的内存量始终低于 800KB）。绝大部分时候，使用逐块读入的方式来处理大文件，是非常有用的技术。</p>

<p>延伸阅读：</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html">File System Programming Guide: Techniques for Reading and Writing Files Without File Coordinators</a></li>
<li><a href="http://stackoverflow.com/questions/3707427/how-to-read-data-from-nsfilehandle-line-by-line">StackOverflow: How to read data from NSFileHandle line by line?</a></li>
</ul>

<h2 id="toc_8">总结</h2>

<p>通过我们所列举的几个示例，我们展示了如何异步地在后台执行一些常见任务。在所有的解决方案中，我们尽力保持了代码的简单，这是因为在并发编程中，稍不留神就会捅出篓子来。</p>

<p>很多时候为了避免麻烦，你可能更愿意在主线程中完成你的工作，在你能这么做事，这确实让你的工作轻松不少，但是当你发现性能瓶颈时，你可以尝试尽可能用最简单的策略将那些繁重任务放到后台去做。</p>

<p>我们在上面例子中所展示的方法对于其他任务来说也是安全的选择。在主队列中接收事件或者数据，然后用后台操作队列来执行实际操作，然后回到主队列去传递结果，遵循这样的原则来编写尽量简单的并行代码，将是保证高效正确的不二法则。</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/common-background-practices.html">Common Background Practices</a></p>

<p>译文 <a href="http://onevcat.com/2014/03/common-background-practices/">常见的后台实践</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[底层并发 API]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472585.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472585.html</id>
    <content type="html"><![CDATA[
<p>这篇文章里，我们将会讨论一些 iOS 和 OS X 都可以使用的底层 API。除了 <code>dispatch_once</code> ，我们一般不鼓励使用其中的任何一种技术。</p>

<p>但是我们想要揭示出表面之下深层次的一些可利用的方面。这些底层的 API 提供了大量的灵活性，随之而来的是大量的复杂度和更多的责任。在我们的文章<a href="http://objccn.io/issue-2-2/">常见的后台实践</a>中提到的高层的 API 和模式能够让你专注于手头的任务并且免于大量的问题。通常来说，高层的 API 会提供更好的性能，除非你能承受起使用底层 API 带来的纠结于调试代码的时间和努力。</p>

<p>尽管如此，了解深层次下的软件堆栈工作原理还是有很有帮助的。我们希望这篇文章能够让你更好的了解这个平台，同时，让你更加感谢这些高层的 API。</p>

<p>首先，我们将会分析大多数组成 <em>Grand Central Dispatch</em> 的部分。它已经存在了好几年，并且苹果公司持续添加功能并且改善它。现在苹果已经将其开源，这意味着它对其他平台也是可用的了。最后，我们将会看一下<a href="#atomic_operations">原子操作</a>——另外的一种底层代码块的集合。</p>

<p>或许关于并发编程最好的书是 <em>M. Ben-Ari</em> 写的《Principles of Concurrent Programming》,<a href="https://en.wikipedia.org/wiki/Special:BookSources/0-13-701078-8">ISBN 0-13-701078-8</a>。如果你正在做任何与并发编程有关的事情，你需要读一下这本书。这本书已经30多年了，仍然非常卓越。书中简洁的写法，优秀的例子和练习，带你领略并发编程中代码块的基本原理。这本书现在已经绝版了，但是它的一些复印版依然广为流传。有一个新版书，名字叫《Principles of Concurrent and Distributed Programming》,<a href="https://en.wikipedia.org/wiki/Special:BookSources/0-321-31283-X">ISBN 0-321-31283-X</a>,好像有很多相同的地方，不过我还没有读过。</p>

<h2 id="toc_0">从前...</h2>

<p>或许GCD中使用最多并且被滥用功能的就是 <code>dispatch_once</code> 了。正确的用法看起来是这样的：</p>

<pre><code>+ (UIColor *)boringColor;
{
    static UIColor *color;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        color = [UIColor colorWithRed:0.380f green:0.376f blue:0.376f alpha:1.000f];
    });
    return color;
}
</code></pre>

<p>上面的 block 只会运行一次。并且在连续的调用中，这种检查是很高效的。你能使用它来初始化全局数据比如单例。要注意的是，使用 <code>dispatch_once_t</code> 会使得测试变得非常困难（单例和测试不是很好配合）。</p>

<p>要确保 <code>onceToken</code> 被声明为 <code>static</code> ，或者有全局作用域。任何其他的情况都会导致无法预知的行为。换句话说，<strong>不要</strong>把 <code>dispatch_once_t</code> 作为一个对象的成员变量，或者类似的情形。</p>

<p>退回到远古时代（其实也就是几年前），人们会使用 <code>pthread_once</code> ，因为 <code>dispatch_once_t</code> 更容易使用并且不易出错，所以你永远都不会再用到 <code>pthread_once</code> 了。</p>

<h2 id="toc_1">延后执行</h2>

<p>另一个常见的小伙伴就是 <code>dispatch_after</code> 了。它使工作延后执行。它是很强大的，但是要注意：你很容易就陷入到一堆麻烦中。一般用法是这样的：</p>

<pre><code>- (void)foo
{
    double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [self bar];
    });
}
</code></pre>

<p>第一眼看上去这段代码是极好的。但是这里存在一些缺点。我们不能（直接）取消我们已经提交到 <code>dispatch_after</code> 的代码，它将会运行。</p>

<p>另外一个需要注意的事情就是，当人们使用 <code>dispatch_after</code> 去处理他们代码中存在的时序 bug 时，会存在一些有问题的倾向。一些代码执行的过早而你很可能不知道为什么会这样，所以你把这段代码放到了 <code>dispatch_after</code> 中，现在一切运行正常了。但是几周以后，之前的工作不起作用了。由于你并不十分清楚你自己代码的执行次序，调试代码就变成了一场噩梦。所以不要像上面这样做。大多数的情况下，你最好把代码放到正确的位置。如果代码放到 <code>-viewWillAppear</code> 太早，那么或许 <code>-viewDidAppear</code> 就是正确的地方。</p>

<p>通过在自己代码中建立直接调用（类似 <code>-viewDidAppear</code> ）而不是依赖于  <code>dispatch_after</code> ，你会为自己省去很多麻烦。</p>

<p>如果你需要一些事情在某个特定的时刻运行，那么 <code>dispatch_after</code> 或许会是个好的选择。确保同时考虑了 <code>NSTimer</code>，这个API虽然有点笨重，但是它允许你取消定时器的触发。</p>

<h2 id="toc_2">队列</h2>

<p>GCD 中一个基本的代码块就是队列。下面我们会给出一些如何使用它的例子。当使用队列的时候，给它们一个明显的标签会帮自己不少忙。在调试时，这个标签会在 Xcode (和 lldb)中显示，这会帮助你了解你的 app 是由什么决定的：</p>

<pre><code>- (id)init;
{
    self = [super init];
    if (self != nil) {
        NSString *label = [NSString stringWithFormat:@&quot;%@.isolation.%p&quot;, [self class], self];
        self.isolationQueue = dispatch_queue_create([label UTF8String], 0);

        label = [NSString stringWithFormat:@&quot;%@.work.%p&quot;, [self class], self];
        self.workQueue = dispatch_queue_create([label UTF8String], 0);
    }
    return self;
}
</code></pre>

<p>队列可以是并行也可以是串行的。默认情况下，它们是串行的，也就是说，任何给定的时间内，只能有一个单独的 block 运行。这就是隔离队列（原文：isolation queues。译注）的运行方式。队列也可以是并行的，也就是同一时间内允许多个 block 一起执行。</p>

<p>GCD 队列的内部使用的是线程。GCD 管理这些线程，并且使用 GCD 的时候，你不需要自己创建线程。但是重要的外在部分 GCD 会呈现给你，也就是用户 API，一个很大不同的抽象层级。当使用 GCD 来完成并发的工作时，你不必考虑线程方面的问题，取而代之的，只需考虑队列和功能点（提交给队列的 block）。虽然往下深究，依然都是线程，但是 GCD 的抽象层级为你惯用的编码提供了更好的方式。</p>

<p>队列和功能点同时解决了一个连续不断的扇出的问题：如果我们直接使用线程，并且想要做一些并发的事情，我们很可能将我们的工作分成 100 个小的功能点，然后基于可用的 CPU 内核数量来创建线程，假设是 8。我们把这些功能点送到这 8 个线程中。当我们处理这些功能点时，可能会调用一些函数作为功能的一部分。写那个函数的人也想要使用并发，因此当你调用这个函数的时候，这个函数也会创建 8 个线程。现在，你有了 8 × 8 = 64 个线程，尽管你只有 8 个CPU内核——也就是说任何时候只有12%的线程实际在运行而另外88%的线程什么事情都没做。使用 GCD 你就不会遇到这种问题，当系统关闭 CPU 内核以省电时，GCD 甚至能够相应地调整线程数量。</p>

<p>GCD 通过创建所谓的<a href="http://en.wikipedia.org/wiki/Thread_pool_pattern">线程池</a>来大致匹配 CPU 内核数量。要记住，线程的创建并不是无代价的。每个线程都需要占用内存和内核资源。这里也有一个问题：如果你提交了一个 block 给 GCD，但是这段代码阻塞了这个线程，那么这个线程在这段时间内就不能用来完成其他工作——它被阻塞了。为了确保功能点在队列上一直是执行的，GCD 不得不创建一个新的线程，并把它添加到线程池。</p>

<p>如果你的代码阻塞了许多线程，这会带来很大的问题。首先，线程消耗资源，此外，创建线程会变得代价高昂。创建过程需要一些时间。并且在这段时间中，GCD 无法以全速来完成功能点。有不少能够导致线程阻塞的情况，但是最常见的情况与 I/O 有关，也就是从文件或者网络中读写数据。正是因为这些原因，你不应该在GCD队列中以阻塞的方式来做这些操作。看一下下面的<a href="#input_output">输入输出</a>段落去了解一些关于如何以 GCD 运行良好的方式来做 I/O 操作的信息。</p>

<h3 id="toc_3">目标队列</h3>

<p>你能够为你创建的任何一个队列设置一个<strong>目标队列</strong>。这会是很强大的，并且有助于调试。</p>

<p>为一个类创建它自己的队列而不是使用全局的队列被普遍认为是一种好的风格。这种方式下，你可以设置队列的名字，这让调试变得轻松许多—— Xcode 可以让你在 Debug Navigator 中看到所有的队列名字，如果你直接使用 <code>lldb</code>。<code>(lldb) thread list</code> 命令将会在控制台打印出所有队列的名字。一旦你使用大量的异步内容，这会是非常有用的帮助。</p>

<p>使用私有队列同样强调封装性。这时你自己的队列，你要自己决定如何使用它。</p>

<p>默认情况下，一个新创建的队列转发到默认优先级的全局队列中。我们就将会讨论一些有关优先级的东西。</p>

<p>你可以改变你队列转发到的队列——你可以设置自己队列的目标队列。以这种方式，你可以将不同队列链接在一起。你的 <code>Foo</code> 类有一个队列，该队列转发到 <code>Bar</code> 类的队列，<code>Bar</code> 类的队列又转发到全局队列。</p>

<p>当你为了隔离目的而使用一个队列时，这会非常有用。<code>Foo</code> 有一个隔离队列，并且转发到 <code>Bar</code> 的隔离队列，与 <code>Bar</code> 的隔离队列所保护的有关的资源，会自动成为线程安全的。 </p>

<p>如果你希望多个 block 同时运行，那要确保你自己的队列是并发的。同时需要注意，如果一个队列的目标队列是串行的（也就是非并发），那么实际上这个队列也会转换为一个串行队列。</p>

<h3 id="toc_4">优先级</h3>

<p>你可以通过设置目标队列为一个全局队列来改变自己队列的优先级，但是你应该克制这么做的冲动。</p>

<p>在大多数情况下，改变优先级不会使事情照你预想的方向运行。一些看起简单的事情实际上是一个非常复杂的问题。你很容易会碰到一个叫做<a href="http://en.wikipedia.org/wiki/Priority_inversion">优先级反转</a>的情况。我们的文章<a href="http://objccn.io/issue-2-1/#priority_inversion">《并发编程：API 及挑战》</a>有更多关于这个问题的信息，这个问题几乎导致了NASA的探路者火星漫游器变成砖头。</p>

<p>此外，使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 队列时，你需要格外小心。除非你理解了 <em>throttled I/O</em> 和 <em>background status as per setpriority(2)</em> 的意义，否则不要使用它。不然，系统可能会以难以忍受的方式终止你的 app 的运行。打算以不干扰系统其他正在做 I/O 操作的方式去做 I/O 操作时，一旦和优先级反转情况结合起来，这会变成一种危险的情况。</p>

<h2 id="toc_5">隔离</h2>

<p>隔离队列是 GCD 队列使用中非常普遍的一种模式。这里有两个变种。</p>

<h3 id="toc_6">资源保护</h3>

<p>多线程编程中，最常见的情形是你有一个资源，每次只有一个线程被允许访问这个资源。</p>

<p>我们在<a href="http://objccn.io/issue-2-1/#shared_resources">有关多线程技术的文章</a>中讨论了<em>资源</em>在并发编程中意味着什么，它通常就是一块内存或者一个对象，每次只有一个线程可以访问它。</p>

<p>举例来说，我们需要以多线程（或者多个队列）方式访问 <code>NSMutableDictionary</code> 。我们可能会照下面的代码来做：</p>

<pre><code>- (void)setCount:(NSUInteger)count forKey:(NSString *)key
{
    key = [key copy];
    dispatch_async(self.isolationQueue, ^(){
        if (count == 0) {
            [self.counts removeObjectForKey:key];
        } else {
            self.counts[key] = @(count);
        }
    });
}

- (NSUInteger)countForKey:(NSString *)key;
{
    __block NSUInteger count;
    dispatch_sync(self.isolationQueue, ^(){
        NSNumber *n = self.counts[key];
        count = [n unsignedIntegerValue];
    });
    return count;
}
</code></pre>

<p>通过以上代码，只有一个线程可以访问 <code>NSMutableDictionary</code> 的实例。</p>

<p>注意以下四点：</p>

<ol>
<li>不要使用上面的代码，请先阅读<a href="#multiple_readers_single_writer">多读单写</a>和<a href="#contention">锁竞争</a></li>
<li>我们使用 <code>async</code> 方式来保存值，这很重要。我们不想也不必阻塞当前线程只是为了等待<em>写操作</em>完成。当读操作时，我们使用 <code>sync</code> 因为我们需要返回值。</li>
<li>从函数接口可以看出，<code>-setCount:forKey:</code> 需要一个 <code>NSString</code> 参数，用来传递给 <code>dispatch_async</code>。函数调用者可以自由传递一个 <code>NSMutableString</code> 值并且能够在函数返回后修改它。因此我们<em>必须</em>对传入的字符串使用 <em>copy</em> 操作以确保函数能够正确地工作。如果传入的字符串不是可变的（也就是正常的 <code>NSString</code> 类型），调用<em>copy</em>基本上是个空操作。</li>
<li><code>isolationQueue</code> 创建时，参数 <code>dispatch_queue_attr_t</code> 的值必须是<em>DISPATCH<u>QUEUE</u>SERIAL</em>（或者0）。</li>
</ol>

<p><a id='multiple_readers_single_writer' name='multiple_readers_single_writer'> </a></p>

<h3 id="toc_7">单一资源的多读单写</h3>

<p>我们能够改善上面的那个例子。GCD 有可以让多线程运行的并发队列。我们能够安全地使用多线程来从 <code>NSMutableDictionary</code> 中读取只要我们不同时修改它。当我们需要改变这个字典时，我们使用 <em>barrier</em> 来分发这个 block。这样的一个 block 的运行时机是，在它之前所有计划好的 block 完成之后，并且在所有它后面的 block 运行之前。</p>

<p>以如下方式创建队列：</p>

<pre><code>self.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);
</code></pre>

<p>并且用以下代码来改变setter函数：</p>

<pre><code>- (void)setCount:(NSUInteger)count forKey:(NSString *)key
{
    key = [key copy];
    dispatch_barrier_async(self.isolationQueue, ^(){
        if (count == 0) {
            [self.counts removeObjectForKey:key];
        } else {
            self.counts[key] = @(count);
        }
    });
}
</code></pre>

<p>当使用并发队列时，要确保所有的 <em>barrier</em> 调用都是 <em>async</em> 的。如果你使用 <code>dispatch_barrier_sync</code> ，那么你很可能会使你自己（更确切的说是，你的代码）产生死锁。写操作<em>需要</em>  barrier，并且<em>可以</em>是 async 的。</p>

<p><a id='contention' name='contention'> </a></p>

<h3 id="toc_8">锁竞争</h3>

<p>首先，这里有一个警告：上面这个例子中我们保护的资源是一个  <code>NSMutableDictionary</code>，出于这样的目的，这段代码运行地相当不错。但是在真实的代码中，把隔离放到正确的复杂度层级下是很重要的。</p>

<p>如果你对 <code>NSMutableDictionary</code> 的访问操作变得非常频繁，你会碰到一个已知的叫做锁竞争的问题。锁竞争并不是只是在 GCD 和队列下才变得特殊，任何使用了锁机制的程序都会碰到同样的问题——只不过不同的锁机制会以不同的方式碰到。</p>

<p>所有对  <code>dispatch_async</code>，<code>dispatch_sync</code> 等等的调用都需要完成某种形式的锁——以确保仅有一个线程或者特定的线程运行指定的代码。GCD 某些程序上可以使用时序(译注：原词为 scheduling)来避免使用锁，但在最后，问题只是稍有变化。根本问题仍然存在：如果你有<strong>大量</strong>的线程在相同时间去访问同一个锁或者队列，你就会看到性能的变化。性能会严重下降。</p>

<p>你应该从直接复杂层次中隔离开。当你发现了性能下降，这明显表明代码中存在设计问题。这里有两个开销需要你来平衡。第一个是独占临界区资源太久的开销，以至于别的线程都因为进入临界区的操作而阻塞。第二个是太频繁出入临界区的开销。在 GCD 的世界里，第一种开销的情况就是一个 block 在隔离队列中运行，它可能潜在的阻塞了其他将要在这个隔离队列中运行的代码。第二种开销对应的就是调用 <code>dispatch_async</code> 和 <code>dispatch_sync</code> 。无论再怎么优化，这两个操作都不是无代价的。</p>

<p>令人忧伤的，不存在通用的标准来指导如何正确的平衡，你需要自己评测和调整。启动 Instruments 观察你的 app 忙于什么操作。</p>

<p>如果你看上面例子中的代码，我们的临界区代码仅仅做了很简单的事情。这可能是也可能不是好的方式，依赖于它怎么被使用。</p>

<p>在你自己的代码中，要考虑自己是否在更高的层次保护了隔离队列。举个例子，类 <code>Foo</code> 有一个隔离队列并且它本身保护着对 <code>NSMutableDictionary</code> 的访问，代替的，可以有一个用到了 <code>Foo</code> 类的 <code>Bar</code> 类有一个隔离队列保护所有对类 <code>Foo</code> 的使用。换句话说，你可以把类 <code>Foo</code> 变为非线程安全的（没有隔离队列），并在 <code>Bar</code> 中，使用一个隔离队列来确保任何时刻只能有一个线程使用 <code>Foo</code> 。</p>

<p><a name="async" id="async"> </a></p>

<h3 id="toc_9">全都使用异步分发</h3>

<p>我们在这稍稍转变以下话题。正如你在上面看到的，你可以同步和异步地分发一个  block，一个工作单元。我们在<a href="http://objccn.io/issue-2-1/#dead_locks">《并发编程：API 及挑战》</a>）中讨论的一个非常普遍的问题就是<a href="http://zh.wikipedia.org/wiki/%E6%AD%BB%E9%94%81">死锁</a>。在 GCD 中，以同步分发的方式非常容易出现这种情况。见下面的代码：</p>

<pre><code>dispatch_queue_t queueA; // assume we have this
dispatch_sync(queueA, ^(){
    dispatch_sync(queueA, ^(){
        foo();
    });
});
</code></pre>

<p>一旦我们进入到第二个 <code>dispatch_sync</code> 就会发生死锁。我们不能分发到queueA，因为有人（当前线程）正在队列中并且永远不会离开。但是有更隐晦的产生死锁方式：</p>

<pre><code>dispatch_queue_t queueA; // assume we have this
dispatch_queue_t queueB; // assume we have this

dispatch_sync(queueA, ^(){
    foo();
});

void foo(void)
{
    dispatch_sync(queueB, ^(){
        bar();
    });
}

void bar(void)
{
    dispatch_sync(queueA, ^(){
        baz();
    });
}
</code></pre>

<p>单独的每次调用 <code>dispatch_sync()</code> 看起来都没有问题，但是一旦组合起来，就会发生死锁。</p>

<p>这是使用同步分发存在的固有问题，如果我们使用异步分发，比如：</p>

<pre><code>dispatch_queue_t queueA; // assume we have this
dispatch_async(queueA, ^(){
    dispatch_async(queueA, ^(){
        foo();
    });
});
</code></pre>

<p>一切运行正常。<em>异步调用不会产生死锁</em>。因此值得我们在任何可能的时候都使用异步分发。我们使用一个异步调用结果 block 的函数，来代替编写一个返回值（必须要用同步）的方法或者函数。这种方式，我们会有更少发生死锁的可能性。</p>

<p>异步调用的副作用就是它们很难调试。当我们在调试器里中止代码运行，回溯并查看已经变得没有意义了。</p>

<p>要牢记这些。死锁通常是最难处理的问题。</p>

<h3 id="toc_10">如何写出好的异步 API</h3>

<p>如果你正在给设计一个给别人（或者是给自己）使用的 API，你需要记住几种好的实践。</p>

<p>正如我们刚刚提到的，你需要倾向于异步 API。当你创建一个 API，它会在你的控制之外以各种方式调用，如果你的代码能产生死锁，那么死锁就会发生。</p>

<p>如果你需要写的函数或者方法，那么让它们调用 <code>dispatch_async()</code> 。不要让你的函数调用者来这么做，这个调用应该在你的方法或者函数中来做。</p>

<p>如果你的方法或函数有一个返回值，异步地将其传递给一个回调处理程序。这个 API 应该是这样的，你的方法或函数同时持有一个结果 block 和一个将结果传递过去的队列。你函数的调用者不需要自己来做分发。这么做的原因很简单：几乎所有时间，函数调用都应该在一个适当的队列中，而且以这种方式编写的代码是很容易阅读的。总之，你的函数将会（必须）调用 <code>dispatch_async()</code> 去运行回调处理程序，所以它同时也可能在需要调用的队列上做这些工作。</p>

<p>如果你写一个类，让你类的使用者设置一个回调处理队列或许会是一个好的选择。你的代码可能像这样：</p>

<pre><code>- (void)processImage:(UIImage *)image completionHandler:(void(^)(BOOL success))handler;
{
    dispatch_async(self.isolationQueue, ^(void){
        // do actual processing here
        dispatch_async(self.resultQueue, ^(void){
            handler(YES);
        });
    });
}
</code></pre>

<p>如果你以这种方式来写你的类，让类之间协同工作就会变得容易。如果类 A 使用了类 B，它会把自己的隔离队列设置为 B 的回调队列。</p>

<h2 id="toc_11">迭代执行</h2>

<p>如果你正在倒弄一些数字，并且手头上的问题可以拆分出同样性质的部分，那么 <code>dispatch_apply</code> 会很有用。</p>

<p>如果你的代码看起来是这样的：</p>

<pre><code>for (size_t y = 0; y &lt; height; ++y) {
    for (size_t x = 0; x &lt; width; ++x) {
        // Do something with x and y here
    }
}
</code></pre>

<p>小小的改动或许就可以让它运行的更快：</p>

<pre><code>dispatch_apply(height, dispatch_get_global_queue(0, 0), ^(size_t y) {
    for (size_t x = 0; x &lt; width; x += 2) {
        // Do something with x and y here
    }
});
</code></pre>

<p>代码运行良好的程度取决于你在循环内部做的操作。</p>

<p>block 中运行的工作必须是非常重要的，否则这个头部信息就显得过于繁重了。除非代码受到计算带宽的约束，每个工作单元为了很好适应缓存大小而读写的内存都是临界的。这会对性能会带来显著的影响。受到临界区约束的代码可能不会很好地运行。详细讨论这些问题已经超出了这篇文章的范围。使用 <code>dispatch_apply</code> 可能会对性能提升有所帮助，但是性能优化本身就是个很复杂的主题。维基百科上有一篇关于 <a href="https://en.wikipedia.org/wiki/Memory_bound">Memory-bound function</a> 的文章。内存访问速度在 L2，L3 和主存上变化很显著。当你的数据访问模式与缓存大小不匹配时，10倍性能下降的情况并不少见。</p>

<h2 id="toc_12">组</h2>

<p>很多时候，你发现需要将异步的 block 组合起来去完成一个给定的任务。这些任务中甚至有些是并行的。现在，如果你想要在这些任务都执行完成后运行一些代码，<q>groups</q> 可以完成这项任务。看这里的例子：</p>

<pre><code>dispatch_group_t group = dispatch_group_create();

dispatch_queue_t queue = dispatch_get_global_queue(0, 0);
dispatch_group_async(group, queue, ^(){
    // Do something that takes a while
    [self doSomeFoo];
    dispatch_group_async(group, dispatch_get_main_queue(), ^(){
        self.foo = 42;
    });
});
dispatch_group_async(group, queue, ^(){
    // Do something else that takes a while
    [self doSomeBar];
    dispatch_group_async(group, dispatch_get_main_queue(), ^(){
        self.bar = 1;
    });
});

// This block will run once everything above is done:
dispatch_group_notify(group, dispatch_get_main_queue(), ^(){
    NSLog(@&quot;foo: %d&quot;, self.foo);
    NSLog(@&quot;bar: %d&quot;, self.bar);
});
</code></pre>

<p>需要注意的重要事情是，所有的这些都是非阻塞的。我们从未让当前的线程一直等待直到别的任务做完。恰恰相反，我们只是简单的将多个 block 放入队列。由于代码不会阻塞，所以就不会产生死锁。</p>

<p>同时需要注意的是，在这个小并且简单的例子中，我们是怎么在不同的队列间进切换的。</p>

<h3 id="toc_13">对现有API使用 dispatch<u>group</u>t</h3>

<p>一旦你将  groups 作为你的工具箱中的一部分，你可能会怀疑为什么大多数的异步API不把 <code>dispatch_group_t</code> 作为一个可选参数。这没有什么无法接受的理由，仅仅是因为自己添加这个功能太简单了，但是你还是要小心以确保自己使用 groups 的代码是成对出现的。</p>

<p>举例来说，我们可以给 Core Data 的 <code>-performBlock:</code> API 函数添加上 groups，就像这样：</p>

<pre><code>- (void)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block
{
    if (group == NULL) {
        [self performBlock:block];
    } else {
        dispatch_group_enter(group);
        [self performBlock:^(){
            block();
            dispatch_group_leave(group);
        }];
    }
}
</code></pre>

<p>当 Core Data 上的一系列操作(很可能和其他的代码组合起来)完成以后，我们可以使用 <code>dispatch_group_notify</code> 来运行一个 block 。</p>

<p>很明显，我们可以给 <code>NSURLConnection</code> 做同样的事情：</p>

<pre><code>+ (void)withGroup:(dispatch_group_t)group 
        sendAsynchronousRequest:(NSURLRequest *)request 
        queue:(NSOperationQueue *)queue 
        completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler
{
    if (group == NULL) {
        [self sendAsynchronousRequest:request 
                                queue:queue 
                    completionHandler:handler];
    } else {
        dispatch_group_enter(group);
        [self sendAsynchronousRequest:request 
                                queue:queue 
                    completionHandler:^(NSURLResponse *response, NSData *data, NSError *error){
            handler(response, data, error);
            dispatch_group_leave(group);
        }];
    }
}
</code></pre>

<p>为了能正常工作，你需要确保:</p>

<ul>
<li><code>dispatch_group_enter()</code> 必须要在 <code>dispatch_group_leave()</code>之前运行。</li>
<li><code>dispatch_group_enter()</code> 和 <code>dispatch_group_leave()</code> 一直是成对出现的（就算有错误产生时）。</li>
</ul>

<h2 id="toc_14">事件源</h2>

<p>GCD 有一个较少人知道的特性：事件源 <code>dispatch_source_t</code>。</p>

<p>跟 GCD 一样，它也是很底层的东西。当你需要用到它时，它会变得极其有用。它的一些使用是秘传招数，我们将会接触到一部分的使用。但是大部分事件源在 iOS 平台不是很有用，因为在 iOS 平台有诸多限制，你无法启动进程（因此就没有必要监视进程），也不能在你的 app bundle 之外写数据（因此也就没有必要去监视文件）等等。</p>

<p>GCD 事件源是以极其资源高效的方式实现的。</p>

<h3 id="toc_15">监视进程</h3>

<p>如果一些进程正在运行而你想知道他们什么时候存在，GCD 能够做到这些。你也可以使用 GCD 来检测进程什么时候分叉，也就是产生子进程或者传送给了进程的一个信号（比如 <code>SIGTERM</code>）。</p>

<pre><code>NSRunningApplication *mail = [NSRunningApplication 
  runningApplicationsWithBundleIdentifier:@&quot;com.apple.mail&quot;];
if (mail == nil) {
    return;
}
pid_t const pid = mail.processIdentifier;
self.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid, 
  DISPATCH_PROC_EXIT, DISPATCH_TARGET_QUEUE_DEFAULT);
dispatch_source_set_event_handler(self.source, ^(){
    NSLog(@&quot;Mail quit.&quot;);
});
dispatch_resume(self.source);
</code></pre>

<p>当 Mail.app 退出的时候，这个程序会打印出 <strong>Mail quit.</strong>。</p>

<p>注意：在所有的事件源被传递到你的事件处理器之前，必须调用 <code>dispatch_resume()</code>。</p>

<p><a name="watching_files" id="watching_files"> </a></p>

<h3 id="toc_16">监视文件</h3>

<p>这种可能性是无穷的。你能直接监视一个文件的改变，并且当改变发生时事件源的事件处理将会被调用。</p>

<p>你也可以使用它来监视文件夹，比如创建一个 <em>watch folder</em>：</p>

<pre><code>NSURL *directoryURL; // assume this is set to a directory
int const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);
if (fd &lt; 0) {
    char buffer[80];
    strerror_r(errno, buffer, sizeof(buffer));
    NSLog(@&quot;Unable to open \&quot;%@\&quot;: %s (%d)&quot;, [directoryURL path], buffer, errno);
    return;
}
dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd, 
  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);
dispatch_source_set_event_handler(source, ^(){
    unsigned long const data = dispatch_source_get_data(source);
    if (data &amp; DISPATCH_VNODE_WRITE) {
        NSLog(@&quot;The directory changed.&quot;);
    }
    if (data &amp; DISPATCH_VNODE_DELETE) {
        NSLog(@&quot;The directory has been deleted.&quot;);
    }
});
dispatch_source_set_cancel_handler(source, ^(){
    close(fd);
});
self.source = source;
dispatch_resume(self.source);
</code></pre>

<p>你应该总是添加 <code>DISPATCH_VNODE_DELETE</code> 去检测文件或者文件夹是否已经被删除——然后就停止监听。</p>

<h3 id="toc_17">定时器</h3>

<p>大多数情况下，对于定时事件你会选择 <code>NSTimer</code>。定时器的GCD版本是底层的，它会给你更多控制权——但要小心使用。</p>

<p>需要特别重点指出的是，为了让 OS 节省电量，需要为 GCD 的定时器接口指定一个低的余地值(译注：原文leeway value)。如果你不必要的指定了一个低余地值，将会浪费更多的电量。</p>

<p>这里我们设定了一个5秒的定时器，并允许有十分之一秒的余地值：</p>

<pre><code>dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 
  0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);
dispatch_source_set_event_handler(source, ^(){
    NSLog(@&quot;Time flies.&quot;);
});
dispatch_time_t start
dispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC, 
  100ull * NSEC_PER_MSEC);
self.source = source;
dispatch_resume(self.source);
</code></pre>

<h3 id="toc_18">取消</h3>

<p>所有的事件源都允许你添加一个 <em>cancel handler</em> 。这对清理你为事件源创建的任何资源都是很有帮助的，比如关闭文件描述符。GCD 保证在 <em>cancel handle</em>  调用前，所有的事件处理都已经完成调用。</p>

<p>参考上面的<a href="#watching_files">监视文件例子</a>中对 <code>dispatch_source_set_cancel_handler()</code> 的使用。</p>

<p><a id='input_output' name='input_output'> </a></p>

<h2 id="toc_19">输入输出</h2>

<p>写出能够在繁重的 I/O 处理情况下运行良好的代码是一件非常棘手的事情。GCD 有一些能够帮上忙的地方。不会涉及太多的细节，我们只简单的分析下问题是什么，GCD 是怎么处理的。</p>

<p>习惯上，当你从一个网络套接字中读取数据时，你要么做一个阻塞的读操作，也就是让你个线程一直等待直到数据变得可用，或者是做反复的轮询。这两种方法都是很浪费资源并且无法度量。然而，<code>kqueue</code> 通过当数据变得可用时传递一个事件解决了轮询的问题，GCD 也采用了同样的方法，但是更加优雅。当向套接字写数据时，同样的问题也存在，这时你要么做阻塞的写操作，要么等待套接字直到能够接收数据。</p>

<p>在处理 I/O 时，还有一个问题就是数据是以数据块的形式到达的。当从网络中读取数据时，依据 MTU([]最大传输单元](<a href="https://en.wikipedia.org/wiki/Maximum_transmission_unit))%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%9D%97%E5%85%B8%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%98%AF%E5%9C%A81.5K%E5%AD%97%E8%8A%82%E5%B7%A6%E5%8F%B3%E3%80%82%E8%BF%99%E4%BD%BF%E5%BE%97%E6%95%B0%E6%8D%AE%E5%9D%97%E5%86%85%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%BB%E4%BD%95%E5%86%85%E5%AE%B9%E3%80%82%E4%B8%80%E6%97%A6%E6%95%B0%E6%8D%AE%E5%88%B0%E8%BE%BE%EF%BC%8C%E4%BD%A0%E9%80%9A%E5%B8%B8%E5%8F%AA%E6%98%AF%E5%AF%B9%E8%B7%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%9D%97%E7%9A%84%E5%86%85%E5%AE%B9%E6%84%9F%E5%85%B4%E8%B6%A3%E3%80%82%E8%80%8C%E4%B8%94%E9%80%9A%E5%B8%B8%E4%BD%A0%E4%BC%9A%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%A4%A7%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E9%87%8C%E5%B0%86%E6%95%B0%E6%8D%AE%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5%E7%84%B6%E5%90%8E%E5%86%8D%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E3%80%82%E5%81%87%E8%AE%BE%EF%BC%88%E4%BA%BA%E4%B8%BA%E4%BE%8B%E5%AD%90%EF%BC%89%E4%BD%A0%E6%94%B6%E5%88%B0%E4%BA%86%E8%BF%99%E6%A0%B78%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%9D%97%EF%BC%9A">https://en.wikipedia.org/wiki/Maximum_transmission_unit))，数据块典型的大小是在1.5K字节左右。这使得数据块内可以是任何内容。一旦数据到达，你通常只是对跨多个数据块的内容感兴趣。而且通常你会在一个大的缓冲区里将数据组合起来然后再进行处理。假设（人为例子）你收到了这样8个数据块：</a></p>

<pre><code>0: HTTP/1.1 200 OK\r\nDate: Mon, 23 May 2005 22:38
1: :34 GMT\r\nServer: Apache/1.3.3.7 (Unix) (Red-H
2: at/Linux)\r\nLast-Modified: Wed, 08 Jan 2003 23
3: :11:55 GMT\r\nEtag: &quot;3f80f-1b6-3e1cb03b&quot;\r\nCon
4: tent-Type: text/html; charset=UTF-8\r\nContent-
5: Length: 131\r\nConnection: close\r\n\r\n&lt;html&gt;\r
6: \n&lt;head&gt;\r\n  &lt;title&gt;An Example Page&lt;/title&gt;\r\n
7: &lt;/head&gt;\r\n&lt;body&gt;\r\n  Hello World, this is a ve
</code></pre>

<p>如果你是在寻找 HTTP 的头部，将所有数据块组合成一个大的缓冲区并且从中查找 <code>\r\n\r\n</code> 是非常简单的。但是这样做，你会大量地复制这些数据。大量 <em>旧的</em> C 语言 API 存在的另一个问题就是，缓冲区没有所有权的概念，所以函数不得不将数据再次拷贝到自己的缓冲区中——又一次的拷贝。拷贝数据操作看起来是无关紧要的，但是当你正在做大量的 I/O 操作的时候，你会在 profiling tool(Instruments) 中看到这些拷贝操作大量出现。即使你仅仅每个内存区域拷贝一次，你还是使用了两倍的存储带宽并且占用了两倍的内存缓存。</p>

<h3 id="toc_20">GCD 和缓冲区</h3>

<p>最直接了当的方法是使用数据缓冲区。GCD 有一个 <code>dispatch_data_t</code> 类型，在某种程度上和 Objective-C 的 <code>NSData</code> 类型很相似。但是它能做别的事情，而且更通用。</p>

<p>注意，<code>dispatch_data_t</code> 可以被 retained 和 releaseed ，并且 <code>dispatch_data_t</code> <em>拥有</em>它持有的对象。</p>

<p>这看起来无关紧要，但是我们必须记住 GCD 只是纯 C 的 API，并且不能使用Objective-C。通常的做法是创建一个缓冲区，这个缓冲区要么是基于栈的，要么是  <code>malloc</code> 操作分配的内存区域 —— 这些都没有所有权。</p>

<p><code>dispatch_data_t</code> 的一个相当独特的属性是它可以基于零碎的内存区域。这解决了我们刚提到的组合内存的问题。当你要将两个数据对象连接起来时：</p>

<pre><code>dispatch_data_t a; // Assume this hold some valid data
dispatch_data_t b; // Assume this hold some valid data
dispatch_data_t c = dispatch_data_create_concat(a, b);
</code></pre>

<p>数据对象 c 并不会将 a 和 b 拷贝到一个单独的，更大的内存区域里去。相反，它只是简单地 retain 了 a 和 b。你可以使用 <code>dispatch_data_apply</code> 来遍历对象 c 持有的内存区域：</p>

<pre><code>dispatch_data_apply(c, ^bool(dispatch_data_t region, size_t offset, const void *buffer, size_t size) {
    fprintf(stderr, &quot;region with offset %zu, size %zu\n&quot;, offset, size);
    return true;
});
</code></pre>

<p>类似的，你可以使用 <code>dispatch_data_create_subrange</code> 来创建一个不做任何拷贝操作的子区域。</p>

<h3 id="toc_21">读和写</h3>

<p>在 GCD 的核心里，<em>调度 I/O</em>（译注：原文为 Dispatch I/O） 与所谓的<em>通道</em>有关。调度 I/O 通道提供了一种与从文件描述符中读写不同的方式。创建这样一个通道最基本的方式就是调用：</p>

<pre><code>dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, 
  dispatch_queue_t queue, void (^cleanup_handler)(int error));
</code></pre>

<p>这将返回一个持有文件描述符的创建好的通道。在你通过它创建了通道之后，你不准以任何方式修改这个文件描述符。</p>

<p>有两种从根本上不同类型的通道：流和随机存取。如果你打开了硬盘上的一个文件，你可以使用它来创建一个随机存取的通道（因为这样的文件描述符是可寻址的）。如果你打开了一个套接字，你可以创建一个流通道。</p>

<p>如果你想要为一个文件创建一个通道，你最好使用需要一个路径参数的 <code>dispatch_io_create_with_path</code> ，并且让 GCD 来打开这个文件。这是有益的，因为GCD会延迟打开这个文件以限制相同时间内同时打开的文件数量。</p>

<p>类似通常的 read(2)，write(2) 和 close(2) 的操作，GCD 提供了 <code>dispatch_io_read</code>，<code>dispatch_io_write</code> 和 <code>dispatch_io_close</code>。无论何时数据读完或者写完，读写操作调用一个回调 block 来结束。这些都是以非阻塞，异步 I/O 的形式高效实现的。</p>

<p>在这你得不到所有的细节，但是这里会提供一个创建TCP服务端的例子：</p>

<p>首先我们创建一个监听套接字，并且设置一个接受连接的事件源：</p>

<pre><code>_isolation = dispatch_queue_create([[self description] UTF8String], 0);
_nativeSocket = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);
struct sockaddr_in sin = {};
sin.sin_len = sizeof(sin);
sin.sin_family = AF_INET6;
sin.sin_port = htons(port);
sin.sin_addr.s_addr= INADDR_ANY;
int err = bind(result.nativeSocket, (struct sockaddr *) &amp;sin, sizeof(sin));
NSCAssert(0 &lt;= err, @&quot;&quot;);

_eventSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, _nativeSocket, 0, _isolation);
dispatch_source_set_event_handler(result.eventSource, ^{
    acceptConnection(_nativeSocket);
});
</code></pre>

<p>当接受了连接，我们创建一个I/O通道：</p>

<pre><code>typedef union socketAddress {
    struct sockaddr sa;
    struct sockaddr_in sin;
    struct sockaddr_in6 sin6;
} socketAddressUnion;

socketAddressUnion rsa; // remote socket address
socklen_t len = sizeof(rsa);
int native = accept(nativeSocket, &amp;rsa.sa, &amp;len);
if (native == -1) {
    // Error. Ignore.
    return nil;
}

_remoteAddress = rsa;
_isolation = dispatch_queue_create([[self description] UTF8String], 0);
_channel = dispatch_io_create(DISPATCH_IO_STREAM, native, _isolation, ^(int error) {
    NSLog(@&quot;An error occured while listening on socket: %d&quot;, error);
});

//dispatch_io_set_high_water(_channel, 8 * 1024);
dispatch_io_set_low_water(_channel, 1);
dispatch_io_set_interval(_channel, NSEC_PER_MSEC * 10, DISPATCH_IO_STRICT_INTERVAL);

socketAddressUnion lsa; // remote socket address
socklen_t len = sizeof(rsa);
getsockname(native, &amp;lsa.sa, &amp;len);
_localAddress = lsa;
</code></pre>

<p>如果我们想要设置 <code>SO_KEEPALIVE</code>（如果使用了HTTP的keep-alive），我们需要在调用 <code>dispatch_io_create</code> 前这么做。</p>

<p>创建好 I/O 通道后，我们可以设置读取处理程序：</p>

<pre><code>dispatch_io_read(_channel, 0, SIZE_MAX, _isolation, ^(bool done, dispatch_data_t data, int error){
    if (data != NULL) {
        if (_data == NULL) {
            _data = data;
        } else {
            _data = dispatch_data_create_concat(_data, data);
        }
        [self processData];
    }
});
</code></pre>

<p>如果所有你想做的只是读取或者写入一个文件，GCD 提供了两个方便的封装： <code>dispatch_read</code> 和 <code>dispatch_write</code> 。你需要传递给 <code>dispatch_read</code> 一个文件路径和一个在所有数据块读取后调用的 block。类似的，<code>dispatch_write</code> 需要一个文件路径和一个被写入的 <code>dispatch_data_t</code> 对象。</p>

<h2 id="toc_22">基准测试</h2>

<p>在 GCD 的一个不起眼的角落，你会发现一个适合优化代码的灵巧小工具：</p>

<pre><code>uint64_t dispatch_benchmark(size_t count, void (^block)(void));
</code></pre>

<p>把这个声明放到你的代码中，你就能够测量给定的代码执行的平均的纳秒数。例子如下：</p>

<pre><code>size_t const objectCount = 1000;
uint64_t n = dispatch_benchmark(10000, ^{
    @autoreleasepool {
        id obj = @42;
        NSMutableArray *array = [NSMutableArray array];
        for (size_t i = 0; i &lt; objectCount; ++i) {
            [array addObject:obj];
        }
    }
});
NSLog(@&quot;-[NSMutableArray addObject:] : %llu ns&quot;, n);
</code></pre>

<p>在我的机器上输出了：</p>

<pre><code>-[NSMutableArray addObject:] : 31803 ns
</code></pre>

<p>也就是说添加1000个对象到 NSMutableArray 总共消耗了31803纳秒，或者说平均一个对象消耗32纳秒。</p>

<p>正如 <code>dispatch_benchmark</code> 的<a href="http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3">帮助页面</a>指出的，测量性能并非如看起来那样不重要。尤其是当比较并发代码和非并发代码时，你需要注意特定硬件上运行的特定计算带宽和内存带宽。不同的机器会很不一样。如果代码的性能与访问临界区有关，那么我们上面提到的锁竞争问题就会有所影响。</p>

<p>不要把它放到发布代码中，事实上，这是无意义的，它是私有API。它只是在调试和性能分析上起作用。</p>

<p>访问帮助界面：</p>

<pre><code>curl &quot;http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt&quot; 
  | /usr/bin/groffer --tty -T utf8
</code></pre>

<p><a id='atomic_operations' name='atomic_operations'> </a></p>

<h2 id="toc_23">原子操作</h2>

<p>头文件 <code>libkern/OSAtomic.h</code> 里有许多强大的函数，专门用来底层多线程编程。尽管它是内核头文件的一部分，它也能够在内核之外来帮助编程。</p>

<p>这些函数都是很底层的，并且你需要知道一些额外的事情。就算你已经这样做了，你还可能会发现一两件你不能做，或者不易做的事情。当你正在为编写高性能代码或者正在实现无锁的和无等待的算法工作时，这些函数会吸引你。</p>

<p>这些函数在 <code>atomic(3)</code> 的帮助页里全部有概述——运行 <code>man 3 atomic</code> 命令以得到完整的文档。你会发现里面讨论到了内存屏障。查看维基百科中关于<a href="https://en.wikipedia.org/wiki/Memory_barrier">内存屏障</a>的文章。如果你还存在疑问，那么你很可能需要它。</p>

<h3 id="toc_24">计数器</h3>

<p><code>OSAtomicIncrement</code> 和 <code>OSAtomicDecrement</code> 有一个很长的函数列表允许你以原子操作的方式去增加和减少一个整数值 —— 不必使用锁（或者队列）同时也是线程安全的。如果你需要让一个全局的计数器值增加，而这个计数器为了统计目的而由多个线程操作，使用原子操作是很有帮助的。如果你要做的仅仅是增加一个全局计数器，那么无屏障版本的 <code>OSAtomicIncrement</code> 是很合适的，并且当没有锁竞争时，调用它们的代价很小。</p>

<p>类似的，<code>OSAtomicOr</code> ，<code>OSAtomicAnd</code>，<code>OSAtomicXor</code> 的函数能用来进行逻辑运算，而 <code>OSAtomicTest</code> 可以用来设置和清除位。</p>

<h4 id="toc_25">10.2、比较和交换</h4>

<p><code>OSAtomicCompareAndSwap</code> 能用来做无锁的惰性初始化，如下：</p>

<pre><code>void * sharedBuffer(void)
{
    static void * buffer;
    if (buffer == NULL) {
        void * newBuffer = calloc(1, 1024);
        if (!OSAtomicCompareAndSwapPtrBarrier(NULL, newBuffer, &amp;buffer)) {
            free(newBuffer);
        }
    }
    return buffer;
}
</code></pre>

<p>如果没有 buffer，我们会创建一个，然后原子地将其写到 <code>buffer</code> 中如果 <code>buffer</code> 为NULL。在极少的情况下，其他人在当前线程同时设置了 <code>buffer</code> ，我们简单地将其释放掉。因为比较和交换方法是原子的，所以它是一个线程安全的方式去惰性初始化值。NULL的检测和设置 <code>buffer</code> 都是以原子方式完成的。</p>

<p>明显的，使用 <code>dispatch_once()</code> 我们也可以完成类似的事情。</p>

<h3 id="toc_26">原子队列</h3>

<p><code>OSAtomicEnqueue()</code> 和 <code>OSAtomicDequeue()</code> 可以让你以线程安全，无锁的方式实现一个LIFO队列(常见的就是栈)。对有潜在精确要求的代码来说，这会是强大的代码。</p>

<p>还有  <code>OSAtomicFifoEnqueue()</code> 和 <code>OSAtomicFifoDequeue()</code> 函数是为了操作FIFO队列，但这些只有在头文件中才有文档 —— 阅读他们的时候要小心。</p>

<h3 id="toc_27">自旋锁</h3>

<p>最后，<code>OSAtomic.h</code> 头文件定义了使用自旋锁的函数：<code>OSSpinLock</code>。同样的，维基百科有深入的有关<a href="https://en.wikipedia.org/wiki/Spinlock">自旋锁</a>的信息。使用命令 <code>man 3 spinlock</code> 查看帮助页的 <code>spinlock(3)</code> 。当没有锁竞争时使用自旋锁代价很小。</p>

<p>在合适的情况下，使用自旋锁对性能优化是很有帮助的。一如既往：先测量，然后优化。不要做乐观的优化。</p>

<p>下面是 OSSpinLock 的一个例子：</p>

<pre><code>@interface MyTableViewCell : UITableViewCell

@property (readonly, nonatomic, copy) NSDictionary *amountAttributes;

@end



@implementation MyTableViewCell
{
    NSDictionary *_amountAttributes;
}

- (NSDictionary *)amountAttributes;
{
    if (_amountAttributes == nil) {
        static __weak NSDictionary *cachedAttributes = nil;
        static OSSpinLock lock = OS_SPINLOCK_INIT;
        OSSpinLockLock(&amp;lock);
        _amountAttributes = cachedAttributes;
        if (_amountAttributes == nil) {
            NSMutableDictionary *attributes = [[self subtitleAttributes] mutableCopy];
            attributes[NSFontAttributeName] = [UIFont fontWithName:@&quot;ComicSans&quot; size:36];
            attributes[NSParagraphStyleAttributeName] = [NSParagraphStyle defaultParagraphStyle];
            _amountAttributes = [attributes copy];
            cachedAttributes = _amountAttributes;
        }
        OSSpinLockUnlock(&amp;lock);
    }
    return _amountAttributes;
}
</code></pre>

<p>就上面的例子而言，或许用不着这么麻烦，但它演示了一种理念。我们使用了ARC的 <code>__weak</code> 来确保一旦 <code>MyTableViewCell</code> 所有的实例都不存在， <code>amountAttributes</code> 会调用 <code>dealloc</code> 。因此在所有的实例中，我们可以持有字典的一个单独实例。</p>

<p>这段代码运行良好的原因是我们不太可能访问到方法最里面的部分。这是很深奥的——除非你真正需要，不然不要在你的 App 中使用它。</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html">Low-Level Concurrency APIs</a></p>

<p>译文 <a href="http://webfrogs.me/2013/07/18/low-level_concurrency_apis/">Objc的底层并发API - webfrogs</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程安全类的设计]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472649.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472649.html</id>
    <content type="html"><![CDATA[
<p>这篇文章将专注于实用技巧，设计模式，以及对于写出线程安全类和使用 GCD 来说所特别需要注意的一些<a href="http://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F">反面模式</a>。</p>

<h2 id="toc_0">线程安全</h2>

<h3 id="toc_1">Apple 的框架</h3>

<p>首先让我们来看看 Apple 的框架。一般来说除非特别声明，大多数的类默认都不是线程安全的。对于其中的一些类来说，这是很合理的，但是对于另外一些来说就很有趣了。</p>

<p>就算是在经验丰富的 iOS/Mac 开发者，也难免会犯从后台线程去访问 UIKit/AppKit 这种错误。比如因为图片的内容本身就是从后台的网络请求中获取的话，顺手就在后台线程中设置了 <code>image</code> 之类的属性，这样的错误其实是屡见不鲜的。Apple 的代码都经过了性能的优化，所以即使你从别的线程设置了属性的时候，也不会产生什么警告。</p>

<p>在设置图片这个例子中，症结其实是你的改变通常要过一会儿才能生效。但是如果有两个线程在同时对图片进行了设定，那么很可能因为当前的图片被释放两次，而导致应用崩溃。这种行为是和时机有关系的，所以很可能在开发阶段没有崩溃，但是你的用户使用时却不断 crash。</p>

<p>现在没有<strong>官方</strong>的用来寻找类似错误的工具，但我们确实有一些技巧来避免这个问题。<a href="https://gist.github.com/steipete/5664345">UIKit Main Thread Guard</a> 是一段用来监视每一次对 <code>setNeedsLayout</code> 和 <code>setNeedsDisplay</code> 的调用代码，并检查它们是否是在主线程被调用的。因为这两个方法在 UIKit 的 setter （包括 image 属性）中广泛使用，所以它可以捕获到很多线程相关的错误。虽然这个小技巧并不包含任何私有 API， 但我们还是不建议将它是用在发布产品中，不过在开发过程中使用的话还是相当赞的。</p>

<p>Apple没有把 UIKit 设计为线程安全的类是有意为之的，将其打造为线程安全的话会使很多操作变慢。而事实上 UIKit 是和主线程绑定的，这一特点使得编写并发程序以及使用 UIKit 十分容易的，你唯一需要确保的就是对于 UIKit 的调用总是在主线程中来进行。</p>

<h4 id="toc_2">为什么 UIKit 不是线程安全的？</h4>

<p>对于一个像 UIKit 这样的大型框架，确保它的线程安全将会带来巨大的工作量和成本。将 non-atomic 的属性变为 atomic 的属性只不过是需要做的变化里的微不足道的一小部分。通常来说，你需要同时改变若干个属性，才能看到它所带来的结果。为了解决这个问题，苹果可能不得不提供像 Core Data 中的 <code>performBlock:</code> 和 <code>performBlockAndWait:</code> 那样类似的方法来同步变更。另外你想想看，绝大多数对 UIKit 类的调用其实都是以<strong>配置</strong>为目的的，这使得将 UIKit 改为线程安全这件事情更显得毫无意义了。</p>

<p>然而即使是那些与配置共享的内部状态之类事情无关的调用，其实也不是线程安全的。如果你做过 iOS 3.2 或之前的黑暗年代的 app 开发的话，你肯定有过一边在后台准备图像时一边使用 NSString 的 <code>drawInRect:withFont:</code> 时的随机崩溃的经历。值得庆幸的事，在 iOS 4 中 <a href="http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html">苹果将大部分绘图的方法和诸如 <code>UIColor</code> 和 <code>UIFont</code> 这样的类改写为了后台线程可用</a>。</p>

<p>但不幸的是 Apple 在线程安全方面的文档是极度匮乏的。他们推荐只访问主线程，并且甚至是绘图方法他们都没有明确地表示保证线程安全。因此在阅读文档的同时，去读读 <a href="http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html">iOS 版本更新说明</a>会是一个很好的选择。</p>

<p>对于大多数情况来说，UIKit 类确实只应该用在应用的主线程中。这对于那些继承自 UIResponder 的类以及那些操作你的应用的用户界面的类来说，不管如何都是很正确的。</p>

<h4 id="toc_3">内存回收 (deallocation) 问题</h4>

<p>另一个在后台使用 UIKit 对象的的危险之处在于“内存回收问题”。Apple 在技术笔记 <a href="http://developer.apple.com/library/ios/#technotes/tn2109/_index.html">TN2109</a> 中概述了这个问题，并提供了多种解决方案。这个问题其实是要求 UI 对象应该在主线程中被回收，因为在它们的 <code>dealloc</code> 方法被调用回收的时候，可能会去改变 view 的结构关系，而如我们所知，这种操作应该放在主线程来进行。</p>

<p>因为调用者被其他线程持有是非常常见的（不管是由于 operation 还是 block 所导致的），这也是很容易犯错并且难以被修正的问题。在 <a href="https://github.com/AFNetworking/AFNetworking/issues/56">AFNetworking 中也一直长久存在这样的 bug</a>，但是由于其自身的隐蔽性而鲜为人知，也很难重现其所造成的崩溃。在异步的 block 或者操作中一致使用 <code>__weak</code>，并且不去直接访问局部变量会对避开这类问题有所帮助。</p>

<h4 id="toc_4">Collection 类</h4>

<p>Apple 有一个<a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1">针对 iOS 和 Mac 的很好的总览性文档</a>，为大多数基本的 foundation 类列举了其线程安全特性。总的来说，比如 <code>NSArry</code> 这样不可变类是线程安全的。然而它们的可变版本，比如 <code>NSMutableArray</code> 是线程不安全的。事实上，如果是在一个队列中串行地进行访问的话，在不同线程中使用它们也是没有问题的。要记住的是即使你申明了返回类型是不可变的，方法里还是有可能返回的其实是一个可变版本的 collection 类。一个好习惯是写类似于 <code>return [array copy]</code> 这样的代码来确保返回的对象事实上是不可变对象。</p>

<p>与和<a href="">Java</a>这样的语言不一样，Foundation 框架并不提供直接可用的 collection 类，这是有其道理的，因为大多数情况下，你想要的是在更高层级上的锁，以避免太多的加解锁操作。但缓存是一个值得注意的例外，iOS 4 中 Apple 添加的 <code>NSCache</code> 使用一个可变的字典来存储不可变数据，它不仅会对访问加锁，更甚至在低内存情况下会清空自己的内容。</p>

<p>也就是说，在你的应用中存在可变的且线程安全的字典是可以做到的。借助于 class cluster 的方式，我们也很容易<a href="https://gist.github.com/steipete/5928916">写出这样的代码</a>。</p>

<h3 id="toc_5">原子属性 (Atomic Properties)</h3>

<p>你曾经好奇过 Apple 是怎么处理 atomic 的设置/读取属性的么？至今为止，你可能听说过自旋锁 (spinlocks)，信标 (semaphores)，锁 (locks)，@synchronized 等，Apple 用的是什么呢？因为 <a href="http://www.opensource.apple.com/source/objc4/">Objctive-C 的 runtime 是开源</a>的，所以我们可以一探究竟。</p>

<p>一个非原子的 setter 看起来是这个样子的：</p>

<pre><code>- (void)setUserName:(NSString *)userName {
      if (userName != _userName) {
          [userName retain];
          [_userName release];
          _userName = userName;
      }
}
</code></pre>

<p>这是一个手动 retain/release 的版本，ARC 生成的代码和这个看起来也是类似的。当我们看这段代码时，显而易见要是 <code>setUserName:</code> 被并发调用的话会造成麻烦。我们可能会释放 <code>_userName</code> 两次，这回使内存错误，并且导致难以发现的 bug。</p>

<p>对于任何没有手动实现的属性，编译器都会生成一个 <a href="https://github.com/opensource-apple/objc4/blob/master/runtime/Accessors.subproj/objc-accessors.mm#L127"><code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code></a> 的调用。在我们的例子中，这个调用的参数是这样的：</p>

<pre><code>objc_setProperty_non_gc(self, _cmd, 
  (ptrdiff_t)(&amp;_userName) - (ptrdiff_t)(self), userName, NO, NO);`
</code></pre>

<p><code>ptrdiff_t</code> 可能会吓到你，但是实际上这就是一个简单的指针算术，因为其实 Objective-C 的类仅仅只是 C 结构体而已。</p>

<p><code>objc_setProperty</code> 调用的是如下方法：</p>

<pre><code>static inline void reallySetProperty(id self, SEL _cmd, id newValue, 
  ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy) 
{
    id oldValue;
    id *slot = (id*) ((char*)self + offset);

    if (copy) {
        newValue = [newValue copyWithZone:NULL];
    } else if (mutableCopy) {
        newValue = [newValue mutableCopyWithZone:NULL];
    } else {
        if (*slot == newValue) return;
        newValue = objc_retain(newValue);
    }

    if (!atomic) {
        oldValue = *slot;
        *slot = newValue;
    } else {
        spin_lock_t *slotlock = &amp;PropertyLocks[GOODHASH(slot)];
        _spin_lock(slotlock);
        oldValue = *slot;
        *slot = newValue;        
        _spin_unlock(slotlock);
    }

    objc_release(oldValue);
}
</code></pre>

<p>除开方法名字很有趣以外，其实方法实际做的事情非常直接，它使用了在 <code>PropertyLocks</code> 中的 128 个自旋锁中的 1 个来给操作上锁。这是一种务实和快速的方式，最糟糕的情况下，如果遇到了哈希碰撞，那么 setter 需要等待另一个和它无关的 setter 完成之后再进行工作。</p>

<p>虽然这些方法没有定义在任何公开的头文件中，但我们还是可用手动调用他们。我不是说这是一个好的做法，但是知道这个还是蛮有趣的，而且如果你想要同时实现原子属性<strong>和</strong>自定义的 setter 的话，这个技巧就非常有用了。</p>

<pre><code>// 手动声明运行时的方法
extern void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, 
  id newValue, BOOL atomic, BOOL shouldCopy);
extern id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, 
  BOOL atomic);

#define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd, 
  (ptrdiff_t)(&amp;dest) - (ptrdiff_t)(self), src, YES, NO) 
#define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd, 
  (ptrdiff_t)(&amp;src) - (ptrdiff_t)(self), YES)
</code></pre>

<p><a href="https://gist.github.com/steipete/5928690">参考这个 gist</a> 来获取包含处理结构体的完整的代码，但是我们其实并不推荐使用它。</p>

<h4 id="toc_6">为何不用 @synchronized ？</h4>

<p>你也许会想问为什么苹果不用 <code>@synchronized(self)</code> 这样一个已经存在的运行时特性来锁定属？？你可以看看<a href="https://github.com/opensource-apple/objc4/blob/master/runtime/objc-sync.mm#L291">这里的源码</a>，就会发现其实发生了很多的事情。Apple 使用了<a href="http://googlemac.blogspot.co.at/2006/10/synchronized-swimming.html">最多三个加/解锁序列</a>，还有一部分原因是他们也添加了<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3">异常开解(exception unwinding)</a>机制。相比于更快的自旋锁方式，这种实现要慢得多。由于设置某个属性一般来说会相当快，因此自旋锁更适合用来完成这项工作。<code>@synchonized(self)</code> 更适合使用在你<br/>
需要确保在发生错误时代码不会死锁，而是抛出异常的时候。</p>

<h3 id="toc_7">你自己的类</h3>

<p>单独使用原子属性并不会使你的类变成线程安全。它不能保护你应用的逻辑，只能保护你免于在 setter 中遭遇到<a href="http://objccn.io/issue-3-1">竞态条件</a>的困扰。看看下面的代码片段：</p>

<pre><code>if (self.contents) {
    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, 
      (__bridge CFStringRef)self.contents, NULL);
    // 渲染字符串
}
</code></pre>

<p>我之前在 <a href="http://pspdfkit.com">PSPDFKit</a> 中就犯了这个错误。时不时地应用就会因为 <code>contents</code> 属性在通过检查之后却又被设成了 nil 而导致 EXC<u>BAD</u>ACCESS 崩溃。捕获这个变量就可以简单修复这个问题；</p>

<pre><code>NSString *contents = self.contents;
if (contents) {
    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, 
      (__bridge CFStringRef)contents, NULL);
    // 渲染字符串
}
</code></pre>

<p>在这里这样就能解决问题，但是大多数情况下不会这么简单。想象一下我们还有一个 <code>textColor</code> 的属性，我们在一个线程中将两个属性都做了改变。我们的渲染线程有可能使用了新的内容，但是依旧保持了旧的颜色，于是我们得到了一组奇怪的组合。这其实也是为什么 Core Data 要将 model 对象都绑定在一个线程或者队列中的原因。</p>

<p>对于这个问题，其实没有万用解法。使用 <a href="http://www.cocoawithlove.com/2008/04/value-of-immutable-values.html">不可变模型</a>是一个可能的方案，但是它也有自己的问题。另一种途径是限制对存在在主线程或者某个特定队列中的既存对象的改变，而是先进行一次拷贝之后再在工作线程中使用。对于这个问题的更多对应方法，我推荐阅读 Jonathan Sterling 的关于 <a href="http://www.jonmsterling.com/posts/2012-12-27-a-pattern-for-immutability.html">Objective-C 中轻量化不可变对象</a>的文章。</p>

<p>一个简单的解决办法是使用 <code>@synchronize</code>。其他的方式都非常非常可能使你误入歧途，已经有太多聪明人在这种尝试上一次又一次地以失败告终。</p>

<h4 id="toc_8">可行的线程安全设计</h4>

<p>在尝试写一些线程安全的东西之前，应该先想清楚是不是真的需要。确保你要做的事情不会是过早优化。如果要写的东西是一个类似配置类 (configuration class) 的话，去考虑线程安全这种事情就毫无意义了。更正确的做法是扔一个断言上去，以保证它被正确地使用：</p>

<pre><code>void PSPDFAssertIfNotMainThread(void) {
    NSAssert(NSThread.isMainThread, 
      @&quot;Error: Method needs to be called on the main thread. %@&quot;, 
      [NSThread callStackSymbols]);
}
</code></pre>

<p>对于那些肯定应该线程安全的代码（一个好例子是负责缓存的类）来说，一个不错的设计是使用并发的 <code>dispatch_queue</code> 作为读/写锁，并且确保只锁着那些真的需要被锁住的部分，以此来最大化性能。一旦你使用多个队列来给不同的部分上锁的话，整件事情很快就会变得难以控制了。</p>

<p>于是你也可以重新组织你的代码，这样某些特定的锁就不再需要了。看看下面这段实现了一种多委托的代码（其实在大多数情况下，用 NSNotifications 会更好，但是其实也还是有<a href="https://code.google.com/r/riky-adsfasfasf/source/browse/Utilities/GCDMulticastDelegate.h">多委托的实用例子</a>）的</p>

<pre><code>// 头文件
@property (nonatomic, strong) NSMutableSet *delegates;

// init方法中
_delegateQueue = dispatch_queue_create(&quot;com.PSPDFKit.cacheDelegateQueue&quot;, 
  DISPATCH_QUEUE_CONCURRENT);

- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {
    dispatch_barrier_async(_delegateQueue, ^{
        [self.delegates addObject:delegate];
    });
}

- (void)removeAllDelegates {
    dispatch_barrier_async(_delegateQueue, ^{
        self.delegates removeAllObjects];
    });
}

- (void)callDelegateForX {
    dispatch_sync(_delegateQueue, ^{
        [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {
            // 调用delegate
        }];
    });
}
</code></pre>

<p>除非 <code>addDelegate:</code> 或者 <code>removeDelegate:</code> 每秒要被调用上千次，否则我们可以使用一个相对简洁的实现方式：</p>

<pre><code>// 头文件
@property (atomic, copy) NSSet *delegates;

- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {
    @synchronized(self) {
        self.delegates = [self.delegates setByAddingObject:delegate];
    }
}

- (void)removeAllDelegates {
    @synchronized(self) {
        self.delegates = nil;
    }
}

- (void)callDelegateForX {
    [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {
        // 调用delegate
    }];
}
</code></pre>

<p>就算这样，这个例子还是有点理想化，因为其他人可以把变更限制在主线程中。但是对于很多数据结构，可以在可变更操作的方法中创建不可变的拷贝，这样整体的代码逻辑上就不再需要处理过多的锁了。</p>

<h2 id="toc_9">GCD 的陷阱</h2>

<p>对于大多数上锁的需求来说，GCD 就足够好了。它简单迅速，并且基于 block 的 API 使得粗心大意造成非平衡锁操作的概率下降了不少。然后，GCD 中还是有不少陷阱，我们在这里探索一下其中的一些。</p>

<h3 id="toc_10">将 GCD 当作递归锁使用</h3>

<p>GCD 是一个对共享资源的访问进行串行化的队列。这个特性可以被当作锁来使用，但实际上它和 <code>@synchronized</code> 有很大区别。 GCD队列并非是<a href="http://zh.wikipedia.org/w/index.php?title=%E5%8F%AF%E9%87%8D%E5%85%A5&amp;variant=zh-cn">可重入</a>的，因为这将破坏队列的特性。很多有试图使用 <code>dispatch_get_current_queue()</code> 来绕开这个限制，但是这是一个<a href="https://gist.github.com/steipete/3713233">糟糕的做法</a>，Apple 在 iOS6 中将这个方法标记为废弃，自然也是有自己的理由。</p>

<pre><code>// This is a bad idea.
inline void pst_dispatch_sync_reentrant(dispatch_queue_t queue, 
  dispatch_block_t block) 
{
    dispatch_get_current_queue() == queue ? block() 
                                          : dispatch_sync(queue, block);
}
</code></pre>

<p>对当前的队列进行测试也许在简单情况下可以行得通，但是一旦你的代码变得复杂一些，并且你可能有多个队列在同时被锁住的情况下，这种方法很快就悲剧了。一旦这种情况发生，几乎可以肯定的是你会遇到<a href="http://objccn.io/issue-2-1/#dead_locks">死锁</a>。当然，你可以使用 <code>dispatch_get_specific()</code>，这将截断整个队列结构，从而对某个特定的队列进行测试。要这么做的话，你还得为了在队列中附加标志队列的元数据，而去写自定义的队列构造函数。嘛，最好别这么做。其实在实用中，使用 <code>NSRecursiveLock</code> 会是一个更好的选择。</p>

<h3 id="toc_11">用 dispatch_async 修复时序问题</h3>

<p>在使用 UIKit 的时候遇到了一些时序上的麻烦？很多时候，这样进行“修正”看来非常完美：</p>

<pre><code>dispatch_async(dispatch_get_main_queue(), ^{
    // Some UIKit call that had timing issues but works fine 
    // in the next runloop.
    [self updatePopoverSize];
});
</code></pre>

<p>千万别这么做！相信我，这种做法将会在之后你的 app 规模大一些的时候让你找不着北。这种代码非常难以调试，并且你很快就会陷入用更多的 dispatch 来修复所谓的莫名其妙的<q>时序问题</q>。审视你的代码，并且找到合适的地方来进行调用（比如在 viewWillAppear 里调用，而不是 viewDidLoad 之类的）才是解决这个问题的正确做法。我在自己的代码中也还留有一些这样的 hack，但是我为它们基本都做了正确的文档工作，并且对应的 issue 也被一一记录过。</p>

<p>记住这不是真正的 GCD 特性，而只是一个在 GCD 下很容易实现的常见反面模式。事实上你可以使用 <code>performSelector:afterDelay:</code> 方法来实现同样的操作，其中 delay 是在对应时间后的 runloop。</p>

<h3 id="toc_12">在性能关键的代码中混用 dispatch<u>sync 和 dispatch</u>async</h3>

<p>这个问题我花了好久来研究。在 <a href="http://pspdfkit.com">PSPDFKit</a> 中有一个使用了 LRU（最久未使用）算法列表的缓存类来记录对图片的访问。当你在页面中滚动时，这个方法将被调用<strong>非常多次</strong>。最初的实现使用了 <code>dispatch_sync</code> 来进行实际有效的访问，使用 <code>dispatch_async</code> 来更新 LRU 列表的位置。这导致了帧数远低于原来的 60 帧的目标。</p>

<p>当你的 app 中的其他运行的代码阻挡了 GCD 线程的时候，dispatch manager 需要花时间去寻找能够执行 dispatch_async 代码的线程，这有时候会花费一点时间。在找到合适的执行线程之前，你的同步调用就会被 block 住了。其实在这个例子中，异步情况的执行顺序并不是很重要，但没有能将这件事情告诉 GCD 的好办法。读/写锁这里并不能起到什么作用，因为在异步操作中基本上一定会需要进行顺序写入，而在此过程中读操作将被阻塞住。如果误用了 <code>dispatch_async</code> 代价将会是非常惨重的。在将它用作锁的时候，一定要非常小心。</p>

<h3 id="toc_13">使用 dispatch_async 来派发内存敏感的操作</h3>

<p>我们已经谈论了很多关于 NSOperations 的话题了，一般情况下，使用这个更高层级的 API 会是一个好主意。当你要处理一段内存敏感的操作的代码块时，这个优势尤为突出、</p>

<p>在 PSPDFKit 的老版本中，我用了 GCD 队列来将已缓存的 JPG 图片写到磁盘中。当 retina 的 iPad 问世之后，这个操作出现了问题。ß因为分辨率翻倍了，相比渲染这张图片，将它编码花费的时间要长得多。所以，操作堆积在了队列中，当系统繁忙时，甚至有可能因为内存耗尽而崩溃。</p>

<p>我们没有办法追踪有多少个操作在队列中等待运行（除非你手动添加了追踪这个的代码），我们也没有现成的方法来在接收到低内存通告的时候来取消操作、这时候，切换到 NSOperations 可以使代码变得容易调试得多，并且允许我们在不添加手动管理的代码的情况下，做到对操作的追踪和取消。</p>

<p>当然也有一些不好的地方，比如你不能在你的 <code>NSOperationQueue</code> 中设置目标队列（就像 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 之于 缓速 I/O 那样）。但这只是为了可调试性的一点小代价，而事实上这也帮助你避免遇到<a href="http://objccn.io/issue-2-1/#priority_inversion">优先级反转</a>的问题。我甚至不推荐直接使用已经包装好的 <code>NSBlockOperation</code> 的 API，而是建议使用一个 NSOperation 的真正的子类，包括实现其 description。诚然，这样做工作量会大一些，但是能输出所有运行中/准备运行的操作是及其有用的。</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/thread-safe-class-design.html">Thread-Safe Class Design</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试并发程序]]></title>
    <link href="http://coderforart.com/objccndemo/14415912472718.html"/>
    <updated>2015-09-07T10:00:47+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415912472718.html</id>
    <content type="html"><![CDATA[
<p>在开发高质量应用程序的过程中，测试是一个很重要的工具。在过去，当并发并不是应用程序架构中重要组成部分的时候，测试就相对简单。随着这几年的发展，使用并发设计模式已愈发重要了，想要测试好并发应用程序，已成了一个不小的挑战。</p>

<p>测试并发代码最主要的困难在于程序或信息流不是反映在调用堆栈上。函数并不会立即返回结果给调用者，而是通过回调函数，Block，通知或者一些类似的机制，这些使得测试变得更加困难。</p>

<p>然而，测试异步代码也会带来一些好处，比如可以揭露较差的程序设计，让最终的实现变得更加清晰。</p>

<h2 id="toc_0">异步测试的问题</h2>

<p>首先，我们来看一个简单的同步单元测试例子。两个数求和的方法：</p>

<pre><code>+ (int)add:(int)a to:(int)b {
    return a + b;
}
</code></pre>

<p>测试这个方法很简单，只需要比较该方法返回的值是否与期望的值相同，如果不相同，则测试失败。</p>

<pre><code>- (void)testAddition {
    int result = [Calculator add:2 to:2];
    STAssertEquals(result, 4, nil);
}
</code></pre>

<p>接下来，我们利用 Block 将该方法改成异步返回结果。为了模拟测试失败，我们会在方法实现中故意添加一个 bug。</p>

<pre><code>+ (int)add:(int)a to:(int)b block:(void(^)(int))block {
    [[NSOperationQueue mainQueue] addOperationWithBlock:^{
        block(a - b); // 带有bug的实现
    }];
}
</code></pre>

<p>显然这是一个人为的例子，但是它却真实的反应了在编程中可能经常遇到的问题，只不过实际过程更复杂罢了。</p>

<p>测试上面的方法最简单的做法就是把断言放到 Block 中。尽管我们的方法实现中存在 bug，但是这种测试永远不会失败的:</p>

<pre><code>// 千万不要使用这些代码！
- (void)testAdditionAsync {
    [Calculator add:2 to:2 block:^(int result) {
        STAssertEquals(result, 4, nil); // 永远不会被调用到
    }];
}
</code></pre>

<p>这里的断言为什么没失败呢?</p>

<h2 id="toc_1">关于SenTestingKit</h2>

<p>XCode4 所使用的测试框架是基于 <a href="http://www.sente.ch/software/ocunit/" title="OCUnit">OCUnit</a>。为了理解之前所提到的异步测试问题，我们需要了解一下测试包中的各个部分之间的执行顺序。下图展示了一个简化的流程。</p>

<p><img src="http://img.objccn.io/issue-2/SenTestingKit-call-stack.png" style="width:698px" alt="SenTestingKit call stack"/></p>

<p>在测试框架在主 run loop 开始运行之后，主要执行了以下几个步骤：</p>

<ol>
<li>配置一个包含所有相关测试的测试包 (比如可以在工程的 scheme 中配置)。</li>
<li>运行测试包，内部会调用所有以 <u>test</u> 开头测试用例的方法。运行结束后会返回一个包含单个测试结果的对象。</li>
<li>调用 <code>exit()</code> 退出测试。</li>
</ol>

<p>这其中我们最感兴趣的是单个测试是如何被调用的。在异步测试中，包含断言的 Block 会被加到主 run loop。当所有的测试执行完毕后，测试框架就会退出，而 block 却从来没有被执行，因此不会引起测试失败。</p>

<p>当然我们有很多种方发来解决这个问题。但是所有的方法都必须在主 run loop 中运行，而且在测试方法返回和比较结果之前需要处理已入队所有操作。</p>

<p><a href="https://github.com/allending/Kiwi" title="Kiwi">Kiwi</a> 使用探测轮询 (probe poller)，它可以在测试方法中被调用。 <a href="https://github.com/gabriel/gh-unit/" title="GHUnit">GHUnit</a> 编写了一个单独的测试类，它必须在测试的方法内初始化，并在结束时接收一个通知。以上两种方式都是通过编写相应的代码来确保异步测试方法在测试结束之前都不会返回。</p>

<h2 id="toc_2">SenTestingKit的异步扩展</h2>

<p>我们对这个问题的解决方案是对 SenTestingKit 添加一个<a href="https://github.com/nxtbgthng/SenTestingKitAsync" title="SenTestingKitAsync">扩展</a>，它在栈上使用同步执行，并把每个部分加入到主队列上。正如下图所见，在验证整个测试框架结果之前，报告异步测试成功或者失败的 Block 就被加入到队列。这种执行顺序允许我们开启一个测试并等待它的测试结果。</p>

<p><img src="http://img.objccn.io/issue-2/SenTestingKitAsync-call-stack.png" style="width:531px" alt="SenTestingKitAsync call stack"/></p>

<p>如果测试方法以 <strong>Async</strong> 结尾，框架就会认为该方法是异步测试。此外，在异步测试中，我们必须手动地报告测试成功，同时为了防止 Block 永远不会被调用，我们还需添加了一个超时方法。之前的错误的测试方法修改后如下所示：</p>

<pre><code>- (void)testAdditionAsync {
    [Calculator add:2 to:2 block^(int result) {
        STAssertEquals(result, 4, nil);
        STSuccess(); // 通过调用这个宏来判断是否测试成功
    }];
    STFailAfter(2.0, @&quot;Timeout&quot;);
}
</code></pre>

<h2 id="toc_3">设计异步测试</h2>

<p>就像同步测试一样，异步测试也应该比被测试的功能简单许多。复杂的测试并不会改进代码的质量，反而会给测试本身带来更多的 Bug。在以测试驱动开发的情况下，简单的测试会让我们对组件，接口以及架构的行为有更清醒的认识。</p>

<h3 id="toc_4">示例工程</h3>

<p>为了运用到实际中，我们创建了一个示例框架：<a href="https://github.com/objcio/issue-2-async-testing" title="Pinacoteca Core: Cocoa Framework for an Imaginary Image Service">PinacotecaCore</a>，它从一个虚拟的服务器获取图像信息。框架中包含一个资源管理器，它对外提供一个可以根据图像 Id 获取图像对象的接口。该接口的工作原理是资源管理器从虚拟服务器获取图片对象的信息，并更新到数据库。</p>

<p>虽然这个示例框架只是为了演示，但在我们自己开发的许多应用中也使用了这种模式。</p>

<p><img src="http://img.objccn.io/issue-2/PinacotecaCore.png" style="width:699px" alt="PinacotecaCore architecture"/></p>

<p>从上图我们可以知道，示例框架有三个组件我们需要测试：</p>

<ol>
<li>模型层</li>
<li>模拟服务器请求的服务器接口控制器（API Controller）</li>
<li>管理 core data 堆栈以及连接模型层和服务接口控制器的资源管理器</li>
</ol>

<h3 id="toc_5">模型层</h3>

<p>测试应该尽量使用同步的方式进行，而模型层就是一个很好的实例。只要不同的被托管对象上下文 (managed object contexts) 之间没有复杂的依赖关系，测试用例都应该根据上下文在主线程上设置它自己的 core data 堆栈，并在其中执行各自的操作。</p>

<p>在这个<a href="https://github.com/objcio/issue-2-async-testing/blob/master/PinacotecaCore/PinacotecaCoreTests/PCModelLayerTests.m" title="Pinacoteca Core Model Layer Tests">测试实例</a>中，我们就是在 <code>setUp</code> 方法中设置 core data 堆栈，然后检查 <code>PCImage</code> 实体的描述是否存在，如果不存在就构造一个，并更新它的值。当然这和异步测试没有关系，我们就不深入细说了。</p>

<h3 id="toc_6">服务器接口控制器</h3>

<p>框架中的第二个组件就是服务器接口控制器。它主要处理服务器请求以及服务器 API 到模型的映射关系。让我们来看一下下面这个方法：</p>

<pre><code>- [PCServerAPIController fetchImageWithId:queue:completionHandler:]
</code></pre>

<p>调用它需要三个形参：一个图片对象 Id，所在的执行队列以及一个完成后的回调方法。</p>

<p>因为服务器根本不存在，一个比较好的做法就是伪造一个代理服务器，正好 <a href="https://github.com/AliSoftware/OHHTTPStubs" title="OHHTTPStubs">OHHTTPStubs</a> 可以解决这个问题。在它的最新版本中，可以在示例的请求响应中包含一个 bundle，发送给客户端。</p>

<p>为了能 stub 请求，OHHTTPStubs 需要在测试类初始化时或者 setUp 方法中进行配置。首先，我们需要加载一个包含请求响应对象（response）的 bundle：</p>

<pre><code>NSURL *url = [[NSBundle bundleForClass:[self class]]
                        URLForResource:@&quot;ServerAPIResponses&quot;
                         withExtension:@&quot;bundle&quot;];

NSBundle *bundle = [NSBundle url];
</code></pre>

<p>然后我们从 bundle 加载 response 对象，作为请求的响应值：</p>

<pre><code>OHHTTPStubsResponse *response;
response = [OHHTTPStubsResponse responseNamed:@&quot;images/123&quot;
                                   fromBundle:responsesBundle
                                 responseTime:0.1];

[OHHTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {
    return YES /* 如果所返回的request是我们所期望的，就返回YES */;
} withStubResponse:^OHHTTPStubsResponse *(NSURLRequest *request) {
    return response;
}];
</code></pre>

<p>通过如上的设置之后，简化版的<a href="https://github.com/objcio/issue-2-async-testing/blob/master/PinacotecaCore/PinacotecaCoreTests/PCServerAPIControllerTests.m" title="Pinacoteca Core Server API Controller Tests">测试服务器接口控制器</a>如下：</p>

<pre><code>- (void)testFetchImageAsync
{
    [self.server
        fetchImageWithId:@&quot;123&quot;
                   queue:[NSOperationQueue mainQueue]
       completionHandler:^(id imageData, NSError *error) {
          STAssertEqualObjects([NSOperationQueue currentQueue], queue, nil);
          STAssertNil(error, [error localizedDescription]);
          STAssertTrue([imageData isKindOfClass:[NSDictionary class]], nil);

          // 检查返回的字典中的值.

          STSuccess();
       }];
    STFailAfter(2.0, nil);    
}
</code></pre>

<h3 id="toc_7">资源管理器</h3>

<p>最后一个部分是资源管理器，它不但把服务器接口控制器和模型层联系起来, 还管理着 core data 堆栈。下面我们想测试获取一个图片对象的方法：</p>

<pre><code>-[PCResourceManager imageWithId:usingManagedObjectContext:queue:updateHandler:]
</code></pre>

<p>该方法根据 id 返回一个图片对象。如果图片在数据库中不存在，它会创建一个只包含 id 的新对象，然后通过服务器接口控制器获取图片对象的详细信息。</p>

<p>由于资源管理器的测试不应该依赖于服务器接口控制器，所以我们可以用 <a href="http://ocmock.org" title="OCMock">OCMock</a> 来模拟，如果要做方法的部分 stub，它是一个理想的框架。如以下的 <a href="https://github.com/objcio/issue-2-async-testing/blob/master/PinacotecaCore/PinacotecaCoreTests/PCResourceManagerTests.m" title="Pinacoteca Core Resource Manager Tests">资源管理器测试</a> :</p>

<pre><code>OCMockObject *mo;
mo = [OCMockObject partialMockForObject:self.resourceManager.server];

id exp = [[serverMock expect] 
             andCall:@selector(fetchImageWithId:queue:completionHandler:)
            onObject:self];
[exp fetchImageWithId:OCMOCK_ANY queue:OCMOCK_ANY completionHandler:OCMOCK_ANY];
</code></pre>

<p>上面的代码实际上它并没有真正调用服务器接口控制器的方法，而是调用我们写在测试类中的方法。</p>

<p>用上面的做法，对资源管理的测试就变得很直观。当我们调用资源管理器获取资源时，实际上调用的是我们模拟的服务器接口控制器的方法。这样我们也能检查调用服务器接口控制器时参数是否正确。在调用了获取图像对象的方法后，资源管理器会更新模型，然后调用验证测试成功与否的宏。</p>

<pre><code>- (void)testGetImageAsync
{
    NSManagedObjectContext *ctx = self.resourceManager.mainManagedObjectContext;
    __block PCImage *img;
    img = [self.resourceManager imageWithId:@&quot;123&quot;
                  usingManagedObjectContext:ctx
                                      queue:[NSOperationQueue mainQueue]
                              updateHandler:^(NSError *error) {
                                       // 检查error是否为空以及image是否已经被更新 
                                       STSuccess();
                                   }];    
    STAssertNotNil(img, nil);
    STFailAfter(2.0, @&quot;Timeout&quot;);
}
</code></pre>

<h2 id="toc_8">总结</h2>

<p>刚开始时候，使用并发设计模式测试应用程序是具有一定的挑战性，但是一旦你理解了它们的不同，并建立最佳实践，一切都会变得简单而有趣。</p>

<p>在 <a href="http://nxtbgthng.com" title="nxtbgthng">nxtbgthng</a> 项目中，我们用 <a href="https://github.com/nxtbgthng/SenTestingKitAsync" title="SenTestingKitAsync">SenTestingKitAsync</a> 框架来测试。但是像 <a href="https://github.com/allending/Kiwi" title="Kiwi">Kiwi</a> 和 <a href="https://github.com/gabriel/gh-unit/" title="GHUnit">GHUnit</a>  也都是不错的异步测试框架。建议你都可以尝试下，然后找到合适自己的测试工具并开始使用它。</p>

<hr/>

<p><a href="http://objccn.io/issue-2">话题 #2 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-2/async-testing.html">Testing Concurrent Applications</a></p>

<p>译文 <a href="http://blog.jobbole.com/53377/">iOS系列译文：测试并发程序</a></p>

<p>精细校对 <a href="https://github.com/xinjixjz">xinjixjz</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卷首语]]></title>
    <link href="http://coderforart.com/objccndemo/14415913597229.html"/>
    <updated>2015-09-07T10:02:39+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415913597229.html</id>
    <content type="html"><![CDATA[
<p>欢迎来到 objc.io 的第三期！</p>

<p>这一期都是关于视图层的。当然视图层有很多方面，我们需要把它们缩小到几个话题中 -- 我希望这些能激起大多数开发者的兴趣，虽然许多其他有趣的东西需要暂时放在一旁 (可能在其他话题中讲)</p>

<p>首先，我们谈到一些关于像素如何绘制到屏幕上的。除了涵盖我们日常使用的框架外，这还能帮助应用开发者在遇到绘图性能问题时做出更好的选择。同样的， <a href="http://stablekernel.com">Joe Conway</a> -  <a href="http://www.bignerdranch.com/book/ios_programming_the_big_nerd_ranch_guide">Big Nerd Ranch’s iOS Programming Guide</a> 的作者，对 scroll view 如何利用 UIView 的体系架构完成他们的工作进行进一步了解。</p>

<p>为了平衡，我们转入一系列非常实用的视图层详情：创建自定义 collection view 布局(非常感谢 <a href="http://oleb.net">Ole Begemann!</a>)，创建自定义控制器、先进的自动布局的提示和技巧。</p>

<p>一如既往的，我们很高兴能听到您的<a href="mailTo:mail@objc.io">反馈</a>，对以后话题的建议，或者你愿意为 objc.io 贡献文章(多亏我们的编辑 <a href="https://twitter.com/deutschbitte">Natalye</a>，你不必须是 native speaker)。</p>

<p>从柏林发来最诚挚的祝福!</p>

<p>Chris, Daniel, and Florian.</p>

<hr/>

<p><a href="http://objccn.io/issue-3">话题 #3 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-3/editorial.html">Editorial Issue #3</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[绘制像素到屏幕上]]></title>
    <link href="http://coderforart.com/objccndemo/14415913597293.html"/>
    <updated>2015-09-07T10:02:39+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415913597293.html</id>
    <content type="html"><![CDATA[
<p>一个像素是如何绘制到屏幕上去的？有很多种方式将一些东西映射到显示屏上，他们需要调用不同的框架、许多功能和方法的结合体。这里我们大概的看一下屏幕之后发生的事情。当你想要弄清楚什么时候、怎么去查明并解决问题时，我希望这篇文章能帮助你理解哪一个 API 可以更好的帮你解决问题。我们将聚焦于 iOS，然而我讨论的大多数问题也同样适用于 OS X。</p>

<h2 id="toc_0">图形堆栈</h2>

<p>当像素映射到屏幕上的时候，后台发生了很多事情。但一旦他们显示到屏幕上，每一个像素均由三个颜色组件构成：红，绿，蓝。三个独立的颜色单元会根据给定的颜色显示到一个像素上。在 iPhone5 的<a href="https://zh.wikipedia.org/wiki/%E6%A9%AB%E5%90%91%E9%9B%BB%E5%A0%B4%E6%95%88%E6%87%89%E9%A1%AF%E7%A4%BA%E6%8A%80%E8%A1%93">液晶显示器</a>上有1,136×640=727,040个像素，因此有2,181,120个颜色单元。在15寸视网膜屏的 MacBook Pro 上，这一数字达到15.5百万以上。所有的图形堆栈一起工作以确保每次正确的显示。当你滚动整个屏幕的时候，数以百万计的颜色单元必须以每秒60次的速度刷新，这是一个很大的工作量。</p>

<h2 id="toc_1">软件组成</h2>

<p>从简单的角度来看，软件堆栈看起来有点像这样：</p>

<p><img src="http://img.objccn.io/issue-3/pixels-software-stack.png" alt="软件堆栈"/></p>

<p>Display 的上一层便是图形处理单元 GPU，GPU 是一个专门为图形高迸发计算而量身定做的处理单元。这也是为什么它能同时更新所有的像素，并呈现到显示器上。它迸发的本性让它能高效的将不同纹理合成起来。我们将有一小块内容来更详细的讨论图形合成。关键的是，GPU 是非常专业的，因此在某些工作上非常高效。比如，GPU 非常快，并且比 CPU 使用更少的电来完成工作。通常 CPU 都有一个普遍的目的，它可以做很多不同的事情，但是合成图像在 CPU 上却显得比较慢。</p>

<p>GPU Driver 是直接和 GPU 交流的代码块。不同的GPU是不同的性能怪兽，但是驱动使他们在下一个层级上显示的更为统一，典型的下一层级有 OpenGL/OpenGL ES.</p>

<p>OpenGL(<a href="http://zh.wikipedia.org/wiki/OpenGL">Open Graphics Library</a>) 是一个提供了 2D 和 3D 图形渲染的 API。GPU 是一块非常特殊的硬件，OpenGL  和 GPU 密切的工作以提高GPU的能力，并实现硬件加速渲染。对大多数人来说，OpenGL 看起来非常底层，但是当它在1992年第一次发布的时候(20多年前的事了)是第一个和图形硬件(GPU)交流的标准化方式，这是一个重大的飞跃，程序员不再需要为每个GPU重写他们的应用了。</p>

<p>OpenGL 之上扩展出很多东西。在 iOS 上，几乎所有的东西都是通过 Core Animation 绘制出来，然而在 OS X 上，绕过 Core Animation 直接使用 Core Graphics 绘制的情况并不少见。对于一些专门的应用，尤其是游戏，程序可能直接和 OpenGL/OpenGL ES 交流。事情变得使人更加困惑，因为 Core Animation 使用 Core Graphics 来做一些渲染。像 AVFoundation，Core Image 框架，和其他一些混合的入口。</p>

<p>要记住一件事情，GPU 是一个非常强大的图形硬件，并且在显示像素方面起着核心作用。它连接到 CPU。从硬件上讲两者之间存在某种类型的<a href="https://zh.wikipedia.org/wiki/I/O%E6%80%BB%E7%BA%BF">总线</a>，并且有像 OpenGL，Core Animation 和 Core Graphics 这样的框架来在 GPU 和 CPU 之间精心安排数据的传输。为了将像素显示到屏幕上，一些处理将在 CPU 上进行。然后数据将会传送到 GPU，这也需要做一些相应的操作，最终像素显示到屏幕上。</p>

<p>这个过程的每一部分都有各自的挑战，并且许多时候需要做出折中的选择。</p>

<h2 id="toc_2">硬件参与者</h2>

<p><img src="http://img.objccn.io/issue-3/pixels%2C%20hardware.png" alt="挑战"/></p>

<p>正如上面这张简单的图片显示那些挑战：GPU 需要将每一个 frame 的纹理(位图)合成在一起(一秒60次)。每一个纹理会占用 VRAM(video RAM)，所以需要给 GPU 同时保持纹理的数量做一个限制。GPU 在合成方面非常高效，但是某些合成任务却比其他更复杂，并且 GPU在 16.7ms(1/60s)内能做的工作也是有限的。</p>

<p>下一个挑战就是将数据传输到 GPU 上。为了让 GPU 访问数据，需要将数据从 RAM 移动到 VRAM 上。这就是提及到的上传数据到 GPU。这看起来貌似微不足道，但是一些大型的纹理却会非常耗时。</p>

<p>最终，CPU 开始运行你的程序。你可能会让 CPU 从 bundle 加载一张 PNG 的图片并且解压它。这所有的事情都在 CPU 上进行。然后当你需要显示解压缩后的图片时，它需要以某种方式上传到 GPU。一些看似平凡的，比如显示文本，对 CPU 来说却是一件非常复杂的事情，这会促使 Core Text 和 Core Graphics 框架更紧密的集成来根据文本生成一个位图。一旦准备好，它将会被作为一个纹理上传到 GPU 并准备显示出来。当你滚动或者在屏幕上移动文本时，不管怎么样，同样的纹理能够被复用，CPU 只需简单的告诉 GPU 新的位置就行了,所以 GPU 就可以重用存在的纹理了。CPU 并不需要重新渲染文本，并且位图也不需要重新上传到 GPU。</p>

<p>这张图涉及到一些错综复杂的方面，我们将会把这些方面提取出来并深一步了解。</p>

<h2 id="toc_3">合成</h2>

<p>在图形世界中，合成是一个描述不同位图如何放到一起来创建你最终在屏幕上看到图像的过程。在许多方面显得显而易见，而让人忘了背后错综复杂的计算。</p>

<p>让我们忽略一些难懂的事例并且假定屏幕上一切事物皆纹理。一个纹理就是一个包含 RGBA 值的长方形，比如，每一个像素里面都包含红、绿、蓝和透明度的值。在 Core Animation 世界中这就相当于一个 CALayer。</p>

<p>在这个简化的设置中，每一个 layer 是一个纹理，所有的纹理都以某种方式堆叠在彼此的顶部。对于屏幕上的每一个像素，GPU 需要算出怎么混合这些纹理来得到像素 RGB 的值。这就是合成大概的意思。</p>

<p>如果我们所拥有的是一个和屏幕大小一样并且和屏幕像素对齐的单一纹理，那么屏幕上每一个像素相当于纹理中的一个像素，纹理的最后一个像素也就是屏幕的最后一个像素。</p>

<p>如果我们有第二个纹理放在第一个纹理之上，然后GPU将会把第二个纹理合成到第一个纹理中。有很多种不同的合成方法，但是如果我们假定两个纹理的像素对齐，并且使用正常的混合模式，我们便可以用下面这个公式来计算每一个像素：</p>

<pre><code>R = S + D * ( 1 – Sa )
</code></pre>

<p>结果的颜色是源色彩(顶端纹理)+目标颜色(低一层的纹理)*(1-源颜色的透明度)。在这个公式中所有的颜色都假定已经预先乘以了他们的透明度。</p>

<p>显然相当多的事情在这发生了。让我们进行第二个假定，两个纹理都完全不透明，比如 alpha=1.如果目标纹理(低一层的纹理)是蓝色(RGB=0,0,1)，并且源纹理(顶层的纹理)颜色是红色(RGB=1,0,0)，因为 Sa 为1，所以结果为：</p>

<pre><code>R = S
</code></pre>

<p>结果是源颜色的红色。这正是我们所期待的(红色覆盖了蓝色)。</p>

<p>如果源颜色层为50%的透明，比如 alpha=0.5，既然 alpha 组成部分需要预先乘进 RGB 的值中，那么 S 的 RGB 值为(0.5, 0, 0)，公式看起来便会像这样:</p>

<pre><code>                       0.5   0               0.5
R = S + D * (1 - Sa) = 0   + 0 * (1 - 0.5) = 0
                       0     1               0.5
</code></pre>

<p>我们最终得到RGB值为(0.5, 0, 0.5),是一个紫色。这正是我们所期望将透明红色合成到蓝色背景上所得到的。</p>

<p>记住我们刚刚只是将纹理中的一个像素合成到另一个纹理的像素上。当两个纹理覆盖在一起的时候，GPU需要为所有像素做这种操作。正如你所知道的一样，许多程序都有很多层，因此所有的纹理都需要合成到一起。尽管GPU是一块高度优化的硬件来做这种事情，但这还是会让它非常忙碌，</p>

<h2 id="toc_4">不透明 VS 透明</h2>

<p>当源纹理是完全不透明的时候，目标像素就等于源纹理。这可以省下 GPU 很大的工作量，这样只需简单的拷贝源纹理而不需要合成所有的像素值。但是没有方法能告诉 GPU 纹理上的像素是透明还是不透明的。只有当你作为一名开发者知道你放什么到 CALayer 上了。这也是为什么 CALayer 有一个叫做 opaque 的属性了。如果这个属性为 YES，GPU 将不会做任何合成，而是简单从这个层拷贝，不需要考虑它下方的任何东西(因为都被它遮挡住了)。这节省了 GPU 相当大的工作量。这也正是 Instruments 中 color blended layers 选项中所涉及的。(这在模拟器中的Debug菜单中也可用).它允许你看到哪一个 layers(纹理) 被标注为透明的，比如 GPU 正在为哪一个 layers 做合成。合成不透明的 layers 因为需要更少的数学计算而更廉价。</p>

<p>所以如果你知道你的 layer 是不透明的，最好确定设置它的 opaque 为 YES。如果你加载一个没有 alpha 通道的图片，并且将它显示在 UIImageView 上，这将会自动发生。但是要记住如果一个图片没有 alpha 通道和一个图片每个地方的 alpha 都是100%，这将会产生很大的不同。在后一种情况下，Core Animation 需要假定是否存在像素的 alpha 值不为100%。在 Finder 中，你可以使用 Get Info 并且检查 More Info 部分。它将告诉你这张图片是否拥有 alpha 通道。</p>

<h2 id="toc_5">像素对齐 VS 不重合在一起</h2>

<p>到现在我们都在考虑像素完美重合在一起的 layers。当所有的像素是对齐的时候我们得到相对简单的计算公式。每当 GPU 需要计算出屏幕上一个像素是什么颜色的时候，它只需要考虑在这个像素之上的所有 layer 中对应的单个像素，并把这些像素合并到一起。或者，如果最顶层的纹理是不透明的(即图层树的最底层)，这时候 GPU 就可以简单的拷贝它的像素到屏幕上。</p>

<p>当一个 layer 上所有的像素和屏幕上的像素完美的对应整齐，那这个 layer 就是像素对齐的。主要有两个原因可能会造成不对齐。第一个便是滚动；当一个纹理上下滚动的时候，纹理的像素便不会和屏幕的像素排列对齐。另一个原因便是当纹理的起点不在一个像素的边界上。</p>

<p>在这两种情况下，GPU 需要再做额外的计算。它需要将源纹理上多个像素混合起来，生成一个用来合成的值。当所有的像素都是对齐的时候，GPU 只剩下很少的工作要做。</p>

<p>Core Animation 工具和模拟器有一个叫做 color misaligned images 的选项，当这些在你的 CALayer 实例中发生的时候，这个功能便可向你展示。</p>

<h2 id="toc_6">Masks</h2>

<p>一个图层可以有一个和它相关联的 mask(蒙板)，mask 是一个拥有 alpha 值的位图，当像素要和它下面包含的像素合并之前都会把 mask 应用到图层的像素上去。当你要设置一个图层的圆角半径时，你可以有效的在图层上面设置一个 mask。但是也可以指定任意一个蒙板。比如，一个字母 A 形状的 mask。最终只有在 mask 中显示出来的(即图层中的部分)才会被渲染出来。</p>

<h2 id="toc_7">离屏渲染(Offscreen Rendering)</h2>

<p>离屏渲染可以被 Core Animation 自动触发，或者被应用程序强制触发。屏幕外的渲染会合并/渲染图层树的一部分到一个新的缓冲区，然后该缓冲区被渲染到屏幕上。</p>

<p>离屏渲染合成计算是非常昂贵的, 但有时你也许希望强制这种操作。一种好的方法就是缓存合成的纹理/图层。如果你的渲染树非常复杂(所有的纹理，以及如何组合在一起)，你可以强制离屏渲染缓存那些图层，然后可以用缓存作为合成的结果放到屏幕上。</p>

<p>如果你的程序混合了很多图层，并且想要他们一起做动画，GPU 通常会为每一帧(1/60s)重复合成所有的图层。当使用离屏渲染时，GPU 第一次会混合所有图层到一个基于新的纹理的位图缓存上，然后使用这个纹理来绘制到屏幕上。现在，当这些图层一起移动的时候，GPU 便可以复用这个位图缓存，并且只需要做很少的工作。需要注意的是，只有当那些图层不改变时，这才可以用。如果那些图层改变了，GPU 需要重新创建位图缓存。你可以通过设置 shouldRasterize 为 YES 来触发这个行为。</p>

<p>然而，这是一个权衡。第一，这可能会使事情变得更慢。创建额外的屏幕外缓冲区是 GPU 需要多做的一步操作，特殊情况下这个位图可能再也不需要被复用，这便是一个无用功了。然而，可以被复用的位图，GPU 也有可能将它卸载了。所以你需要计算 GPU 的利用率和帧的速率来判断这个位图是否有用。</p>

<p>离屏渲染也可能产生副作用。如果你正在直接或者间接的将mask应用到一个图层上，Core Animation 为了应用这个 mask，会强制进行屏幕外渲染。这会对 GPU 产生重负。通常情况下 mask 只能被直接渲染到帧的缓冲区中(在屏幕内)。</p>

<p>Instrument 的 Core Animation 工具有一个叫做 <em>Color Offscreen-Rendered Yellow</em> 的选项，它会将已经被渲染到屏幕外缓冲区的区域标注为黄色(这个选项在模拟器中也可以用)。同时记得检查 <em>Color Hits Green and Misses Red</em> 选项。绿色代表无论何时一个屏幕外缓冲区被复用，而红色代表当缓冲区被重新创建。</p>

<p>一般情况下，你需要避免离屏渲染，因为这是很大的消耗。直接将图层合成到帧的缓冲区中(在屏幕上)比先创建屏幕外缓冲区，然后渲染到纹理中，最后将结果渲染到帧的缓冲区中要廉价很多。因为这其中涉及两次昂贵的环境转换(转换环境到屏幕外缓冲区，然后转换环境到帧缓冲区)。</p>

<p>所以当你打开 <em>Color Offscreen-Rendered Yellow</em> 后看到黄色，这便是一个警告，但这不一定是不好的。如果 Core Animation 能够复用屏幕外渲染的结果，这便能够提升性能。</p>

<p>同时还要注意，rasterized layer 的空间是有限的。苹果暗示大概有屏幕大小两倍的空间来存储 rasterized layer/屏幕外缓冲区。</p>

<p>如果你使用 layer 的方式会通过屏幕外渲染，你最好摆脱这种方式。为 layer 使用蒙板或者设置圆角半径会造成屏幕外渲染，产生阴影也会如此。</p>

<p>至于 mask，圆角半径(特殊的mask)和 clipsToBounds/masksToBounds，你可以简单的为一个已经拥有 mask 的 layer 创建内容，比如，已经应用了 mask 的 layer 使用一张图片。如果你想根据 layer 的内容为其应用一个长方形 mask，你可以使用 contentsRect 来代替蒙板。</p>

<p>如果你最后设置了 shouldRasterize 为 YES，那也要记住设置 rasterizationScale 为 contentsScale。</p>

<h2 id="toc_8">更多的关于合成</h2>

<p>像往常一样，维基百科上有更多关于<a href="https://en.wikipedia.org/wiki/Alpha_compositing">透明合成</a>的基础公式。当我们谈完像素后，我们将更深入一点的谈论红，绿，蓝和 alpha 是怎么在内存中表现的。</p>

<h2 id="toc_9">OS X</h2>

<p>如果你是在 OS X 上工作，你将会发现大多数 debugging 选项在一个叫做 <em>Quartz Debug</em> 的独立程序中，而不是在 Instruments 中。Quartz Debug 是 Graphics Tools 中的一部分，这可以在苹果的 <a href="https://developer.apple.com/downloads/">developer portal</a> 中下载到。</p>

<h2 id="toc_10">Core Animation  OpenGL ES</h2>

<p>正如名字所建议的那样，Core Animation 让你在屏幕上实现动画。我们将跳过动画部分，而集中在绘图上。需要注意的是，Core Animation 允许你做非常高效的渲染。这也是为什么当你使用 Core Animation 时可以实现每秒 60 帧的动画。</p>

<p>Core Animation 的核心是 OpenGL ES 的一个抽象物，简而言之，它让你直接使用 OpenGL ES 的功能，却不需要处理 OpenGL ES 做的复杂的事情。当我们上面谈论合成的时候，我们把 layer 和 texture 当做等价的，但是他们不是同一物体，可又是如此的类似。</p>

<p>Core Animation 的 layer 可以有子 layer，所以最终你得到的是一个图层树。Core Animation 所需要做的最繁重的任务便是判断出哪些图层需要被(重新)绘制，而 OpenGL ES 需要做的便是将图层合并、显示到屏幕上。</p>

<p>举个例子，当你设置一个 layer 的内容为 CGImageRef 时，Core Animation 会创建一个 OpenGL 纹理，并确保在这个图层中的位图被上传到对应的纹理中。以及当你重写 <code>-drawInContext</code> 方法时，Core Animation 会请求分配一个纹理，同时确保 Core Graphics 会将你所做的(即你在<code>drawInContext</code>中绘制的东西)放入到纹理的位图数据中。一个图层的性质和 CALayer 的子类会影响到 OpenGL 的渲染结果，许多低等级的 OpenGL ES 行为被简单易懂地封装到 CALayer 概念中。</p>

<p>Core Animation 通过 Core Graphics 的一端和 OpenGL ES 的另一端，精心策划基于 CPU 的位图绘制。因为 Core Animation 处在渲染过程中的重要位置上，所以你如何使用 Core Animation 将会对性能产生极大的影响。</p>

<h2 id="toc_11">CPU限制 VS GPU限制</h2>

<p>当你在屏幕上显示东西的时候，有许多组件参与了其中的工作。其中，CPU 和 GPU 在硬件中扮演了重要的角色。在他们命名中 P 和 U 分别代表了”处理”和”单元”，当需要在屏幕上进行绘制时，他们都需要做处理，同时他们都有资源限制(即 CPU 和 GPU 的硬件资源)。</p>

<p>为了每秒达到 60 帧，你需要确定 CPU 和 GPU 不能过载。此外，即使你当前能达到 60fps(frame per second),你还是要尽可能多的绘制工作交给 GPU 做，而让 CPU 尽可能的来执行应用程序。通常，GPU 的渲染性能要比 CPU 高效很多，同时对系统的负载和消耗也更低一些。</p>

<p>既然绘图性能是基于 CPU 和 GPU 的，那么你需要找出是哪一个限制你绘图性能的。如果你用尽了 GPU 所有的资源，也就是说，是 GPU 限制了你的性能，同样的，如果你用尽了 CPU，那就是 CPU 限制了你的性能。</p>

<p>要告诉你，如果是 GPU 限制了你的性能，你可以使用 OpenGL ES Driver instrument。点击上面那个小的 i 按钮，配置一下，同时注意查看 Device Utilization %。现在，当你运行你的 app 时，你可以看到你 GPU 的负荷。如果这个值靠近 100%，那么你就需要把你工作的重心放在GPU方面了。</p>

<h2 id="toc_12">Core Graphics / Quartz 2D</h2>

<p>通过 Core Graphics 这个框架，Quartz 2D 被更为广泛的知道。</p>

<p>Quartz 2D 拥有比我们这里谈到更多的装饰。我们这里不会过多的讨论关于 PDF 的创建，渲染，解析，或者打印。只需要注意的是，PDF 的打印、创建和在屏幕上绘制位图的操作是差不多的。因为他们都是基于 Quartz 2D。</p>

<p>让我们简单的了解一下 <a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html">Quartz 2D</a> 主要的概念。有关详细信息可以到苹果的官方文档中了解。</p>

<p>放心，当Quartz 2D 涉及到 2D 绘制的时候，它是非常强大的。有基于路径的绘制，反锯齿渲染，透明图层，分辨率，并且设备独立，可以说出很多特色。这可能会让人产生畏惧，主要因为这是一个低级并且基于 C 的 API。</p>

<p>主要的概念当对简单，UIKit 和 AppKit 都包含了 Quartz 2D 的一些简单 API，一旦你熟练了，一些简单 C 的 API 也是很容易理解的。最终你学会了一个能实现 Photoshop 和 Illustrator 大部分功能的绘图引擎。苹果把 iOS 程序里面的<a href="https://developer.apple.com/videos/wwdc/2011/?id=129">股票应用</a>作为讲解 Quartz 2D 在代码中实现动态渲染的一个例子。</p>

<p>当你的程序进行位图绘制时，不管使用哪种方式，都是基于 Quartz 2D 的。也就是说，CPU 部分实现的绘制是通过 Quartz 2D 实现的。尽管 Quartz 可以做其它的事情，但是我们这里还是集中于位图绘制，在缓冲区(一块内存)绘制位图会包括 RGBA 数据。</p>

<p>比方说，我们要画一个<a href="https://zh.wikipedia.org/wiki/%E5%85%AB%E8%BE%B9%E5%BD%A2">八角形</a>，我们通过 UIKit 能做到这一点</p>

<pre><code>UIBezierPath *path = [UIBezierPath bezierPath];
[path moveToPoint:CGPointMake(16.72, 7.22)];
[path addLineToPoint:CGPointMake(3.29, 20.83)];
[path addLineToPoint:CGPointMake(0.4, 18.05)];
[path addLineToPoint:CGPointMake(18.8, -0.47)];
[path addLineToPoint:CGPointMake(37.21, 18.05)];
[path addLineToPoint:CGPointMake(34.31, 20.83)];
[path addLineToPoint:CGPointMake(20.88, 7.22)];
[path addLineToPoint:CGPointMake(20.88, 42.18)];
[path addLineToPoint:CGPointMake(16.72, 42.18)];
[path addLineToPoint:CGPointMake(16.72, 7.22)];
[path closePath];
path.lineWidth = 1;
[[UIColor redColor] setStroke];
[path stroke];
</code></pre>

<p>相对应的 Core Graphics 代码：</p>

<pre><code>CGContextBeginPath(ctx);
CGContextMoveToPoint(ctx, 16.72, 7.22);
CGContextAddLineToPoint(ctx, 3.29, 20.83);
CGContextAddLineToPoint(ctx, 0.4, 18.05);
CGContextAddLineToPoint(ctx, 18.8, -0.47);
CGContextAddLineToPoint(ctx, 37.21, 18.05);
CGContextAddLineToPoint(ctx, 34.31, 20.83);
CGContextAddLineToPoint(ctx, 20.88, 7.22);
CGContextAddLineToPoint(ctx, 20.88, 42.18);
CGContextAddLineToPoint(ctx, 16.72, 42.18);
CGContextAddLineToPoint(ctx, 16.72, 7.22);
CGContextClosePath(ctx);
CGContextSetLineWidth(ctx, 1);
CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);
CGContextStrokePath(ctx);
</code></pre>

<p>需要问的问题是:这个绘制到哪儿去了？这正好引出所谓的 CGContext 登场。我们传过去的ctx参数正是在那个上下文中。而这个上下文定义了我们需要绘制的地方。如果我们实现了 CALayer 的 <code>-drawInContext:</code> 这时已经传过来一个上下文。绘制到这个上下文中的内容将会被绘制到图层的备份区(图层的缓冲区).但是我们也可以创建我们自己的上下文，叫做基于位图的上下文，比如 <code>CGBitmapContextCreate()</code>.这个方法返回一个我们可以传给 CGContext 方法来绘制的上下文。</p>

<p>注意 UIKit 版本的代码为何不传入一个上下文参数到方法中？这是因为当使用 UIKit 或者 AppKit 时，上下文是唯一的。UIkit 维护着一个上下文堆栈，UIKit 方法总是绘制到最顶层的上下文中。你可以使用 <code>UIGraphicsGetCurrentContext()</code> 来得到最顶层的上下文。你可以使用 <code>UIGraphicsPushContext()</code> 和 <code>UIGraphicsPopContext()</code> 在 UIKit 的堆栈中推进或取出上下文。</p>

<p>最为突出的是，UIKit 使用 <code>UIGraphicsBeginImageContextWithOptions()</code> 和 <code>UIGraphicsEndImageContext()</code> 方便的创建类似于 <code>CGBitmapContextCreate()</code> 的位图上下文。混合调用 UIKit 和 Core Graphics 非常简单：</p>

<pre><code>UIGraphicsBeginImageContextWithOptions(CGSizeMake(45, 45), YES, 2);
CGContextRef ctx = UIGraphicsGetCurrentContext();
CGContextBeginPath(ctx);
CGContextMoveToPoint(ctx, 16.72, 7.22);
CGContextAddLineToPoint(ctx, 3.29, 20.83);
...
CGContextStrokePath(ctx);
UIGraphicsEndImageContext();
</code></pre>

<p>或者另外一种方法:</p>

<pre><code>CGContextRef ctx = CGBitmapContextCreate(NULL, 90, 90, 8, 90 * 4, space, bitmapInfo);
CGContextScaleCTM(ctx, 0.5, 0.5);
UIGraphicsPushContext(ctx);
UIBezierPath *path = [UIBezierPath bezierPath];
[path moveToPoint:CGPointMake(16.72, 7.22)];
[path addLineToPoint:CGPointMake(3.29, 20.83)];
...
[path stroke];
UIGraphicsPopContext(ctx);
CGContextRelease(ctx);
</code></pre>

<p>你可以使用 Core Graphics 创建大量的非常酷的东西。一个很好的理由就是，苹果的文档有很多例子。我们不能得到所有的细节，但是 Core Graphics 有一个非常接近 <a href="https://zh.wikipedia.org/wiki/Adobe_Illustrator">Adobe Illustrator</a> 和 <a href="https://zh.wikipedia.org/wiki/Adobe_Photoshop">Adobe Photoshop</a> 如何工作的绘图模型，并且大多数工具的理念翻译成 Core Graphics 了。终究，他是起源于 <a href="https://zh.wikipedia.org/wiki/NEXTSTEP">NeXTSTEP</a> 。(原来也是乔老爷的作品)。</p>

<h2 id="toc_13">CGLayer</h2>

<p>我们最初指出 CGLayer 可以用来提升重复绘制相同元素的速度。正如 <a href="http://iosptl.com/posts/cglayer-no-longer-recommended/">Dave Hayden指出</a>，这些<a href="http://iosptl.com/posts/cglayer-no-longer-recommended/">小道消息</a>不再可靠。</p>

<h2 id="toc_14">像素</h2>

<p>屏幕上的像素是由红，绿，蓝三种颜色组件构成的。因此，位图数据有时也被叫做 RGB 数据。你可能会对数据如何组织在内存中感到好奇。而事实是，有很多种不同的方式在内存中展现RGB位图数据。</p>

<p>稍后我们将会谈到压缩数据，这又是一个完全不同的概念。现在，我们先看一下RGB位图数据，我们可以从颜色组件:红，绿，蓝中得到一个值。而大多数情况下，我们有第四个组件:透明度。最终我们从每个像素中得到四个单独的值。</p>

<h2 id="toc_15">默认的像素布局</h2>

<p>在 iOS 和 OS X 上最常见的格式就是大家所熟知的 32bits-per-pixel(bpp), 8bits-per-componet(bpc),透明度会首先被乘以到像素值上(就像上文中提到的那个公式一样),在内存中，像下面这样:</p>

<pre><code>  A   R   G   B   A   R   G   B   A   R   G   B  
| pixel 0       | pixel 1       | pixel 2   
  0   1   2   3   4   5   6   7   8   9   10  11 ...
</code></pre>

<p>这个格式经常被叫做 ARGB。每个像素占用 4 字节(32bpp),每一个颜色组件是1字节(8bpc).每个像素有一个 alpha 值，这个值总是最先得到的(在RGB值之前)，最终红、绿、蓝的值都会被预先乘以 alpha 的值。预乘的意思就是 alpha 值被烘烤到红、绿、蓝的组件中。如果我们有一个橙色，他们各自的 8bpc 就像这样: 240,99,24.一个完全不透明的橙色像素拥有的 ARGB 值为: 255，240，99，24，它在内存中的布局就像上面图示那样。如果我们有一个相同颜色的像素，但是 alpha 值为 33%，那么他的像素值便是:84，80，33，8.</p>

<p>另一个常见的格式便是 32bpp，8bpc，跳过第一个 alpha 值，看起来像下面这样：</p>

<pre><code>  x   R   G   B   x   R   G   B   x   R   G   B  
| pixel 0       | pixel 1       | pixel 2   
  0   1   2   3   4   5   6   7   8   9   10  11 ...
</code></pre>

<p>这常被叫做 xRGB。像素并没有任何 alpha 值(他们都被假定为100%不透明)，但是内存布局是一样的。你应该想知道为什么这种格式很流行，当我们每一个像素中都有一个不用字节时，我们将会省下 25% 的空间。事实证明，这种格式更容易被现代的 CPU 和绘图算法消化，因为每一个独立的像素都对齐到 32-bit 的边界。现代的 CPU 不喜欢装载(读取)不对齐的数据，特别是当将这种数据和上面没有 alpha 值格式的数据混合时，算法需要做很多挪动和蒙板操作。</p>

<p>当处理 RGB 数据时，Core Graphics 也需要支持把alpha 值放到最后(另外还要支持跳过)。有时候也分别称为 RGBA 和 RGBx，假定是 8bpc，并且预乘了 alpha 值。</p>

<h2 id="toc_16">深奥的布局</h2>

<p>大多数时候，当处理位图数据时，我们也需要处理 Core Graphics/Quartz 2D。有一个非常详细的列表列出了他支持的混合组合。但是让我们首先看一下剩下的 RGB 格式：</p>

<p>另一个选择是 16bpp，5bpc，不包含 alpha 值。这个格式相比之前一个仅占用 50% 的存储大小(每个像素2字节)，但将使你存储它的 RGB 数据到内存或磁盘中变得困难。既然这种格式中，每个颜色组件只有 5bits(原文中写的是每个像素是5bits，但根据上下文可知应该是每个组件)，这样图形(特别是平滑渐变的)会造成重叠在一起的假象。</p>

<p>还有一个是 64bpp，16bpc，最终为 128bpp，32bpc，浮点数组件(有或没有 alpha 值)。它们分别使用 8 字节和 16 字节，并且允许更高的精度。当然，这会造成更多的内存使用和昂贵的计算。</p>

<p>整件事件中，Core Graphics 也支持一些像灰度模式和 <a href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%88%B7%E5%9B%9B%E5%88%86%E8%89%B2%E6%A8%A1%E5%BC%8F">CMYK</a> 格式，这些格式类似于仅有 alpha 值的格式(蒙板)。</p>

<h2 id="toc_17">二维数据</h2>

<p>当颜色组件(红、绿、蓝、alpha)混杂在一起的时候，大多数框架(包括 Core Graphics )使用像素数据。正是这种情况下我们称之为二维数据，或者二维组件。这个意思是：每一个颜色组件都在它自己的内存区域，也就是说它是二维的。比如 RGB 数据，我们有三个独立的内存区域，一个大的区域包含了所有像素的红颜色的值，一个包含了所有绿颜色的值，一个包含了所有蓝颜色的值。</p>

<p>在某些情况下，一些视频框架便会使用二维数据。</p>

<h2 id="toc_18">YCbCr</h2>

<p>当我们处理视频数据时，<a href="https://zh.wikipedia.org/wiki/YCbCr">YCbCr</a> 是一种常见的格式。它也是包含了三种(Y,Cb和Cr)代表颜色数据的组件。但是简单的讲，它更类似于通过人眼看到的颜色。人眼对 Cb 和 Cr 这两种组件的色彩度不太能精确的辨认出来，但是能很准确的识别出 Y 的亮度。当数据使用 YCbCr 格式时，在同等的条件下，Cb 和 Cr 组件比 Y 组件压缩的更紧密。</p>

<p>出于同样的原因，JPEG 图像有时会将像素数据从 RGB 转换到 YCbCr。JPEG 单独的压缩每一个二维颜色。当压缩基于 YCbCr 的平面时，Cb 和 Cr 能比 Y 压缩得更完全。</p>

<h2 id="toc_19">图片格式</h2>

<p>当你在 iOS 或者 OS X 上处理图片时，他们大多数为 JPEG 和 PNG。让我们更进一步观察。</p>

<h2 id="toc_20">JPEG</h2>

<p>每个人都知道 JPEG。他是相机的产物。它代表这照片如何存储在电脑上。甚至你嘛嘛都听说过 JPEG。</p>

<p>一个很好的理由，很多人都认为 JPEG 文件仅是另一种像素数据的格式，就像我们刚刚谈到的 RGB 像素布局那样。这样理解离真像真是差十万八千里了。</p>

<p>将 JPEG 数据转换成像素数据是一个非常复杂的过程，你通过一个周末的计划都不能完成，甚至是一个非常漫长的周末(原文的意思好像就是为了表达这个过程非常复杂，不过老外的比喻总让人拎不清)。对于每一个二维颜色，JPEG 使用一种基于<a href="https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2">离散余弦变换</a>(简称 DCT 变换)的算法，将空间信息转变到频域.这个信息然后被量子化，排好序，并且用一种<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">哈夫曼编码</a>的变种来压缩。很多时候，首先数据会被从 RGB 转换到二维 YCbCr，当解码 JPEG 的时候，这一切都将变得可逆。</p>

<p>这也是为什么当你通过 JPEG 文件创建一个 UIImage 并且绘制到屏幕上时，将会有一个延时，因为 CPU 这时候忙于解压这个 JPEG。如果你需要为每一个 tableviewcell 解压 JPEG，那么你的滚动当然不会平滑(原来 tableviewcell 里面最要不要用 JPEG 的图片)。</p>

<p>那究竟为什么我们还要用 JPEG 呢？答案就是 JPEG 可以非常非常好的压缩图片。一个通过 iPhone5 拍摄的，未经压缩的图片占用接近 24M。但是通过默认压缩设置，你的照片通常只会在 2-3M 左右。JPEG 压缩这么好是因为它是失真的，它去除了人眼很难察觉的信息，并且这样做可以超出像 gzip 这样压缩算法的限制。但这仅仅在图片上有效的，因为 JPEG 依赖于图片上有很多人类不能察觉出的数据。如果你从一个基本显示文本的网页上截取一张图，JPEG 将不会这么高效。压缩效率将会变得低下，你甚至能看出来图片已经压缩变形了。</p>

<h2 id="toc_21">PNG</h2>

<p><a href="https://zh.wikipedia.org/wiki/PNG">PNG</a>读作”ping”。和 JPEG 相反，它的压缩对格式是无损的。当你将一张图片保存为 PNG，并且打开它(或解压)，所有的像素数据会和最初一模一样，因为这个限制，PNG 不能像 JPEG 一样压缩图片，但是对于像程序中的原图(如buttons，icons)，它工作的非常好。更重要的是，解码 PNG 数据比解码 JPEG 简单的多。</p>

<p>在现实世界中，事情从来没有那么简单，目前存在了大量不同的 PNG 格式。可以通过维基百科查看详情。但是简言之，PNG 支持压缩带或不带 alpha 通道的颜色像素(RGB)，这也是为什么它在程序原图中表现良好的另一个原因。</p>

<h2 id="toc_22">挑选一个格式</h2>

<p>当你在你的程序中使用图片时，你需要坚持这两种格式: JPEG 或者 PNG。读写这种格式文件的压缩和解压文件能表现出很高的性能，另外，还支持并行操作。同时 Apple 正在改进解压缩并可能出现在将来的新操作系统中，届时你将会得到持续的性能提升。如果尝试使用另一种格式，你需要注意到，这可能对你程序的性能会产生影响，同时可能会打开安全漏洞，经常，图像解压缩算法是黑客最喜欢的攻击目标。</p>

<p>已经写了很多关于优化 PNGs，如果你想要了解更多，请到互联网上查询。非常重要的一点，注意 Xcode 优化 PNG 选项和优化其他引擎有很大的不同。</p>

<p>当 Xcode 优化一个 PNG 文件的时候，它将 PNG 文件变成一个从技术上讲不再是<a href="https://developer.apple.com/library/ios/qa/qa1681/_index.html">有效的PNG文件</a>。但是 iOS 可以读取这种文件，并且这比解压缩正常的 PNG 文件更快。Xcode 改变他们，让 iOS 通过一种对正常 PNG 不起作用的算法来对他们解压缩。值得注意的重点是，这改变了像素的布局。正如我们所提到的一样，在像素之下有很多种方式来描绘 RGB 数据，如果这不是 iOS 绘制系统所需要的格式，它需要将每一个像素的数据替换，而不需要加速来做这件事。</p>

<p>让我们再强调一遍，如果你可以，你需要为原图设置 resizable images。你的文件将变得更小，因此你只需要从文件系统装载更少的数据。</p>

<h2 id="toc_23">UIKit 和 Pixels</h2>

<p>每一个在 UIKit 中的 view 都有它自己的 CALayer。依次，这些图层都有一个叫像素位图的后备存储，有点像一个图像。这个后备存储正是被渲染到显示器上的。</p>

<h2 id="toc_24">With –drawRect:</h2>

<p>如果你的视图类实现了 <code>-drawRect:</code>，他们将像这样工作:</p>

<p>当你调用 <code>-setNeedsDisplay</code>，UIKit 将会在这个视图的图层上调用 <code>-setNeedsDisplay</code>。这为图层设置了一个标识，标记为 dirty(直译是脏的意思，想不出用什么词比较贴切,污染？)，但还显示原来的内容。它实际上没做任何工作，所以多次调用 <code>-setNeedsDisplay</code>并不会造成性能损失。</p>

<p>下面，当渲染系统准备好，它会调用视图图层的-display方法.此时，图层会装配它的后备存储。然后建立一个 Core Graphics 上下文(CGContextRef)，将后备存储对应内存中的数据恢复出来，绘图会进入对应的内存区域，并使用 CGContextRef 绘制。</p>

<p>当你使用 UIKit 的绘制方法，例如: <code>UIRectFill()</code> 或者 <code>-[UIBezierPath fill]</code> 代替你的 <code>-drawRect:</code> 方法，他们将会使用这个上下文。使用方法是，UIKit 将后备存储的 CGContextRef 推进他的 graphics context stack，也就是说，它会将那个上下文设置为当前的。因此 <code>UIGraphicsGetCurrent()</code> 将会返回那个对应的上下文。既然 UIKit 使用 <code>UIGraphicsGetCurrent()</code> 绘制方法，绘图将会进入到图层的后备存储。如果你想直接使用 Core Graphics 方法，你可以自己调用 <code>UIGraphicsGetCurrent()</code> 得到相同的上下文，并且将这个上下文传给 Core Graphics 方法。</p>

<p>从现在开始，图层的后备存储将会被不断的渲染到屏幕上。直到下次再次调用视图的 <code>-setNeedsDisplay</code> ，将会依次将图层的后备存储更新到视图上。</p>

<h2 id="toc_25">不使用 -drawRect:</h2>

<p>当你用一个 UIImageView 时，事情略有不同，这个视图仍然有一个 CALayer，但是图层却没有申请一个后备存储。取而代之的是使用一个 CGImageRef 作为他的内容，并且渲染服务将会把图片的数据绘制到帧的缓冲区，比如，绘制到显示屏。</p>

<p>在这种情况下，将不会继续重新绘制。我们只是简单的将位图数据以图片的形式传给了 UIImageView，然后 UIImageView 传给了 Core Animation，然后轮流传给渲染服务。</p>

<h2 id="toc_26">实现-drawRect: 还是不实现 -drawRect:</h2>

<p>这听起来貌似有点低俗，但是最快的绘制就是你不要做任何绘制。</p>

<p>大多数时间，你可以不要合成你在其他视图(图层)上定制的视图(图层)，这正是我们推荐的，因为 UIKit 的视图类是非常优化的 (就是让我们不要闲着没事做,自己去合并视图或图层) 。</p>

<p>当你需要自定义绘图代码时，Apple 在<a href="https://developer.apple.com/videos/wwdc/2012/?id=506">WWDC 2012’s session 506</a>:Optimizing 2D Graphics and Animation Performance 中展示了一个很好的例子:”finger painting”。</p>

<p>另一个地方需要自定义绘图的就是 iOS 的股票软件。股票是直接用 Core Graphics 在设备上绘制的，注意，这仅仅是你需要自定义绘图，你并不需要实现 <code>-drawRect:</code> 方法。有时，通过 <code>UIGraphicsBeginImageContextWithOptions()</code> 或者 <code>CGBitmapContextCeate()</code> 创建位图会显得更有意义，从位图上面抓取图像，并设置为 <code>CALayer</code> 的内容。下面我们将给出一个例子来测试，检验。</p>

<h2 id="toc_27">单一颜色</h2>

<p>如果我们看这个例子：</p>

<pre><code>// Don&#39;t do this
- (void)drawRect:(CGRect)rect
{
    [[UIColor redColor] setFill];
    UIRectFill([self bounds]);
}
</code></pre>

<p>现在我们知道这为什么不好:我们促使 Core Animation 来为我们创建一个后备存储，并让它使用单一颜色填充后备存储，然后上传给 GPU。</p>

<p>我们跟本不需要实现 <code>-drawRect:</code>，并节省这些代码工作量，只需简单的设置这个视图图层的背景颜色。如果这个视图有一个 CAGradientLayer 作为图层，那么这个技术也同样适用于此（渐变图层）。</p>

<h2 id="toc_28">可变尺寸的图像</h2>

<p>类似的，你可以使用可变尺寸的图像来降低绘图系统的压力。让我们假设你需要一个 300×500 点的按钮插图，这将是 600×100=60k 像素或者 60kx4=240kB 内存大小需要上传到 GPU，并且占用 VRAM。如果我们使用所谓的可变尺寸的图像，我们只需要一个 54×12 点的图像，这将占用低于 2.6k 的像素或者 10kB 的内存，这样就变得更快了。</p>

<p>Core Animation 可以通过 CALayer 的 <a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/contentsCenter"><code>contentsCenter</code></a> 属性来改变图像，大多数情况下，你可能更倾向于使用，<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/Reference/Reference.html#//apple_ref/occ/instm/UIImage/resizableImageWithCapInsets:resizingMode:"><code>-[UIImage resizableImageWithCapInsets:resizingMode:]</code></a>。</p>

<p>同时注意，在第一次渲染这个按钮之前，我们并不需要从文件系统读取一个 60k 像素的 PNG 并解码，解码一个小的 PNG 将会更快。通过这种方式，你的程序在每一步的调用中都将做更少的工作，并且你的视图将会加载的更快。</p>

<h2 id="toc_29">并发绘图</h2>

<p>上一次 <a href="http://objccn.io/issue-2/">objc.io</a> 的话题是关于并发的讨论。正如你所知道的一样，UIKit 的线程模型是非常简单的：你仅可以从主队列(比如主线程)中调用 UIKit 类(比如视图),那么并发绘图又是什么呢？</p>

<p>如果你必须实现 <code>-drawRect:</code>，并且你必须绘制大量的东西，这将占用时间。由于你希望动画变得更平滑，除了在主队列中，你还希望在其他队列中做一些工作。同时发生的绘图是复杂的，但是除了几个警告，同时发生的绘图还是比较容易实现的。</p>

<p>我们除了在主队列中可以向 CALayer 的后备存储中绘制一些东西，其他方法都将不可行。可怕的事情将会发生。我们能做的就是向一个完全断开链接的位图上下文中进行绘制。</p>

<p>正如我们上面所提到的一样，在 Core Graphics 下，所有 Core Graphics 绘制方法都需要一个上下文参数来指定绘制到那个上下文中。UIKit 有一个当前上下文的概念(也就是绘制到哪儿去)。这个当前的上下文就是 per-thread.</p>

<p>为了同时绘制，我们需要做下面的操作。我们需要在另一个队列创建一个图像，一旦我们拥有了图像，我们可以切换回主队列，并且设置这个图像为 UIImageView 的图像。这个技术在 <a href="https://developer.apple.com/videos/wwdc/2012/?id=211">WWDC 2012 session 211</a> 中讨论过。(异步下载图片经常用到这个)</p>

<p>增加一个你可以在其中绘制的新方法：</p>

<pre><code>- (UIImage *)renderInImageOfSize:(CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);

    // do drawing here

    UIImage *result = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return result;
}
</code></pre>

<p>这个方法通过 <code>UIGraphicsBeginImageContextWithOptions()</code> 方法，并根据给定的大小创建一个新的 CGContextRef 位图。这个方法也会将这个上下文设置为<em>当前UIKit</em>的上下文。现在你可以在这里做你想在 <code>-drawRect:</code> 中做的事了。然后我们可以通过 <code>UIGraphicsGetImageFromCurrentImageContext()</code>,将获得的这个上下文位图数据作为一个 UIImage，最终移除这个上下文。</p>

<p>很重要的一点就是，你在这个方法中所做的所有绘图的代码都是线程安全的，也就是说，当你访问属性等等，他们需要线程安全。因为你是在另一个队列中调用这个方法的。如果这个方法在你的视图类中，那就需要注意一点了。另一个选择就是创建一个单独的渲染类，并设置所有需要的属性，然后通过触发来渲染图片。如果这样，你可以通过使用简单的 UIImageView 或者 UITableViewCell。</p>

<p>要知道，所有 UIKit 的绘制 API 在使用另一个队列时，都是安全的。只需要确定是在同一个操作中调用他们的，这个操作需要以 <code>UIGraphicsBeginImageContextWithOptions()</code> 开始，以 <code>UIGraphicsEndIamgeContext()</code> 结束。</p>

<p>你需要像下面这样触发渲染代码：</p>

<pre><code>UIImageView *view; // assume we have this
NSOperationQueue *renderQueue; // assume we have this
CGSize size = view.bounds.size;
[renderQueue addOperationWithBlock:^(){
        UIImage *image = [renderer renderInImageOfSize:size];
        [[NSOperationQueue mainQueue] addOperationWithBlock:^(){
            view.image = image;
        }];
}];
</code></pre>

<p>要注意，我们是在主队列中调用 view.image = image.这是一个非常重要的细节。你不可以在任何其他队列中调用这个代码。</p>

<p>像往常一样，同时绘制会伴随很多问题，你现在需要取消后台渲染。并且在渲染队列中设置合理的同时绘制的最大限度。</p>

<p>为了支持这一切，最简单的就是在一个 NSOperation 子类内部实现 <code>-renderInImageOfSize:</code>。</p>

<p>最终，需要指出，设置 UITableViewCell 内容为异步是非常困难的。单元格很有可能在完成异步渲染前已经被复用了。尽管单元格已经被其他地方复用，但你只需要设置内容就行了。</p>

<h2 id="toc_30">CALayer</h2>

<p>到现在为止，你需要知道在 GPU 内，一个 CALayer 在某种方式上和一个纹理类似。图层有一个后备存储，这便是被用来绘制到屏幕上的位图。</p>

<p>通常，当你使用 CALayer 时，你会设置它的内容为一个图片。这到底做了什么？这样做会告诉 Core Animation 使用图片的位图数据作为纹理。如果这个图片(JPEG或PNG)被压缩了，Core Animation 将会这个图片解压缩，然后上传像素数据到 GPU。</p>

<p>尽管还有很多其他中图层，如果你是用一个简单的没有设置上下文的 CALayer，并为这个 CALayer 设置一个背景颜色，Core Animation 并不会上传任何数据到 GPU，但却能够不用任何像素数据而在 GPU 上完成所有的工作，类似的，对于渐变的图层，GPU 是能创建渐变的，而且不需要 CPU 做任何工作，并且不需要上传任何数据到 GPU。</p>

<h2 id="toc_31">自定义绘制的图层</h2>

<p>如果一个 CALayer 的子类实现了 <code>-drawInContext:</code> 或者它的代理，类似于 <code>-drawLayer:inContest:</code>, Core Animation 将会为这个图层申请一个后备存储，用来保存那些方法绘制进来的位图。那些方法内的代码将会运行在 CPU 上，结果将会被上传到 GPU。</p>

<h2 id="toc_32">形状和文本图层</h2>

<p>形状和文本图层还是有些不同的。开始时，Core Animation 为这些图层申请一个后备存储来保存那些需要为上下文生成的位图数据。然后 Core Animation 会讲这些图形或文本绘制到后备存储上。这在概念上非常类似于，当你实现 <code>-drawInContext:</code> 方法，然后在方法内绘制形状或文本，他们的性能也很接近。</p>

<p>在某种程度上，当你需要改变形状或者文本图层时，这需要更新它的后备存储，Core Animation 将会重新渲染后备存储。例如，当动态改变形状图层的大小时，Core Animation 需要为动画中的每一帧重新绘制形状。</p>

<h2 id="toc_33">异步绘图</h2>

<p>CALayer 有一个叫做 drawsAsynchronously 的属性，这似乎是一个解决所有问题的高招。注意，尽管这可能提升性能，但也可能让事情变慢。</p>

<p>当你设置 drawsAsynchronously 为 YES 时，发生了什么？你的 <code>-drawRect:/-drawInContext:</code> 方法仍然会被在主线程上调用。但是所有调用 Core Graphics 的操作都不会被执行。取而代之的是，绘制命令被推迟，并且在后台线程中异步执行。</p>

<p>这种方式就是先记录绘图命令，然后在后台线程中重现。为了这个过程的顺利进行，更多的工作需要被做，更多的内存需要被申请。但是主队列中的一些工作便被移出来了(大概意思就是让我们把一些能在后台实现的工作放到后台实现，让主线程更顺畅)。</p>

<p>对于昂贵的绘图方法，这是最有可能提升性能的，但对于那些绘图方法来说，也不会节省太多资源。</p>

<hr/>

<p><a href="http://objccn.io/issue-3/">话题 #3 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html">Getting Pixels onto the Screen</a></p>

<p>译文 <a href="http://answerhuang.duapp.com/index.php/2013/09/04/pixels-get-onto-the-screen/">将像素绘制到屏幕上去 - answer-huang</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 Scroll Views]]></title>
    <link href="http://coderforart.com/objccndemo/14415913597346.html"/>
    <updated>2015-09-07T10:02:39+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415913597346.html</id>
    <content type="html"><![CDATA[
<p>可能你很难相信 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIScrollView_Class/Reference/UIScrollView.html">UIScrollView</a> 和一个标准的 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html">UIView</a> 差异并不大，scroll view 确实会多出一些方法，但这些方法只是和 UIView 的属性很好的结合到一起了。因此，在要想弄懂 UIScrollView 是怎么工作之前，你需要先了解一下 UIView，特别是视图渲染的两步过程。</p>

<h2 id="toc_0">光栅化和组合</h2>

<p>渲染过程的第一部分是众所周知的光栅化(<code>rasterization</code>)，光栅化简单的说就是产生一组绘图指令并且生成一张图片。比如绘制一个圆角矩形、带图片、标题居中的 UIButtons。这些图片并没有被绘制到屏幕上去；取而代之的是，他们被自己的视图保持着留到下一个步骤使用。</p>

<p>一旦每个视图都产生了自己的光栅化图片，这些图片便被一个接一个的绘制，并产生一个屏幕大小的图片，这便是上文所说的组合。视图层级(view hierarchy)对于组合如何进行扮演了很重要的角色：一个视图的图片被组合在它父视图的图片上面。然后，组合好的图片被组合到父视图的父视图图片上面。视图层级最顶端是窗口(window)，它组合好的图片便是我们看到的东西了。</p>

<p>概念上，依次在每个视图上放置独立分层的图片并最终产生一个图片，单调的图像更容易被理解，特别是如果你以前使用过像 Photoshop 这样的工具。我们还有另外一篇文章详细解释了<a href="http://objccn.io/issue-3-1/">像素是如何绘制到屏幕上去的</a>。</p>

<p>现在，回想一下，每个视图都有一个 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instp/UIView/bounds">bounds</a> 和 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instp/UIView/frame">frame</a>。当布局一个界面时，我们需要处理视图的 frame。这允许我们放置并设置视图的大小。视图的 frame 和 bounds 的大小总是一样的，但是他们的 origin 有可能不同。弄懂这两个工作原理是理解 UIScrollView 的关键。</p>

<p>在光栅化步骤中，视图并不关心即将发生的组合步骤。也就是说，它并不关心自己的 frame (这是用来放置视图的图像)或自己在视图层级中的位置(这是决定组合的顺序)。这时视图只关心一件事就是绘制它自己的 content。这个绘制发生在每个视图的 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/drawRect:"><code>drawRect:</code></a> 方法中。</p>

<p>在 <code>drawRect:</code> 方法被调用前，会为视图创建一个空白的图片来绘制 content。这个图片的坐标系统是视图的 bounds。几乎每个视图 bounds 的 origin 都是 {0，0}。因此，当在光栅化图片左上角绘制一些东西的时候，你都会在 bounds 的 origin {x:0, y:0} 处绘制。在一个图片右下角的地方绘制东西的时候，你都会绘制在 {x:width, y:height} 处。如果你的绘制超出了视图的 bounds，那么超出的部分就不属于光栅化图片的部分了，并且会被丢弃。</p>

<p><img src="http://img.objccn.io/issue-3/SV2.png" alt=""/></p>

<p>在组合的步骤中，每个视图将自己光栅化图片组合到自己父视图的光栅化图片上面。视图的 frame 决定了自己在父视图中绘制的位置，frame 的 origin 表明了视图光栅化图片左上角相对父视图光栅化图片左上角的偏移量。所以，一个 origin 为 {x:20, y:15} 的 frame 所绘制的图片左边距其父视图 20 点，上边距父视图 15 点。因为视图的 frame 和 bounds 矩形的大小总是一样的，所以光栅化图片组合的时候是像素对齐的。这确保了光栅化图片不会被拉伸或缩小。</p>

<p><img src="http://img.objccn.io/issue-3/SV1.png" alt=""/></p>

<p>记住，我们才仅仅讨论了一个视图和它父视图之间的组合操作。一旦这两个视图被组合到一起，组合的结果图片将会和父视图的父视图进行组合，这是一个雪球效应。</p>

<p>考虑一下组合图片背后的公式。视图图片的左上角会根据它 frame 的 origin 进行偏移，并绘制到父视图的图片上：</p>

<pre><code>CompositedPosition.x = View.frame.origin.x - Superview.bounds.origin.x;

CompositedPosition.y = View.frame.origin.y - Superview.bounds.origin.y;
</code></pre>

<p>正如之前所说的，如果一个视图 bounds 的 origin 是 {0,0}。那么，我们得到这个公式：</p>

<pre><code>CompositedPosition.x = View.frame.origin.x;

CompositedPosition.y = View.frame.origin.y;
</code></pre>

<p>我们可以通过几个不同的 frames 看一下：</p>

<p><img src="http://img.objccn.io/issue-3/SV3.png" alt=""/></p>

<p>这样做是有道理的，我们改变 button 的 <code>frame.origin</code>后，它会改变自己相对紫色父视图的位置。注意，如果我们移动 button 直到它的一部分已经在紫色父视图 bounds 的外面，当光栅化图片被截去时这部分也将会通过同样的绘制方式被截去。然而，技术上讲，因为 iOS 处理组合方法的原因，你可以将一个子视图渲染在其父视图的 bounds 之外，但是光栅化期间的绘制不可能超出一个视图的 bounds。</p>

<h2 id="toc_1">Scroll View的Content Offset</h2>

<p>现在我们所讲的跟 UIScrollView 有什么关系呢？一切都和它有关！考虑一种我们可以实现的滚动：我们有一个拖动时 frame 不断改变的视图。这达到了相同的效果，对吗？如果我拖动我的手指到右边，那么拖动的同时我增大视图的 <code>origin.x</code> ，瞧，这货就是 scroll view。</p>

<p>当然，在 scroll view 中有很多具有代表性的视图。为了实现这个平移功能，当用户移动手指时，你需要时刻改变每个视图的 frames。当我们提到组合一个 view 的光栅化图片到它父视图什么地方时，记住这个公式：</p>

<pre><code>CompositedPosition.x = View.frame.origin.x - Superview.bounds.origin.x;

CompositedPosition.y = View.frame.origin.y - Superview.bounds.origin.y;
</code></pre>

<p>我们减少 <code>Superview.bounds.origin</code> 的值(因为他们总是0)。但是如果他们不为0呢？我们用和前一个图例相同的 frames，但是我们改变了紫色视图 bounds 的 origin 为 {-30, -30}。得到下图：</p>

<p><img src="http://img.objccn.io/issue-3/SV4.png" alt=""/></p>

<p>现在，巧妙的是通过改变这个紫色视图的 bounds，它每一个单独的子视图都被移动了。事实上，这正是 scroll view 工作的原理。当你设置它的 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScrollView_Class/Reference/UIScrollView.html#//apple_ref/occ/instp/UIScrollView/contentOffset">contentOffset</a> 属性时它改变 <code>scroll view.bounds</code> 的 origin。事实上，contentOffset 甚至不是实际存在的。代码看起来像这样：</p>

<pre><code>- (void)setContentOffset:(CGPoint)offset
{
    CGRect bounds = [self bounds];
    bounds.origin = offset;
    [self setBounds:bounds];
}
</code></pre>

<p>注意前一个图例，只要足够的改变 bounds 的 origin，button 将会超出紫色视图和 button 组合成的图片的范围。这也是当你足够的移动 scroll view 时，一个视图会消失！</p>

<h2 id="toc_2">世界之窗：Content Size</h2>

<p>现在，最难的部分已经过去了，我们再看看 UIScrollView 另一个属性：<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScrollView_Class/Reference/UIScrollView.html#//apple_ref/occ/instp/UIScrollView/contentSize">contentSize</a>。<br/>
scroll view 的 content size 并不会改变其 bounds 的任何东西，所以这并不会影响 scroll view 如何组合自己的子视图。反而，content size 定义了可滚动区域。scroll view 的默认 content size 为 {w:0, h:0}。既然没有可滚动区域，用户是不可以滚动的，但是 scroll view 仍然会显示其 bounds 范围内所有的子视图。<br/>
当 content size 设置为比 bounds 大的时候，用户就可以滚动视图了。你可以认为 scroll view 的 bounds 为可滚动区域上的一个窗口：</p>

<p><img src="http://img.objccn.io/issue-3/SV5.png" alt=""/></p>

<p>当 content offset 为 {x:0, y:0} 时，可见窗口的左上角在可滚动区域的左上角处。这也是 content offset 的最小值；用户不能再往可滚动区域的左边或上边移动了。那儿没啥，别滚了！</p>

<p>content offset 的最大值是 content size 和 scroll view size 的差(不同于 content size 和scroll view的 bounds 大小)。这也在情理之中：从左上角一直滚动到右下角，用户停止时，滚动区域右下角边缘和滚动视图 bounds 的右下角边缘是齐平的。你可以像这样记下 content offset 的最大值：</p>

<pre><code>contentOffset.x = contentSize.width - bounds.size.width;

contentOffset.y = contentSize.height - bounds.size.height;
</code></pre>

<h2 id="toc_3">用Content Insets对窗口稍作调整</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScrollView_Class/Reference/UIScrollView.html#//apple_ref/occ/instp/UIScrollView/contentInset">contentInset</a> 属性可以改变 content offset 的最大和最小值，这样便可以滚动出可滚动区域。它的类型为 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKitDataTypesReference/Reference/reference.html#//apple_ref/doc/c_ref/UIEdgeInsets">UIEdgeInsets</a>，包含四个值：{top，left，bottom，right}。当你引进一个 inset 时，你改变了 content offset 的范围。比如，设置 content inset 顶部值为 10，则允许 content offset 的 y 值达到 10。这介绍了可滚动区域周围的填充。</p>

<p><img src="http://img.objccn.io/issue-3/SV6.png" alt=""/></p>

<p>这咋一看好像没什么用。实际上，为什么不仅仅增加 content size 呢？除非没办法，否则你需要避免改变scroll view 的 content size。想要知道为什么？想想一个 table view（UItableView是UIScrollView 的子类，所以它有所有相同的属性），table view 为了适应每一个cell，它的可滚动区域是通过精心计算的。当你滚动经过 table view 的第一个或最后一个 cell 的边界时，table view将 content offset 弹回并复位，所以 cells 又一次恰到好处的紧贴 scroll view 的 bounds。</p>

<p>当你想要使用 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIRefreshControl_class/Reference/Reference.html">UIRefreshControl</a> 实现拉动刷新时发生了什么？你不能在 table view 的可滚动区域内放置 UIRefreshControl，否则，table view 将会允许用户通过 refresh control 中途停止滚动，并且将 refresh control 的顶部弹回到视图的顶部。因此，你必须将 refresh control 放在可滚动区域上方。这将允许首先将 content offset 弹回第一行，而不是 refresh control。</p>

<p>但是等等，如果你通过滚动足够多的距离初始化 pull-to-refresh 机制，因为 table view 设置了 content inset，这将允许 content offset 将 refresh control 弹回到可滚动区域。当刷新动作被初始化时，content inset 已经被校正过，所以 content offset 的最小值包含了完整的 refresh control。当刷新完成后，content inset 恢复正常，content offset 也跟着适应大小，这里并不需要为content size 做数学计算。(这里可能比较难理解，建议看看 EGOTableViewPullRefresh 这样的类库就应该明白了)</p>

<p>如何在自己的代码中使用 content inset？当键盘在屏幕上时，有一个很好的用途：你想要设置一个紧贴屏幕的用户界面。当键盘出现在屏幕上时，你损失了几百个像素的空间，键盘下面的东西全都被挡住了。</p>

<p>现在，scroll view 的 bounds 并没有改变，content size 也并没有改变(也不需要改变)。但是用户不能滚动 scroll view。考虑一下之前一个公式：content offset 的最大值是 content size 和 bounds 的差。如果他们相等，现在 content offset 的最大值是 {x:0, y:0}.</p>

<p>现在开始出绝招，将界面放入一个 scroll view。scroll view 的 content size 仍然和 scroll view 的 bounds 一样大。当键盘出现在屏幕上时，你设置 content inset 的底部等于键盘的高度。</p>

<p><img src="http://img.objccn.io/issue-3/SV7.png" alt=""/></p>

<p>这允许在 content offset 的最大值下显示滚动区域外的区域。可视区域的顶部在 scroll view bounds 的外面，因此被截取了(虽然它在屏幕之外了，但这并没有什么)。</p>

<p>但愿这能让你理解一些滚动视图内部工作的原理，你对缩放感兴趣？好吧，我们今天不会谈论它，但是这儿有一个有趣的小窍门：检查 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIScrollViewDelegate_Protocol/Reference/UIScrollViewDelegate.html#//apple_ref/doc/uid/TP40006923-CH3-SW7"><code>viewForZoomingInScrollView:</code></a> 方法返回视图的 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instp/UIView/transform">transform</a> 属性。你将再次发现 scroll view 只是聪明的利用了 UIView 已经存在的属性。</p>

<p>相关链接(强烈推荐)：</p>

<p><a href="http://bbs.weiphone.com/read-htm-tid-6880069.html">计算机图形渲染的流程</a></p>

<hr/>

<p><a href="http://objccn.io/issue-3/">话题 #3 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-3/scroll-view.html">Understanding Scroll Views</a></p>

<p>译文 <a href="http://answerhuang.duapp.com/index.php/2013/11/04/understanding-scroll-view/">理解Scroll View - answer-huang</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义 Collection View 布局]]></title>
    <link href="http://coderforart.com/objccndemo/14415913597397.html"/>
    <updated>2015-09-07T10:02:39+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415913597397.html</id>
    <content type="html"><![CDATA[
<p>UICollectionView 在 iOS6 中第一次被引入，也是 UIKit <a href="http://oleb.net/blog/2012/09/uicollectionview/">视图类中的一颗新星</a>。它和 UITableView 共享一套 API 设计，但也在 UITableView 上做了一些扩展。UICollectionView 最强大、同时显著超出 UITableView 的特色就是其完全灵活的布局结构。在这篇文章中，我们将会实现一个相当复杂的自定义 collection view 布局，并且顺便讨论一下这个类设计的重要部分。项目的示例代码在 <a href="https://github.com/objcio/issue-3-collection-view-layouts">GitHub</a> 上。</p>

<h2 id="toc_0">布局对象 (Layout Objects)</h2>

<p>UITableView 和 UICollectionView 都是 <a href="http://developer.apple.com/library/ios/#documentation/general/conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html">data-source 和 delegate 驱动</a>的。它们在显示其子视图集的过程中仅扮演容器角色(<code>dumb containers</code>)，且对子视图集真正的内容毫不知情。</p>

<p><code>UICollectionView</code> 在此之上进行了进一步抽象。它将其子视图的位置，大小和外观的控制权委托给一个单独的布局对象。通过提供一个自定义布局对象，你几乎可以实现任何你能想象到的布局。布局继承自 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UICollectionViewLayout_class/Reference/Reference.html"><code>UICollectionViewLayout</code></a> 抽象基类。iOS6 中以 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewFlowLayout_class/Reference/Reference.html#//apple_ref/occ/cl/UICollectionViewFlowLayout"><code>UICollectionViewFlowLayout</code></a> 类的形式提出了一个具体的布局实现。</p>

<p>我们可以使用 flow layout 实现一个标准的 grid view，这可能是在 collection view 中最常见的使用案例了。尽管大多数人都这么想，但是 Apple 很聪明，没有明确的命名这个类为 <code>UICollectionViewGridLayout</code>，而使用了更为通用的术语 flow layout，更好的描述了该类的功能：它通过一个接一个的放置 cell 来建立自己的布局，当需要的时候，插入横排或竖排的分栏符。通过自定义滚动方向，大小和 cell 之间的间距，flow layout 也可以在单行或单列中布局 cell。实际上，<code>UITableView</code> 的布局可以想象成 flow layout 的一种特殊情况。</p>

<p>在你准备自己写一个 <code>UICollectionViewLayout</code> 的子类之前，你需要问你自己，你是否能够使用 <code>UICollectionViewFlowLayout</code> 实现你心里的布局。这个类是<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewFlowLayout_class/Reference/Reference.html#//apple_ref/occ/cl/UICollectionViewFlowLayout">很容易定制</a>的，并且可以继承本身进行近一步的定制。感兴趣的看<a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/UsingtheFlowLayout/UsingtheFlowLayout.html#//apple_ref/doc/uid/TP40012334-CH3-SW4">这篇文章</a>。</p>

<h2 id="toc_1">Cells 和其他 Views</h2>

<p>为了适应任意布局，collection view 建立一个了类似、但比 table view 更灵活的视图层级（view hierarchy）。像往常一样，你的主要内容显示在 cell 中，cell 可以被任意分组到 section 中。Collection view 的 cell 必须是 <code>UICollectionViewCell</code> 的子类。除了 cell，collection view 额外管理着两种视图：supplementary views 和 decoration views。</p>

<p>collection view 中的 <strong>Supplementary views</strong> 相当于 table view 的 section header 和 footer views。像 cells 一样，他们的内容都由数据源对象驱动。然而和 table view 中用法不一样，supplementary view 并不一定会作为 header 或 footer view；他们的数量和放置的位置完全由布局控制。</p>

<p><strong>Decoration views</strong> 纯粹为一个装饰品。他们完全属于布局对象，并被布局对象管理，他们并不从 data source 获取的 contents。当布局对象指定需要一个 decoration view 的时候，collection view 会自动创建，并将布局对象提供的布局参数应用到上面去。并不需要为自定义视图准备任何内容。</p>

<p>Supplementary views 和 decoration views 必须是 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UICollectionReusableView_class/Reference/Reference.html#//apple_ref/occ/cl/UICollectionReusableView">UICollectionReusableView</a> 的子类。布局使用的每个视图类都需要在 collection view 中注册，这样当 data source 让它们从 reuse pool 中出列时，它们才能够创建新的实例。如果你是使用的 Interface Builder，则可以通过在可视编辑器中拖拽一个 cell 到 collection view 上完成 cell 在 collection view 中的注册。同样的方法也可以用在 supplementary view 上，前提是你使用了 <code>UICollectionViewFlowLayout</code>。如果没有，你只能通过调用 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/Reference/Reference.html#//apple_ref/occ/instm/UICollectionView/registerClass:forCellWithReuseIdentifier:"><code>registerClass:</code></a> 或者 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/Reference/Reference.html#//apple_ref/occ/instm/UICollectionView/registerNib:forCellWithReuseIdentifier:"><code>registerNib:</code></a> 方法手动注册视图类了。你需要在 <code>viewDidLoad</code> 中做这些操作。</p>

<h2 id="toc_2">自定义布局</h2>

<p>作为一个非常有意义的自定义 collection view 布局的例子，我们不妨设想一个典型的日历应用程序中的周 (week) 视图。日历一次显示一周，星期中的每一天显示在列中。每一个日历事件将会在我们的 collection view 中以一个 cell 显示，位置和大小代表事件起始日期时间和持续时间。</p>

<p><img src="http://www.objc.io/images/issue-3/calendar-collection-view-layout.png" alt=""/><br/>
一般有两种类型的 collection view 布局：</p>

<p>1.<strong>独立于内容的布局计算</strong>。这正是你所知道的像 UITableView 和 UICollectionViewFlowLayout 这些情况。每个 cell 的位置和外观不是基于其显示的内容，但所有 cell 的显示顺序是基于内容的顺序。可以把默认的 flow layout 做为例子。每个 cell 都基于前一个 cell 放置(或者如果没有足够的空间，则从下一行开始)。布局对象不必访问实际数据来计算布局。</p>

<p>2.<strong>基于内容的布局计算</strong>。我们的日历视图正是这样类型的例子。为了计算显示事件的起始和结束时间，布局对象需要直接访问 collection view 的数据源。在很多情况下，布局对象不仅需要取出当前可见 cell 的数据，还需要从所有记录中取出一些决定当前哪些 cell 可见的数据。</p>

<p>在我们的日历示例中，布局对象如果访问某一个矩形内 cells 的属性，那就必须迭代数据源提供的所有事件来决定哪些位于要求的时间窗口中。 与一些相对简单，数据源独立计算的 flow layout 比起来，这足够计算出 cell 在一个矩形内的 index paths 了（假设网格中所有cells的大小都一样）。</p>

<p>如果有一个依赖内容的布局，那就是暗示你需要写自定义的布局类了，同时不能使用自定义的 <code>UICollectionViewFlowLayout</code>，所以这正是我们需要做的事情。</p>

<p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewLayout_class/Reference/Reference.html">UICollectionViewLayout的文档</a>列出了子类需要重写的方法。</p>

<h3 id="toc_3">collectionViewContentSize</h3>

<p>由于 collection view 对它的 content 并不知情，所以布局首先要提供的信息就是滚动区域大小，这样 collection view 才能正确的管理滚动。布局对象必须在此时计算它内容的总大小，包括 supplementary views 和 decoration views。注意，尽管大多数经典的 collection view 限制在一个轴方向上滚动（正如 <code>UICollectionViewFlowLayout</code> 一样），但这不是必须的。</p>

<p>在我们的日历示例中，我们想要视图垂直的滚动。比如，如果我们想要在垂直空间上一个小时占去 100 点，这样显示一整天的内容高度就是 2400 点。注意，我们不能够水平滚动，这就意味这我们 collection view 只能显示一周。为了能够在日历中的多个星期间分页，我们可以在一个独立（分页）的 scroll view （可以使用 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPageViewControllerClassReferenceClassRef/UIPageViewControllerClassReference.html">UIPageViewController</a>）中使用多个collection view（一周一个），或者坚持使用一个 collection view 并且返回足够大的内容宽度，这会使得用户感觉在两个方向上滑动自由。</p>

<pre><code>- (CGSize)collectionViewContentSize
{
    // Don&#39;t scroll horizontally
    CGFloat contentWidth = self.collectionView.bounds.size.width;

    // Scroll vertically to display a full day
    CGFloat contentHeight = DayHeaderHeight + (HeightPerHour * HoursPerDay);

    CGSize contentSize = CGSizeMake(contentWidth, contentHeight);
    return contentSize;
}
</code></pre>

<p>为了清楚起见，我选择布局在一个非常简单的模型上：假定每周天数相同，每天时长相同，也就是说天数用 0-6 表示。在一个真实的日历程序中，布局将会为自己的计算大量使用基于 <code>NSCalendaar</code> 的日期。</p>

<h3 id="toc_4">layoutAttributesForElementsInRect:</h3>

<p>这是任何布局类中最重要的方法了，同时可能也是最容易让人迷惑的方法。collection view 调用这个方法并传递一个自身坐标系统中的矩形过去。这个矩形代表了这个视图的可见矩形区域（也就是它的 bounds ），你需要准备好处理传给你的任何矩形。</p>

<p>你的实现必须返回一个包含 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UICollectionViewLayoutAttributes_class/Reference/Reference.html"><code>UICollectionViewLayoutAttributes</code></a> 对象的数组，为每一个 cell 包含一个这样的对象，supplementary view 或 decoration view 在矩形区域内是可见的。<code>UICollectionViewLayoutAttributes</code> 类包含了 collection view 内 item 的所有相关布局属性。默认情况下，这个类包含 <code>frame</code>，<code>center</code>，<code>size</code>，<code>transform3D</code>，<code>alpha</code>，<code>zIndex</code> 和 <code>hidden</code>属性。如果你的布局想要控制其他视图的属性（比如背景颜色），你可以建一个 <code>UICollectionViewLayoutAttributes</code> 的子类，然后加上你自己的属性。</p>

<p>布局属性对象 (layout attributes objects) 通过 <code>indexPath</code> 属性和他们对应的 cell，supplementary view 或者 decoration view 关联在一起。collection view 为所有 items 从布局对象中请求到布局属性后，它将会实例化所有视图，并将对应的属性应用到每个视图上去。</p>

<p>注意！这个方法涉及到所有类型的视图，也就是 cell，supplementary views 和 decoration views。一个幼稚的实现可能会选择忽略传入的矩形，并且为 collection view 中的所有视图返回布局属性。在原型设计和开发布局阶段，这是一个有效的方法。但是，这将对性能产生非常坏的影响，特别是可见 cell 远少于所有 cell 数量的时候，collection view 和布局对象将会为那些不可见的视图做额外不必要的工作。</p>

<p>你的实现需要做这几步：</p>

<ol>
<li><p>创建一个空的可变数组来存放所有的布局属性。</p></li>
<li><p>确定 index paths 中哪些 cells 的 frame 完全或部分位于矩形中。这个计算需要你从 collection view 的数据源中取出你需要显示的数据。然后在循环中调用你实现的 <code>layoutAttributesForItemAtIndexPath:</code> 方法为每个 index path 创建并配置一个合适的布局属性对象，并将每个对象添加到数组中。</p></li>
<li><p>如果你的布局包含 supplementary views，计算矩形内可见 supplementary view 的 index paths。在循环中调用你实现的 <code>layoutAttributesForSupplementaryViewOfKind:atIndexPath:</code> ，并且将这些对象加到数组中。通过为 kind 参数传递你选择的不同字符，你可以区分出不同种类的supplementary views（比如headers和footers）。当需要创建视图时，collection view 会将 kind 字符传回到你的数据源。记住 supplementary 和 decoration views 的数量和种类完全由布局控制。你不会受到 headers 和 footers 的限制。</p></li>
<li><p>如果布局包含 decoration views，计算矩形内可见 decoration views 的 index paths。在循环中调用你实现的 <code>layoutAttributesForDecorationViewOfKind:atIndexPath:</code> ，并且将这些对象加到数组中。</p></li>
<li><p>返回数组。</p></li>
</ol>

<p>我们自定义的布局没有使用 decoration views，但是使用了两种 supplementary views（column headers和row headers）:</p>

<pre><code>- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect
{
    NSMutableArray *layoutAttributes = [NSMutableArray array];
    // Cells
    // We call a custom helper method -indexPathsOfItemsInRect: here
    // which computes the index paths of the cells that should be included
    // in rect.
    NSArray *visibleIndexPaths = [self indexPathsOfItemsInRect:rect];
    for (NSIndexPath *indexPath in visibleIndexPaths) {
        UICollectionViewLayoutAttributes *attributes =
        [self layoutAttributesForItemAtIndexPath:indexPath];
        [layoutAttributes addObject:attributes];
    }

    // Supplementary views
    NSArray *dayHeaderViewIndexPaths = [self indexPathsOfDayHeaderViewsInRect:rect];
    for (NSIndexPath *indexPath in dayHeaderViewIndexPaths) {
        UICollectionViewLayoutAttributes *attributes =
        [self layoutAttributesForSupplementaryViewOfKind:@&quot;DayHeaderView&quot;
atIndexPath:indexPath];
        [layoutAttributes addObject:attributes];
    }

    NSArray *hourHeaderViewIndexPaths = [self indexPathsOfHourHeaderViewsInRect:rect];
    for (NSIndexPath *indexPath in hourHeaderViewIndexPaths) {
        UICollectionViewLayoutAttributes *attributes =
        [self layoutAttributesForSupplementaryViewOfKind:@&quot;HourHeaderView&quot;
atIndexPath:indexPath];
        [layoutAttributes addObject:attributes];
    }
    return layoutAttributes;
}
</code></pre>

<h3 id="toc_5">layoutAttributesFor…IndexPath</h3>

<p>有时，collection view 会为某个特殊的 cell，supplementary 或者 decoration view 向布局对象请求布局属性，而非所有可见的对象。这就是当其他三个方法开始起作用时，你实现的  <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayout_class/Reference/Reference.html#//apple_ref/occ/instm/UICollectionViewLayout/layoutAttributesForItemAtIndexPath:"><code>layoutAttributesForItemAtIndexPath:</code></a> 需要创建并返回一个单独的布局属性对象，这样才能正确的格式化传给你的 index path 所对应的 cell。</p>

<p>你可以通过调用 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewLayoutAttributes_class/Reference/Reference.html#//apple_ref/occ/clm/UICollectionViewLayoutAttributes/layoutAttributesForCellWithIndexPath:"><code>+[UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:]</code></a>这个方法，然后根据 index path 修改属性。为了得到需要显示在这个 index path 内的数据，你可能需要访问 collection view 的数据源。到目前为止，至少确保设置了 frame 属性，除非你所有的 cell 都位于彼此上方。</p>

<pre><code>- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath
{
    CalendarDataSource *dataSource = self.collectionView.dataSource;
    id event = [dataSource eventAtIndexPath:indexPath];
    UICollectionViewLayoutAttributes *attributes =
    [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];
    attributes.frame = [self frameForEvent:event];
    return attributes;
}
</code></pre>

<p>如果你正在使用自动布局，你可能会感到惊讶，我们正在直接修改布局参数的 frame 属性，而不是和约束共事，但这正是 UICollectionViewLayout 的工作。尽管你可能使用自动布局来定义collection view 的 frame 和它内部每个 cell 的布局，但 cells 的 frames 还是需要通过老式的方法计算出来。</p>

<p>类似的，<code>layoutAttributesForSupplementaryViewOfKind:atIndexPath:</code> 和 <code>layoutAttributesForDecorationViewOfKind:atIndexPath:</code> 方法分别需要为 supplementary 和 decoration views 做相同的事。只有你的布局包含这样的视图你才需要实现这两个方法。<code>UICollectionViewLayoutAttributes</code> 包含另外两个工厂方法，<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewLayoutAttributes_class/Reference/Reference.html#//apple_ref/occ/clm/UICollectionViewLayoutAttributes/layoutAttributesForSupplementaryViewOfKind:withIndexPath:"><code>+layoutAttributesForSupplementaryViewOfKind:withIndexPath:</code></a> 和 <br/>
<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewLayoutAttributes_class/Reference/Reference.html#//apple_ref/occ/clm/UICollectionViewLayoutAttributes/layoutAttributesForDecorationViewOfKind:withIndexPath:"><code>+layoutAttributesForDecorationViewOfKind:withIndexPath:</code></a>，用他们来创建正确的布局属性对象。</p>

<h3 id="toc_6">shouldInvalidateLayoutForBoundsChange:</h3>

<p>最后，当 collection view 的 bounds 改变时，布局需要告诉 collection view 是否需要重新计算布局。我的猜想是：当 collection view 改变大小时，大多数布局会被作废，比如设备旋转的时候。因此，一个幼稚的实现可能只会简单的返回 YES。虽然实现功能很重要，但是 scroll view 的 bounds 在滚动时也会改变，这意味着你的布局每秒会被丢弃多次。根据计算的复杂性判断，这将会对性能产生很大的影响。</p>

<p>当 collection view 的宽度改变时，我们自定义的布局必须被丢弃，但这滚动并不会影响到布局。幸运的是，collection view 将它的新 bounds 传给 <code>shouldInvalidateLayoutForBoundsChange:</code> 方法。这样我们便能比较视图当前的bounds 和新的 bounds 来确定返回值：</p>

<pre><code>- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds
{
    CGRect oldBounds = self.collectionView.bounds;
    if (CGRectGetWidth(newBounds) != CGRectGetWidth(oldBounds)) {
        return YES;
    }
        return NO;
}
</code></pre>

<h2 id="toc_7">动画</h2>

<h3 id="toc_8">插入和删除</h3>

<p>UITableView 中的 cell 自带了一套非常漂亮的插入和删除动画。但是当为 UICollectionView 增加和删除 cell 定义动画功能时，UIKit 工程师遇到这样一个问题：如果 collection view 的布局是完全可变的，那么预先定义好的动画就没办法和开发者自定义的布局很好的融合。他们提出了一个优雅的方法：当一个 cell （或者supplementary或者decoration view）被插入到 collection view 中时，collection view 不仅向其布局请求 cell 正常状态下的布局属性，同时还请求其初始的布局属性，比如，需要在开始有插入动画的 cell。collection view 会简单的创建一个 animation block，并在这个 block 中，将所有 cell 的属性从初始（initial）状态改变到常态（normal）。</p>

<p>通过提供不同的初始布局属性，你可以完全自定义插入动画。比如，设置初始的 alpha 为 0 将会产生一个淡入的动画。同时设置一个平移和缩放将会产生移动缩放的效果。</p>

<p>同样的原理应用到删除上，这次动画是从常态到一系列你设置的最终布局属性。这些都是你需要在布局类中为initial或final布局参数实现的方法.</p>

<ul>
<li><p>initialLayoutAttributesForAppearingItemAtIndexPath:</p></li>
<li><p>initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:</p></li>
<li><p>initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:</p></li>
<li><p>finalLayoutAttributesForDisappearingItemAtIndexPath:</p></li>
<li><p>finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:</p></li>
<li><p>finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:</p></li>
</ul>

<h3 id="toc_9">布局间切换</h3>

<p>可以通过类似的方式将一个 collection view 布局动态的切换到另外一个布局。当发送一个 <code>setCollectionViewLayout:animated:</code> 消息时，collection view 会为 cells 在新的布局中查询新的布局参数，然后动态的将每个 cell（通过index path在新旧布局中判断出相同的cell）从旧参数变换到新的布局参数。你不需要做任何事情。</p>

<h2 id="toc_10">结论</h2>

<p>根据自定义 collection view 布局的复杂性，写一个通常很不容易。确切的说，本质上这和从头写一个完整的实现相同布局自定义视图类一样困难了。因为所涉及的计算需要确定哪些子视图当前是可见的，以及它们的位置。尽管如此，使用 <code>UICollectionView</code> 还是给你带来了一些很好的效果，比如 cell 重用，自动支持动画，更不要提整洁的独立布局，子视图管理，以及数据提供架构规定（data preparation its architecture prescribes.）。</p>

<p>自定义 collection view 布局也是向<a href="http://objccn.io/issue-1-1/">轻量级 view controller</a> 迈出很好的一步，正如你的 view controller 不要包含任何布局代码。正如 Chris 的文章中解释的一样，将这一切和一个独立的 datasource 类结合在一起，collection view 的视图控制器将很难再包含任何代码。</p>

<p>每当我使用 <code>UICollectionView</code> 的时候，我被其简洁的设计所折服。对于一个有经验的 Apple 工程师，为了想出如此灵活的类，很可能需要首先考虑 <code>NSTableView</code> 和 <code>UITableView</code>。</p>

<h3 id="toc_11">扩展阅读</h3>

<ul>
<li><a href="http://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012334-CH1-SW1">Collection View Programming Guide</a>.</li>
<li><a href="http://nshipster.com/uicollectionview/">NSHipster on <code>UICollectionView</code></a>.</li>
<li><a href="http://ashfurrow.com/uicollectionview-the-complete-guide/"><code>UICollectionView</code>: The Complete Guide</a>, e-book by Ash Furrow.</li>
<li><a href="https://github.com/monospacecollective/MSCollectionViewCalendarLayout"><code>MSCollectionViewCalendarLayout</code></a> by Eric Horacek is an excellent and more complete implementation of a custom layout for a week calendar view.</li>
</ul>

<hr/>

<p><a href="http://objccn.io/issue-3/">话题 #3 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-3/collection-view-layouts.html">Custom Collection View Layouts</a></p>

<p>译文 <a href="http://answerhuang.duapp.com/index.php/2013/11/20/custom_collection_view_layouts/">自定义Collection View布局 - answser_huang</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义控件]]></title>
    <link href="http://coderforart.com/objccndemo/14415913597463.html"/>
    <updated>2015-09-07T10:02:39+08:00</updated>
    <id>http://coderforart.com/objccndemo/14415913597463.html</id>
    <content type="html"><![CDATA[
<p>自动布局在 OS X 10.7 中被引进，一年后在 iOS 6 中也可以用了。不久在 iOS 7 中的程序将会有望设置全局字体大小，因此除了不同的屏幕大小和方向，用户界面布局也需要更大的灵活性。Apple 也在自动布局上花了很大功夫，所以如果你还没做过这一块，那么现在就是接触这个技术的好时机。</p>

<p>很多开发者在第一次尝试使用这个技术时都非常挣扎，因为用 Xcode 4 的 Interface Builder 建立 constraint-based layouts 体验非常糟糕，但不要因为这个而灰心。自动布局其实比现在 Interface Builder 所支持的要好很多。Xcode 5 在这块中将会带来重要的变化。</p>

<p>这篇文章不是用来介绍 Auto Layout 的。如果你还没用过它，那还是先去 WWDC 2012 看看基础教程吧。(<a href="https://developer.apple.com/videos/wwdc/2012/?id=202">202 – Introduction to Auto Layout for iOS and OS X</a>, <a href="https://developer.apple.com/videos/wwdc/2012/?id=228">228 – Best Practices for Mastering Auto Layout</a>, <a href="https://developer.apple.com/videos/wwdc/2012/?id=232">232 – Auto Layout by Example</a>)。</p>

<p>相反我们会专注于一些高级的使用技巧和方法，这将会让你使用自动布局的时候效率更高，(开发)生活更幸福。大多数内容在 WWDC 会议中都有提到，但它们都是在日常工作中容易被审查或遗忘的。</p>

<p><a name="layout-process"> </a></p>

<h2 id="toc_0">布局过程</h2>

<p>首先我们总结一下自动布局将视图显示到屏幕上的步骤。当你根据自动布局尽力写出你想要的布局种类时，特别是高级的使用情况和动画，这有利于后退一步，并回忆布局过程是怎么工作的。</p>

<p>和 springs，struts 比起来，在视图被显示之前，自动布局引入了两个额外的步骤：更新约束 (updating constraints) 和布局视图 (laying out views)。每一步都是依赖前一步操作的；显示依赖于布局视图，布局视图依赖于更新约束。</p>

<p>第一步：更新约束，可以被认为是一个“计量传递 (measurement pass)”。这是自下而上（从子视图到父视图）发生的，它为布局准备好必要的信息，而这些布局将在实际设置视图的 frame 时被传递过去并被使用。你可以通过调用 setNeedsUpdateConstraints 来触发这个操作，同时，你对约束条件系统做出的任何改变都将自动触发这个方法。无论如何，通知自动布局关于自定义视图中任何可能影响布局的改变是非常有用的。谈到自定义视图，你可以在这个阶段重写 updateConstraints 来为你的视图增加需要的本地约束。</p>

<p>第二步：布局，这是个自上而下（从父视图到子视图）的过程，这种布局操作实际上是通过设置 frame（在 OS X 中）或者 center 和 bounds（在 iOS 中）将约束条件系统的解决方案应用到视图上。你可以通过调用 setNeedsLayout 来触发一个操作请求，这并不会立刻应用布局，而是在稍后再进行处理。因为所有的布局请求将会被合并到一个布局操作中去，所以你不需要为经常调用这个方法而担心。</p>

<p>你可以调用 <code>layoutIfNeeded</code> / <code>layoutSubtreeIfNeeded</code>（分别针对 iOS / OS X）来强制系统立即更新视图树的布局。如果你下一步操作依赖于更新后视图的 frame，这将非常有用。在你自定义的视图中，你可以重写 <code>layoutSubviews</code> / <code>layout</code> 来获得控制布局变化的所有权，我们稍后将展示使用方法。</p>

<p>最终，不管你是否用了自动布局，显示器都会自上而下将渲染后的视图传递到屏幕上，你也可以通过调用 <code>setNeedsDisplay</code> 来触发，这将会导致所有的调用都被合并到一起推迟重绘。重写熟悉的 <code>drawRect:</code>能够让我们获得自定义视图中显示过程的所有权。 </p>

<p>既然每一步都是依赖前一步操作的，如果有任何布局的变化还没实行的话，显示操作将会触发一个布局行为。类似地，如果约束条件系统中存在没有实行的改变，布局变化也将会触发更新约束条件。</p>

<p>需要牢记的是，这三步并不是单向的。基于约束条件的布局是一个迭代的过程，布局操作可以基于之前的布局方案来对约束做出更改，而这将再次触发约束的更新，并紧接另一个布局操作。这可以被用来创建高级的自定义视图布局，但是如果你每一次调用的自定义 <code>layoutSubviews</code> 都会导致另一个布局操作的话，你将会陷入到无限循环的麻烦中去。</p>

<h2 id="toc_1">为自定义视图启动自动布局</h2>

<p>当创建一个自定义视图时，你需要知道关于自动布局的这些事情：具体指定一个恰当的固有内容尺寸 (intrinsic content size)，区分开视图的 frame 和 alignment rect，启动 baseline-aligned 布局，如何 hook 到布局过程中，我们将会逐一了解这些部分。</p>

<h3 id="toc_2">固有内容尺寸（Intrinsic Content Size ）</h3>

<p>固有内容尺寸是一个视图期望为其显示特定内容得到的大小。比如，<code>UILabel</code> 有一个基于字体的首选高度，一个基于字体和显示文本的首选宽度。<code>UIProgressView</code> 仅有一个基于其插图的首选高度，但没有首选宽度。一个没有格式的 <code>UIView</code> 既没有首选宽度也没有首选高度。</p>

<p>你需要根据想要显示的内容来决定你的自定义视图是否具有一个固有内容尺寸，如果有的话，它是在哪个尺度上固有。</p>

<p>为了在自定义视图中实现固有内容尺寸，你需要做两件事：重写  <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/intrinsicContentSize"><code>intrinsicContentSize</code></a> 为内容返回恰当的大小，无论何时有任何会影响固有内容尺寸的改变发生时，调用 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/invalidateIntrinsicContentSize"><code>invalidateIntrinsicContentSize</code></a>。如果这个视图只有一个方向的尺寸设置了固有尺寸，那么为另一个方向的尺寸返回 <code>UIViewNoIntrinsicMetric</code> / <code>NSViewNoIntrinsicMetric</code>。</p>

<p>需要注意的是，固有内容尺寸必须是独立于视图 frame 的。例如，不可能返回一个基于 frame 高度或宽度的特定高宽比的固有内容尺寸。</p>

<h3 id="toc_3">压缩阻力 (Compression Resistance) 和 内容吸附 (Content Hugging)</h3>

<blockquote>
<p><p><span class="secondary radius label">译者注</span> 我理解为压缩阻力和内容吸附性，实在是想不到更贴切的名称了。压缩阻力是控制视图在两个方向上的收缩性，内容吸附性是当视图的大小改变时，它会尽量让视图靠近它的固有内容尺寸</p>
</blockquote>

<p>每个视图在两个方向上都分配有内容压缩阻力优先级和内容吸附性优先级。只有当视图定义了固有内容尺寸时这些属性才能起作用，如果没有定义内容大小，那就没法阻止被压缩或者吸附了。</p>

<p>在后台中，固有内容尺寸和这些优先值被转换为约束条件。一个固有内容尺寸为 <code>{100，30}</code> 的 label，水平/垂直压缩阻力优先值为 <code>750</code>，水平/垂直的内容吸附性优先值为 <code>250</code>，这四个约束条件将会生成：</p>

<pre><code>H:[label(&lt;=100@250)]
H:[label(&gt;=100@750)]
V:[label(&lt;=30@250)]
V:[label(&gt;=30@750)]
</code></pre>

<p>如果你不熟悉上面约束条件所使用的可视格式语言，你可以到 <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html">Apple 文档</a> 中了解。记住，这些额外的约束条件对了解自动布局的行为产生了隐式的帮助，同时也更好理解它的错误信息。</p>

<h3 id="toc_4">Frame 和 Alignment Rect</h3>

<p>自动布局并不会操作视图的 frame，但能作用于视图的 alignment rect。大家很容易忘记它们之间细微的差别，因为在很多情况下，它们是相同的。但是alignment rect 实际上是一个强大的新概念：从一个视图的视觉外观解耦出视图的 layout alignment edges。</p>

<p>比如，一个自定义 icon 类型的按钮比我们期望点击目标还要小的时候，这将会很难布局。当插图显示在一个更大的 frame 中时，我们将不得不了解它显示的大小，并且相应调整按钮的 frame，这样 icon 才会和其他界面元素排列好。当我们想要在内容的周围绘制像 badges，阴影，倒影的装饰时，也会发生同样的情况。</p>

<p>我们可以使用 alignment rect 简单的定义需要用来布局的矩形。在大多数情况下，你仅需要重写 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/alignmentRectInsets"><code>alignmentRectInsets</code></a> 方法，这个方法允许你返回相对于 frame 的 edge insets。如果你需要更多控制权，你可以重写 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/alignmentRectForFrame:"><code>alignmentRectForFrame:</code></a> 和 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/frameForAlignmentRect:"><code>frameForAlignmentRect:</code></a>。如果你不想减去固定的 insets，而是计算基于当前 frame 的 alignment rect，那么这两个方法将会非常有用。但是你需要确保这两个方法是互为可逆的。</p>

<p>关于这点，回忆上面提及到的视图固有内容尺寸引用它的 alignment rect，而不是 frame。这是有道理的，因为自动布局直接根据固有内容尺寸产生压缩阻力和内容吸附约束条件。</p>

<h3 id="toc_5">基线对齐 (Baseline Alignment)</h3>

<p>为了让使用 <code>NSLayoutAttributeBaseline</code> 属性的约束条件对自定义视图奏效，我们需要做一些额外的工作。当然，这只有我们讨论的自定义视图中有类似基准线的东西时，才有意义。</p>

<p>在 iOS 中，可以通过实现 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html"><code>viewForBaselineLayout</code></a> 来激活基线对齐。在这里返回的视图底边缘将会作为 基线。默认实现只是简单的返回自己，然而自定义的实现可以返回任何子视图。在 OS X 中，你不需要返回一个子视图，而是重新定义 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/baselineOffsetFromBottom"><code>baselineOffsetFromBottom</code></a> 返回一个从视图底部边缘开始的 offset，这和在 iOS 中一样，默认实现都是返回 0。</p>

<h3 id="toc_6">控制布局</h3>

<p>在自定义视图中，你能完全控制它子视图的布局。你可以增加本地约束；根据内容变化需要，你可以改变本地约束；你可以为子视图调整布局操作的结果；或者你可以选择抛弃自动布局。</p>

<p>但确保你明智的使用这个权利。大多数情况下可以简单地通过为你的子视图简单的增加本地约束来处理。</p>

<h4 id="toc_7">本地约束</h4>

<p>如果我们想用几个子视图组成一个自定义视图，我们需要以某种方式布局这些子视图。在自动布局的环境中，自然会想到为这些视图增加本地约束。然而，需要注意的是，这将会使你自定义的视图是基于自动布局的，这个视图不能再被使用于未启用自动布局的 windows 中。最好通过实现 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/clm/NSView/requiresConstraintBasedLayout"><code>requiresConstraintBasedLayout</code></a> 返回 YES 明确这个依赖。</p>

<p>添加本地约束的地方是 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/updateConstraints"><code>updateConstraints</code></a>。确保在你的实现中增加任何你需要布局子视图的约束条件<strong>之后</strong>，调用一下 <code>[super updateConstraints]</code>。在这个方法中，你不会被允许禁用何约束条件，因为你已经进入上面所描述的<a href="#layout-process">布局过程</a>的第一步了。如果尝试着这样做，将会产生一个友好的错误信息 “programming error”。</p>

<p>如果稍后一个失效的约束条件发生了改变的话，你需要立刻移除这个约束并调用 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html"><code>setNeedsUpdateConstraints</code></a>。事实上，仅在这种情况下你需要触发更新约束条件的操作。</p>

<h4 id="toc_8">控制子视图布局</h4>

<p>如果你不能利用布局约束条件达到子视图预期的布局，你可以进一步在 iOS 里重写 <a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/layoutSubviews"><code>layoutSubviews</code></a> 或者在 OS X 里面重写 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/layout"><code>layout</code></a>。通过这种方式，当约束条件系统得到解决并且结果将要被应用到视图中时，你便已经进入到<a href="#layout-process">布局过程</a>的第二步。</p>

<p>最极端的情况是不调用父类的实现，自己重写全部的 <code>layoutSubviews / layout</code>。这就意味着你在这个视图里的视图树里抛弃了自动布局。从现在起，你可以按喜欢的方式手动放置子视图。</p>

<p>如果你仍然想使用约束条件布局子视图，你需要调用 <code>[super layoutSubviews]</code> / <code>[super layout]</code>，然后对布局进行微调。你可以通过这种方式创建那些通过定于约束无法实现的布，比如，由到视图大小之间的关系或是视图之间间距的关系来定义的布局。</p>

<p>这方面另一个有趣的使用案例就是创建一个布局依赖的视图树。当自动布局完成第一次传递并且为自定义视图的子视图设置好 frame 后，你便可以检查子视图的位置和大小，并为视图层级和（或）约束条件做出调整。<a href="http://onevcat.com/2012/09/autoayout/">WWDC session 228 – Best Practices for Mastering Auto Layout</a> 有一个很好的例子。</p>

<p>你也可以在第一次布局操作完成后再决定改变约束条件。比如，如果视图变得太窄的话，将原来排成一行的子视图转变成两行。</p>

<pre><code>- layoutSubviews
{
    [super layoutSubviews];
    if (self.subviews[0].frame.size.width &lt;= MINIMUM_WIDTH)
    {
        [self removeSubviewConstraints];
        self.layoutRows += 1; [super layoutSubviews];
    }
}

- updateConstraints
{
    // 根据 self.layoutRows 添加约束...
    [super updateConstraints];
}
</code></pre>

<h2 id="toc_9">多行文本的固有内容尺寸</h2>

<p><code>UILabel</code> 和 <code>NSTextField</code> 对于多行文本的固有内容尺寸是模糊不清的。文本的高度取决于行的宽度，这也是解决约束条件时需要弄清的问题。为了解决这个问题，这两个类都有一个叫做 <a href="http://developer.apple.com/library/ios/documentation/uikit/reference/UILabel_Class/Reference/UILabel.html#//apple_ref/occ/instp/UILabel/preferredMaxLayoutWidth"><code>preferredMaxLayoutWidth</code></a> 的新属性，这个属性指定了行宽度的最大值，以便计算固有内容尺寸。</p>

<p>因为我们通常不能提前知道这个值，为了获得正确的值我们需要先做两步操作。首先，我们让自动布局做它的工作，然后用布局操作结果的 frame 更新给首选最大宽度，并且再次触发布局。</p>

<pre><code>- (void)layoutSubviews
{
    [super layoutSubviews];
    myLabel.preferredMaxLayoutWidth = myLabel.frame.size.width;
    [super layoutSubviews];
}
</code></pre>

<p>第一次调用 <code>[super layoutSubviews]</code> 是为了获得 label 的 frame，而第二次调用是为了改变后更新布局。如果省略第二个调用我们将会得到一个 <code>NSInternalInconsistencyException</code> 的错误，因为我们改变了更新约束条件的布局操作，但我们并没有再次触发布局。</p>

<p>我们也可以在 label 子类本身中这样做：</p>

<pre><code>@implementation MyLabel
- (void)layoutSubviews
{
    self.preferredMaxLayoutWidth = self.frame.size.width;
    [super layoutSubviews];
}
@end
</code></pre>

<p>在这种情况下，我们不需要先调用 <code>[super layoutSubviews]</code>，因为当 <code>layoutSubviews</code> 被调用时，label 就已经有一个 frame 了。</p>

<p>为了在视图控制器层级做出这样的调整，我们用挂钩到 viewDidLayoutSubviews。这时候第一个自动布局操作的 frame 已经被设置，我们可以用它们来设置首选最大宽度。</p>

<pre><code>- (void)viewDidLayoutSubviews
{
    [super viewDidLayoutSubviews];
    myLabel.preferredMaxLayoutWidth = myLabel.frame.size.width;
    [self.view layoutIfNeeded];
}
</code></pre>

<p>最后，确保你没有给 label 设置一个比 label 内容压缩阻力优先级还要高的具体高度约束。否则它将会取代根据内容计算出的高度。</p>

<h2 id="toc_10">动画</h2>

<p>说到根据自动布局的视图动画，有两个不同的基本策略：约束条件自身动态化；以及改变约束条件重新计算 frame，并使用 Core Animation 将 frame 插入到新旧位置之间。</p>

<p>这两种处理方法不同的是：约束条件自身动态化产生的布局结果总是符合约束条件系统。与此相反，使用 Core Animation 插入值到新旧 frame 之间会临时违反约束条件。</p>

<p>直接使用约束条件动态化只是在 OS X 上的一种可行策略，并且这对你能使用的动画有局限性，因为约束条件一旦创建后，只有其常量可以被改变。在 OS X 中你可以在约束条件的常量中使用动画代理来驱动动画，而在 iOS 中，你只能手动进行控制。另外，这种方法明显比 Core Animation 方法慢得多，这也使得它暂时不适合移动平台。</p>

<p>当使用 Core Animation 方法时，即使不使用自动布局，动画的工作方式在概念上也是一样的。不同的是，你不需要手动设置视图的目标 frames，取而代之的是修改约束条件并触发一个布局操作为你设置 frames。在 iOS 中，代替：</p>

<pre><code>[UIView animateWithDuration:1 animations:^{
    myView.frame = newFrame;
}];
</code></pre>

<p>你现在需要写：</p>

<pre><code>// 更新约束
[UIView animateWithDuration:1 animations:^{
    [myView layoutIfNeeded];
}];
</code></pre>

<p>请注意，使用这种方法，你可以对约束条件做出的改变并不局限于约束条件的常量。你可以删除约束条件，增加约束条件，甚至使用临时动画约束条件。由于新的约束只被解释一次来决定新的 frames，所以更复杂的布局改变都是有可能的。</p>

<p>需要记住的是：Core Animation 和 Auto Layout 结合在一起产生视图动画时，自己不要接触视图的 frame。一旦视图使用自动布局，那么你已经将设置 frame 的责任交给了布局系统。你的干扰将造成怪异的行为。</p>

<p>这也意味着，如果使用的视图变换 (transform) 改变了视图的 frame 的话，它和自动布局是无法一起正常使用的。考虑下面这个例子：</p>

<pre><code>[UIView animateWithDuration:1 animations:^{
    myView.transform = CGAffineTransformMakeScale(.5, .5);
}];
</code></pre>

<p>通常我们期望这个方法在保持视图的中心时，将它的大小缩小到原来的一半。但是自动布局的行为是根据我们建立的约束条件种类来放置视图的。如果我们将其居中于它的父视图，结果便像我们预想的一样，因为应用视图变换会触发一个在父视图内居中新 frame 的布局操作。然而，如果我们将视图的左边缘对齐到另一个视图，那么这个 alignment 将会粘连住，并且中心点将会移动。</p>

<p>不管怎么样，即使最初的结果跟我们预想的一样，像这样通过约束条件将转换应用到视图布局上并不是一个好主意。视图的 frame 没有和约束条件同步，也将导致怪异的行为。</p>

<p>如果你想使用 transform 来产生视图动画或者直接使它的 frame 动态化，最干净利索的技术是将这个视图嵌入到一个视图容器内，然后你可以在容器内重写 layoutSubviews，要么选择完全脱离自动布局，要么仅仅调整它的结果。举个例子，如果我们在我们的容器内建立一个子视图，它根据容器的顶部和左边缘自动布局，当布局根据以上的设置缩放转换后我们可以调整它的中心：</p>

<pre><code>- (void)layoutSubviews
{
    [super layoutSubviews];
    static CGPoint center = {0,0};
    if (CGPointEqualToPoint(center, CGPointZero)) {
        // 在初次布局后获取中心点
        center = self.animatedView.center;
    } else {
        // 将中心点赋回给动画视图
        self.animatedView.center = center;
    }
}
</code></pre>

<p>如果我们将 animatedView 属性暴露为 IBOutlet，我们甚至可以使用 Interface Builder 里面的容器，并且使用约束条件放置它的的子视图，同时还能够根据固定的中心应用缩放转换。</p>

<h2 id="toc_11">调试</h2>

<p>当谈到调试自动布局，OS X 比 iOS 还有一个重要的优势。在 OS X 中，你可以利用 Instrument 的 Cocoa Layout 模板，或者是 <code>NSWindow</code> 的 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSWindow_Class/Reference/Reference.html#//apple_ref/occ/instm/NSWindow/visualizeConstraints:">visualizeConstraints:</a> 方法。而且 <code>NSView</code> 有一个 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSUserInterfaceItemIdentification_Protocol/Introduction/Introduction.html#//apple_ref/occ/intfp/NSUserInterfaceItemIdentification/identifier">identifier</a> 属性，为了获得更多可读的自动布局错误信息，你可以在 Interface Builder 或代码里面设置这个属性。</p>

<h3 id="toc_12">不可满足的约束条件</h3>

<p>如果我们在 iOS 中遇到不可满足的约束条件，我们只能在输出的日志中看到视图的内存地址。尤其是在更复杂的布局中，有时很难辨别出视图的哪一部分出了问题。然而，在这种情况下，还有几种方法可以帮到我们。</p>

<p>首先，当你在不可满足的约束条件错误信息中看到 <code>NSLayoutResizingMaskConstraints</code> 时，你肯定忘了为你某一个视图设定 <code>translatesAutoResizingMaskIntoConstraints</code> 为 NO。Interface Builder 中会自动设置，但是使用代码时，你需要为所有的视图手动设置。</p>

<p>如果不是很明确是哪个视图导致的问题，你就需要通过内存地址来辨认视图。最简单的方法是使用调试控制台。你可以打印视图本身或它父视图的描述，甚至递归描述的树视图。这通常会提示你需要处理哪个视图。</p>

<pre><code>(lldb) po 0x7731880
$0 = 124983424 &lt;UIView: 0x7731880; frame = (90 -50; 80 100); 
layer = &lt;CALayer: 0x7731450&gt;&gt;

(lldb) po [0x7731880 superview]
$2 = 0x07730fe0 &lt;UIView: 0x7730fe0; frame = (32 128; 259 604); 
layer = &lt;CALayer: 0x7731150&gt;&gt;

(lldb) po [[0x7731880 superview] recursiveDescription]
$3 = 0x07117ac0 &lt;UIView: 0x7730fe0; frame = (32 128; 259 604); layer = &lt;CALayer: 0x7731150&gt;&gt;
   | &lt;UIView: 0x7731880; frame = (90 -50; 80 100); layer = &lt;CALayer: 0x7731450&gt;&gt;
   | &lt;UIView: 0x7731aa0; frame = (90 101; 80 100); layer = &lt;CALayer: 0x7731c60&gt;&gt;
</code></pre>

<p>一个更直观的方法是在控制台修改有问题的视图，这样你可以在屏幕上标注出来。比如，你可以改变它的背景颜色：</p>

<pre><code>(lldb) expr ((UIView *)0x7731880).backgroundColor = [UIColor purpleColor]
</code></pre>

<p>确保重新执行你的程序，否则改变不会在屏幕上显示出来。还要注意将内存地址转换为 <code>(UIView *)</code> ，以及额外的圆括号，这样我们就可以使用点操作。另外，你当然也可以通过发送消息来实现：</p>

<pre><code>(lldb) expr [(UIView *)0x7731880 setBackgroundColor:[UIColor purpleColor]]
</code></pre>

<p>另一种方法是使用 Instrument 的 allocation 模板，根据图表分析。一旦你从错误消息中得到内存地址（运行 Instruments 时，你从 Console 应用中获得的错误消息），你可以将 Instrument 的详细视图切换到 Objects List 页面，并且用 Cmd-F 搜索那个内存地址。这将会为你显示分配视图对象的方法，这通常是一个很好的暗示（至少对那些由代码创建的视图来说是这样的）。</p>

<p>你也可以通过改进错误信息本身，来更容易地在 iOS 中弄懂不可满足的约束条件错误到底在哪里。我们可以在一个 category 中重写 <code>NSLayoutConstraint</code> 的描述，并且将视图的 tags 包含进去：</p>

<pre><code>@implementation NSLayoutConstraint (AutoLayoutDebugging)
#ifdef DEBUG
- (NSString *)description
{
    NSString *description = super.description;
    NSString *asciiArtDescription = self.asciiArtDescription;
    return [description stringByAppendingFormat:@&quot; %@ (%@, %@)&quot;, 
        asciiArtDescription, [self.firstItem tag], [self.secondItem tag]];
}
#endif
@end
</code></pre>

<p>如果整数的 <code>tag</code> 属性信息不够的话，我们还可以得到更多新奇的东西，并且在视图类中增加我们自己命名的属性，然后可以打印到错误消息中。我们甚至可以在 Interface Builder 中，使用 identity 检查器中的 “User Defined Runtime Attributes” 为自定义属性分配值。</p>

<pre><code>@interface UIView (AutoLayoutDebugging)
- (void)setAbc_NameTag:(NSString *)nameTag;
- (NSString *)abc_nameTag;
@end

@implementation UIView (AutoLayoutDebugging)
- (void)setAbc_NameTag:(NSString *)nameTag
{
    objc_setAssociatedObject(self, &quot;abc_nameTag&quot;, nameTag, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (NSString *)abc_nameTag
{
    return objc_getAssociatedObject(self, &quot;abc_nameTag&quot;);
}
@end

@implementation NSLayoutConstraint (AutoLayoutDebugging)
#ifdef DEBUG
- (NSString *)description
{
    NSString *description = super.description;
    NSString *asciiArtDescription = self.asciiArtDescription;
    return [description stringByAppendingFormat:@&quot; %@ (%@, %@)&quot;, asciiArtDescription, [self.firstItem abc_nameTag], [self.secondItem abc_nameTag]];
}
#endif
@end
</code></pre>

<p>通过这种方法错误消息变得更可读，并且你不需要找出内存地址对应的视图。然而，对你而言，你需要做一些额外的工作以确保每次为视图分配的名字都是有意义。</p>

<p><a href="https://twitter.com/danielboedewadt">Daniel</a> 提出了另一个很巧妙的方法，可以为你提供更好的错误消息并且不需要额外的工作：对于每个布局约束条件，都需要将调用栈的标志融入到错误消息中。这样就很容易看出来问题涉及到的约束了。要做到这一点，你需要 swizzle UIView 或者 NSView 的 <code>addConstraint:</code> / <code>addConstraints:</code> 方法，以及布局约束的 <code>description</code> 方法。在添加约束的方法中，你需要为每个约束条件关联一个对象，这个对象描述了当前调用栈堆栈的第一个栈顶信息（或者任何你从中得到的信息）：</p>

<pre><code>static void AddTracebackToConstraints(NSArray *constraints)
{
    NSArray *a = [NSThread callStackSymbols];
    NSString *symbol = nil;
    if (2 &lt; [a count]) {
        NSString *line = a[2];
        // Format is
        //               1         2         3         4         5
        //     012345678901234567890123456789012345678901234567890123456789
        //     8   MyCoolApp                           0x0000000100029809 -[MyViewController loadView] + 99
        //
        // Don&#39;t add if this wasn&#39;t called from &quot;MyCoolApp&quot;:
        if (59 &lt;= [line length]) {
            line = [line substringFromIndex:4];
            if ([line hasPrefix:@&quot;My&quot;]) {
                symbol = [line substringFromIndex:59 - 4];
            }
        }
    }
    for (NSLayoutConstraint *c in constraints) {
        if (symbol != nil) {
            objc_setAssociatedObject(c, &amp;ObjcioLayoutConstraintDebuggingShort, 
                symbol, OBJC_ASSOCIATION_COPY_NONATOMIC);
        }
        objc_setAssociatedObject(c, &amp;ObjcioLayoutConstraintDebuggingCallStackSymbols, 
            a, OBJC_ASSOCIATION_COPY_NONATOMIC);
    }
}

@end
</code></pre>

<p>一旦你为每个约束对象提供这些信息，你可以简单的修改 <code>UILayoutConstraint</code> 的描述方法将其包含到输出日志中。</p>

<pre><code>- (NSString *)objcioOverride_description {
    // call through to the original, really
    NSString *description = [self objcioOverride_description];
    NSString *objcioTag = objc_getAssociatedObject(self, &amp;ObjcioLayoutConstraintDebuggingShort);
    if (objcioTag == nil) {
        return description;
    }
    return [description stringByAppendingFormat:@&quot; %@&quot;, objcioTag];
}
</code></pre>

<p>检出这个<a href="https://github.com/objcio/issue-3-auto-layout-debugging">GitHub</a>仓库，了解这一技术的代码示例。</p>

<h3 id="toc_13">有歧义的布局</h3>

<p>另一个常见的问题就是有歧义的布局。如果我们忘记添加一个约束条件，我们经常会想为什么布局看起来不像我们所期望的那样。<code>UIView</code> 和 <code>NSView</code> 提供三种方式来查明有歧义的布局：<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/hasAmbiguousLayout"><code>hasAmbiguousLayout</code></a>，<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/exerciseAmbiguityInLayout"><code>exerciseAmbiguityInLayout</code></a>，和私有方法 <code>_autolayoutTrace</code>。</p>

<p>顾名思义，如果视图存在有歧义的布局，那么 <code>hasAmbiguousLayout</code> 返回YES。如果我们不想自己遍历视图层并记录这个值，可以使用私有方法 _autolayoutTrace。这将返回一个描述整个视图树的字符串：类似于 <a href="http://developer.apple.com/library/ios/#technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION34"><code>recursiveDescription</code></a> 的输出（当视图存在有歧义的布局时，这个方法会告诉你）。</p>

<p>由于这个方法是私有的，确保正式产品里面不要包含调用这个方法的任何代码。为了防止你犯这种错误，你可以在视图的category中这样做：</p>

<pre><code>@implementation UIView (AutoLayoutDebugging)
- (void)printAutoLayoutTrace {
    #ifdef DEBUG
    NSLog(@&quot;%@&quot;, [self performSelector:@selector(_autolayoutTrace)]);
    #endif
}
@end
</code></pre>

<p><code>_autolayoutTrace</code> 打印的结果如下：</p>

<pre><code>2013-07-23 17:36:08.920 FlexibleLayout[4237:907] 
*&lt;UIWindow:0x7269010&gt;
|   *&lt;UILayoutContainerView:0x7381250&gt;
|   |   *&lt;UITransitionView:0x737c4d0&gt;
|   |   |   *&lt;UIViewControllerWrapperView:0x7271e20&gt;
|   |   |   |   *&lt;UIView:0x7267c70&gt;
|   |   |   |   |   *&lt;UIView:0x7270420&gt; - AMBIGUOUS LAYOUT
|   |   &lt;UITabBar:0x726d440&gt;
|   |   |   &lt;_UITabBarBackgroundView:0x7272530&gt;
|   |   |   &lt;UITabBarButton:0x726e880&gt;
|   |   |   |   &lt;UITabBarSwappableImageView:0x7270da0&gt;
|   |   |   |   &lt;UITabBarButtonLabel:0x726dcb0&gt;
</code></pre>

<p>正如不可满足约束条件的错误消息一样，我们仍然需要弄明白打印出的内存地址所对应的视图。</p>

<p>另一个标识出有歧义布局更直观的方法就是使用 <code>exerciseAmbiguityInLayout</code>。这将会在有效值之间随机改变视图的 frame。然而，每次调用这个方法只会改变 frame 一次。所以当你启动程序的时候，你根本不会看到改变。创建一个遍历所有视图层级的辅助方法是一个不错的主意，并且让所有的视图都有一个歧义的布局“晃动 (jiggle)”。</p>

<pre><code>@implementation UIView (AutoLayoutDebugging)
- (void)exerciseAmiguityInLayoutRepeatedly:(BOOL)recursive {
    #ifdef DEBUG
    if (self.hasAmbiguousLayout) {
        [NSTimer scheduledTimerWithTimeInterval:.5
                                     target:self
                                   selector:@selector(exerciseAmbiguityInLayout)
                                   userInfo:nil
                                    repeats:YES];
    }
    if (recursive) {
        for (UIView *subview in self.subviews) {
            [subview exerciseAmbiguityInLayoutRepeatedly:YES];
        }
    }
    #endif
} @end
</code></pre>

<h3 id="toc_14">NSUserDefault选项</h3>

<p>有几个有用的 <code>NSUserDefault</code> 选项可以帮助我们调试、测试自动布局。你可以在<a href="http://stackoverflow.com/questions/11721656/how-to-set-nsconstraintbasedlayoutvisualizemutuallyexclusiveconstraints/13044693#13044693">代码中</a>设定，或者你也可以在 <a href="http://stackoverflow.com/questions/11721656/how-to-set-nsconstraintbasedlayoutvisualizemutuallyexclusiveconstraints/13138933#13138933">scheme editor</a> 中指定它们作为启动参数。</p>

<p>顾名思义，<code>UIViewShowAlignmentRects</code>和 <code>NSViewShowAlignmentRects</code> 设置视图可见的 alignment rects。<code>NSDoubleLocalizedStrings</code> 简单的获取并复制每个本地化的字符串。这是一个测试更长语言布局的好方法。最后，设置 <code>AppleTextDirection</code> 和 <code>NSForceRightToLeftWritingDirection</code> 为 <code>YES</code>，来模拟从右到左的语言。</p>

<blockquote>
<p><p><span class="secondary radius label">编者注</span> 如果你不知道怎么在 scheme 中设置类似 <code>NSDoubleLocalizedStrings</code>，这里有一张图来说明；</p>

<p><img src="http://img.objccn.io/issue-3/NSDoubleLocalizedStrings.png" alt="pic"/></p>
</blockquote>

<h2 id="toc_15">约束条件代码</h2>

<p>当在代码中设置视图和它们的约束条件时候，一定要记得将 <a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/translatesAutoresizingMaskIntoConstraints"><code>translatesAutoResizingMaskIntoConstraints</code></a> 设置为 NO。如果忘记设置这个属性几乎肯定会导致不可满足的约束条件错误。即使你已经用自动布局一段时间了，但还是要小心这个问题，因为很容易在不经意间发生产生这个错误。</p>

<p>当你使用 <a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instm/UIView/translatesAutoresizingMaskIntoConstraints">可视化结构语言 (visual format language, VFL)</a> 设置约束条件时， <code>constraintsWithVisualFormat:options:metrics:views:</code> 方法有一个很有用的 <code>option</code> 参数。如果你还没有用过，请参见文档。这不同于格式化字符串只能影响一个视图，它允许你调整在一定范围内的视图。举个例子，如果用可视格式语言指定水平布局，那么你可以使用 <code>NSLayoutFormatAlignAllTop</code> 排列可视语言里所有视图为上边缘对齐。</p>

<p>还有一个使用可视格式语言在父视图中居中子视图的小技巧，这技巧利用了不均等约束和可选参数。下面的代码在父视图中水平排列了一个视图：</p>

<pre><code>UIView *superview = theSuperView;
NSDictionary *views = NSDictionaryOfVariableBindings(superview, subview);
NSArray *c = [NSLayoutConstraint 
                constraintsWithVisualFormat:@&quot;V:[superview]-(&lt;=1)-[subview]&quot;]
                                    options:NSLayoutFormatAlignAllCenterX
                                    metrics:nil
                                      views:views];
[superview addConstraints:c];
</code></pre>

<p>这利用了 <code>NSLayoutFormatAlignAllCenterX</code> 选项在父视图和子视图间创建了居中约束。格式化字符串本身只是一个虚拟的东西，它会产生一个指定的约束，通常情况下只要子视图是可见的，那么父视图底部和子视图顶部边缘之间的空间就应该小于等于1点。你可以颠倒示例中的方向达到垂直居中的效果。</p>

<p>使用可视格式语言另一个方便的辅助方法就是我们在上面例子中已经使用过的 NSDictionaryFromVariableBindings 宏指令，你传递一个可变数量的变量过去，返回得到一个键为变量名的字典。</p>

<p>为了布局任务，你需要一遍一遍的调试，你可以方便的创建自己的辅助方法。比如，你想要垂直地排列一系列视图，想要它们垂直方向间距一致，水平方向上所有视图以它们的左边缘对齐，用下面的方法将会方便很多：</p>

<pre><code>@implementation UIView (AutoLayoutHelpers)
+ leftAlignAndVerticallySpaceOutViews:(NSArray *)views 
                             distance:(CGFloat)distance 
{
    for (NSUInteger i = 1; i &lt; views.count; i++) {
        UIView *firstView = views[i - 1];
        UIView *secondView = views[i];
        firstView.translatesAutoResizingMaskIntoConstraints = NO;
        secondView.translatesAutoResizingMaskIntoConstraints = NO;

        NSLayoutConstraint *c1 = constraintWithItem:firstView
                                          attribute:NSLayoutAttributeBottom
                                          relatedBy:NSLayoutRelationEqual
                                             toItem:secondView
                                          attribute:NSLayoutAttributeTop
                                         multiplier:1
                                           constant:distance];

        NSLayoutConstraint *c2 = constraintWithItem:firstView
                                          attribute:NSLayoutAttributeLeading
                                          relatedBy:NSLayoutRelationEqual
                                             toItem:secondView
                                          attribute:NSLayoutAttributeLeading
                                         multiplier:1
                                           constant:0];

        [firstView.superview addConstraints:@[c1, c2]];
    }
}
@end
</code></pre>

<p>同时也有许多不同的自动布局的库采用了不同的方法来简化约束条件代码。</p>

<h2 id="toc_16">性能</h2>

<p>自动布局是布局过程中额外的一个步骤。它需要一组约束条件，并把这些约束条件转换成 frame。因此这自然会产生一些性能的影响。你需要知道的是，在绝大数情况下，用来解决约束条件系统的时间是可以忽略不计的。但是如果你正好在处理一些性能关键的视图代码时，最好还是对这一点有所了解。</p>

<p>例如，有一个 collection view，当新出现一行时，你需要在屏幕上呈现几个新的 cell，并且每个 cell 包含几个基于自动布局的子视图，这时你需要注意你的性能了。幸运的是，我们不需要用直觉来感受上下滚动的性能。启动 Instruments 真实的测量一下自动布局消耗的时间。当心 <code>NSISEngine</code> 类的方法。</p>

<p>另一种情况就是当你一次显示大量视图时可能会有性能问题。将约束条件转换成视图的 frame 时，用来<a href="ttp://www.cs.washington.edu/research/constraints/cassowary/">计算约束的算法</a>是<a href="http://zh.wikipedia.org/wiki/P_(%E8%A4%87%E9%9B%9C%E5%BA%A6)">超线性复杂</a>的。这意味着当有一定数量的视图时，性能将会变得非常低下。而这确切的数目取决于你具体使用情况和视图配置。但是，给你一个粗略的概念，在当前 iOS 设备下，这个数字大概是 100。你可以读这两个<a href="http://floriankugler.com/blog/2013/4/21/auto-layout-performance-on-ios">博客</a><a href="http://pilky.me/36/">帖子</a>了解更多的细节。</p>

<p>记住，这些都是极端的情况，不要过早的优化，并且避免自动布局潜在的性能影响。这样大多数情况便不会有问题。但是如果你怀疑这花费了你决定性的几十毫秒，从而导致用户界面不完全流畅的话，分析你的代码，然后你再去考虑用回手动设置 frame 有没有意义。此外，硬件将会变得越来越能干，并且Apple也会继续调整自动布局的性能。所以现实世界中极端情况的性能问题也将随着时间减少。</p>

<h2 id="toc_17">结论</h2>

<p>自动布局是一个创建灵活用户界面的强大功能，这种技术不会消失。刚开始使用自动布局时可能会有点困难，但总会有柳暗花明的一天。一旦你掌握了这种技术，并且掌握了排错的小技巧，便可庖丁解牛，恍然大悟：这太符合逻辑了。</p>

<hr/>

<p><a href="http://objccn.io/issue-3">话题 #3 下的更多文章</a></p>

<p>原文 <a href="http://www.objc.io/issue-3/advanced-auto-layout-toolbox.html">Advanced Auto Layout Toolbox</a></p>

<p>译文 <a href="http://answerhuang.duapp.com/index.php/2013/10/11/advanced-auto-layout-toolbox/">先进的自动布局工具箱 - answer-huang</a></p>

]]></content>
  </entry>
  
</feed>
